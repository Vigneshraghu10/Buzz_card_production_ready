import { useState, useCallback, useRef, useEffect } from "react";
import { 
  Upload, 
  Loader2, 
  CheckCircle, 
  XCircle, 
  Users, 
  FileText, 
  Camera,
  AlertTriangle,
  Edit,
  Save,
  X,
  Sparkles,
  Zap,
  CloudUpload,
  Check,
  Clock,
  Brain,
  FileImage,
  AlertCircle,
  CheckCircle2,
  QrCode,
  ScanLine,
  CameraOff,
  RotateCcw,
  ArrowRight,
  MessageCircle,
  Share2,
  ExternalLink,
  Image as ImageIcon,
  Smartphone,
  Monitor
} from "lucide-react";

// Mock interfaces and hooks (replace with actual implementations)
interface ParsedContact {
  name?: string;
  company?: string;
  email?: string;
  phones?: string[];
  landlines?: string[];
  services?: string;
  address?: string;
}

interface ProcessedCard extends ParsedContact {
  id: string;
  status: 'success' | 'error' | 'duplicate';
  error?: string;
  saved?: boolean;
  isFromCamera?: boolean;
  captureIndex?: number;
  qrCodes?: { type: string; data: string }[];
  imageUrl?: string;
}

interface Group {
  id: string;
  name: string;
  ownerId: string;
}

interface UploadResult {
  id: string;
  file: File;
  imageUrl?: string;
  status: "uploading" | "processing" | "completed" | "error";
  error?: string;
  isFromCamera?: boolean;
  captureIndex?: number;
}

// Mock utility functions
const processMultipleBusinessCards = async (file: File) => {
  await new Promise(resolve => setTimeout(resolve, 2000));
  return {
    cards: [{
      name: "John Smith",
      company: "Tech Solutions Inc",
      email: "john.smith@techsolutions.com",
      phones: ["+1234567890"],
      landlines: ["+1987654321"],
      services: "Senior Software Engineer",
      address: "123 Tech Street, Silicon Valley, CA 94000"
    }],
    errors: [],
    totalProcessed: 1
  };
};

const uploadToStorage = async (file: File, path: string) => {
  await new Promise(resolve => setTimeout(resolve, 1000));
  return URL.createObjectURL(file);
};

const isDuplicateContact = async (uid: string, email: string, phone: string) => {
  return Math.random() < 0.1; // 10% chance of duplicate
};

// Device detection utility
const isMobileDevice = () => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
         window.innerWidth <= 768;
};

// WhatsApp messaging utility
const sendWhatsAppMessage = (phoneNumber: string, message: string) => {
  const formattedPhone = phoneNumber.replace(/[^0-9]/g, '');
  const encodedMessage = encodeURIComponent(message);
  
  if (isMobileDevice()) {
    // Mobile: Use WhatsApp app
    window.open(`whatsapp://send?phone=${formattedPhone}&text=${encodedMessage}`, '_blank');
  } else {
    // Desktop: Use WhatsApp Web
    window.open(`https://wa.me/${formattedPhone}?text=${encodedMessage}`, '_blank');
  }
};

export default function EnhancedBusinessCardScanner() {
  const [files, setFiles] = useState<File[]>([]);
  const [processing, setProcessing] = useState(false);
  const [processed, setProcessed] = useState<ProcessedCard[]>([]);
  const [progress, setProgress] = useState(0);
  const [currentFile, setCurrentFile] = useState("");
  const [showResults, setShowResults] = useState(false);
  const [editingCard, setEditingCard] = useState<ProcessedCard | null>(null);
  const [editData, setEditData] = useState<ParsedContact>({});
  const [saving, setSaving] = useState<string | null>(null);
  
  // Enhanced camera and upload states
  const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);
  const [uploading, setUploading] = useState(false);
  const [groups, setGroups] = useState<Group[]>([]);
  const [selectedGroupIds, setSelectedGroupIds] = useState<string[]>([]);
  const [loadingGroups, setLoadingGroups] = useState(false);
  const [showCamera, setShowCamera] = useState(false);
  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);
  const [cameraError, setCameraError] = useState<string | null>(null);
  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment');
  const [captureCount, setCaptureCount] = useState(0);
  const [cameraMode, setCameraMode] = useState<'capture' | 'processing'>('capture');
  const [pendingCaptures, setPendingCaptures] = useState<UploadResult[]>([]);
  const [editingQR, setEditingQR] = useState<{cardId: string, qrIndex: number} | null>(null);
  const [qrEditValue, setQrEditValue] = useState("");
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Mock usage and limits
  const usage = { aiScansCount: 5 };
  const limits = { aiScans: 10 };
  const hasActiveSubscription = false;
  const canUseAIScan = usage.aiScansCount < limits.aiScans || hasActiveSubscription;

  useEffect(() => {
    return () => {
      if (cameraStream) {
        cameraStream.getTracks().forEach(track => track.stop());
      }
    };
  }, [cameraStream]);

  const startCamera = async () => {
    try {
      setCameraError(null);
      
      if (cameraStream) {
        cameraStream.getTracks().forEach(track => track.stop());
      }

      const constraints = {
        video: {
          facingMode,
          width: { ideal: isMobileDevice() ? 1280 : 1920 },
          height: { ideal: isMobileDevice() ? 720 : 1080 }
        }
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      setCameraStream(stream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (error: any) {
      console.error('Camera error:', error);
      let errorMessage = 'Failed to access camera';
      
      if (error.name === 'NotAllowedError') {
        errorMessage = 'Camera permission denied. Please allow camera access.';
      } else if (error.name === 'NotFoundError') {
        errorMessage = 'No camera found on this device.';
      } else if (error.name === 'NotSupportedError') {
        errorMessage = 'Camera not supported on this device.';
      }
      
      setCameraError(errorMessage);
    }
  };

  const stopCamera = () => {
    if (cameraStream) {
      cameraStream.getTracks().forEach(track => track.stop());
      setCameraStream(null);
    }
    setShowCamera(false);
    setCameraError(null);
    setCaptureCount(0);
    setCameraMode('capture');
    setPendingCaptures([]);
  };

  const switchCamera = async () => {
    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';
    setFacingMode(newFacingMode);
    await startCamera();
  };

  const capturePhoto = async () => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    if (!ctx) return;

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    canvas.toBlob(async (blob) => {
      if (!blob) return;

      const newCaptureCount = captureCount + 1;
      setCaptureCount(newCaptureCount);
      
      const timestamp = Date.now();
      const file = new File([blob], `camera-capture-${newCaptureCount}-${timestamp}.jpg`, {
        type: 'image/jpeg',
      });

      const newResult: UploadResult = {
        id: Math.random().toString(36).substr(2, 9),
        file,
        status: "uploading",
        isFromCamera: true,
        captureIndex: newCaptureCount,
      };

      setPendingCaptures(prev => [...prev, newResult]);
    }, 'image/jpeg', 0.9);
  };

  const processAllCaptures = async () => {
    if (pendingCaptures.length === 0) return;
    
    setCameraMode('processing');
    setUploading(true);
    
    const captureFiles = pendingCaptures.map(capture => capture.file);
    setFiles(prev => [...prev, ...captureFiles]);
    
    await processFiles();
    
    setUploading(false);
    setPendingCaptures([]);
    setCaptureCount(0);
    setCameraMode('capture');
    stopCamera();
  };

  const clearCaptures = () => {
    setPendingCaptures([]);
    setCaptureCount(0);
  };

  const handleFileSelect = useCallback((selectedFiles: FileList | null) => {
    if (!selectedFiles) return;
    
    const fileArray = Array.from(selectedFiles);
    const validFiles: File[] = [];
    
    fileArray.forEach(file => {
      if (file.type.startsWith('image/') && file.size <= 10 * 1024 * 1024) {
        validFiles.push(file);
      }
    });
    
    setFiles(prev => [...prev, ...validFiles]);
  }, []);

  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const processFiles = async () => {
    if (files.length === 0) return;
    
    if (!canUseAIScan) return;
    
    setProcessing(true);
    setProgress(0);
    const results: ProcessedCard[] = [];
    
    try {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        setCurrentFile(file.name);
        setProgress((i / files.length) * 100);
        
        try {
          const imageUrl = await uploadToStorage(file, `cards/${Date.now()}-${file.name}`);
          const result = await processMultipleBusinessCards(file);
          
          result.cards.forEach((card, cardIndex) => {
            const processedCard: ProcessedCard = {
              ...card,
              id: `${file.name}_card_${cardIndex + 1}`,
              status: 'success',
              imageUrl,
              isFromCamera: file.name.includes('camera-capture'),
              qrCodes: [{ type: 'url', data: 'https://example.com/contact' }] // Mock QR data
            };
            results.push(processedCard);
          });
          
        } catch (error: any) {
          console.error(`Error processing ${file.name}:`, error);
          results.push({
            id: `${file.name}_failed`,
            status: 'error',
            error: error.message || "Failed to process image"
          });
        }

        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      setProgress(100);
      setProcessed(results);
      setShowResults(true);
      
    } catch (error: any) {
      console.error("Bulk processing error:", error);
    } finally {
      setProcessing(false);
      setCurrentFile("");
    }
  };

  const saveContact = async (card: ProcessedCard) => {
    setSaving(card.id);
    
    try {
      const isDupe = await isDuplicateContact("user123", card.email || "", card.phones?.[0] || "");
      if (isDupe) {
        alert("Duplicate contact found!");
        setSaving(null);
        return;
      }

      // Mock save to database
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setProcessed(prev => 
        prev.map(p => 
          p.id === card.id ? { ...p, saved: true } : p
        )
      );
      
    } catch (error) {
      console.error("Error saving contact:", error);
    } finally {
      setSaving(null);
    }
  };

  const handleEditCard = (card: ProcessedCard) => {
    setEditingCard(card);
    setEditData({ ...card });
  };

  const saveEditedCard = () => {
    if (!editingCard) return;
    
    setProcessed(prev =>
      prev.map(p =>
        p.id === editingCard.id ? { ...p, ...editData } : p
      )
    );
    
    setEditingCard(null);
    setEditData({});
  };

  const handleQREdit = (cardId: string, qrIndex: number, currentData: string) => {
    setEditingQR({ cardId, qrIndex });
    setQrEditValue(currentData);
  };

  const saveQREdit = () => {
    if (!editingQR) return;
    
    setProcessed(prev =>
      prev.map(p => {
        if (p.id === editingQR.cardId && p.qrCodes) {
          const updatedQRs = [...p.qrCodes];
          updatedQRs[editingQR.qrIndex] = { ...updatedQRs[editingQR.qrIndex], data: qrEditValue };
          return { ...p, qrCodes: updatedQRs };
        }
        return p;
      })
    );
    
    setEditingQR(null);
    setQrEditValue("");
  };

  const sendWhatsApp = (card: ProcessedCard) => {
    const phone = card.phones?.[0] || card.landlines?.[0];
    if (!phone) return;
    
    const message = `Hi ${card.name || 'there'}! I got your contact information from your business card. Nice to connect with you!`;
    sendWhatsAppMessage(phone, message);
  };

  if (showResults) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-4 px-4 sm:py-8">
        <div className="max-w-6xl mx-auto">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">Processing Results</h2>
              <p className="text-gray-600 text-sm sm:text-base">
                Found {processed.filter(p => p.status === 'success').length} business cards
              </p>
            </div>
            <div className="flex space-x-3 mt-4 sm:mt-0">
              <button
                onClick={() => {
                  setShowResults(false);
                  setProcessed([]);
                  setFiles([]);
                }}
                className="px-4 py-2 text-sm border border-gray-300 rounded-xl hover:bg-gray-50 transition-colors"
              >
                Process More
              </button>
              <button 
                onClick={() => alert('Save all functionality')}
                className="px-4 py-2 text-sm bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:from-purple-700 hover:to-pink-700 transition-colors"
              >
                Save All Contacts
              </button>
            </div>
          </div>

          <div className="space-y-6">
            {processed.map((card, index) => (
              <div key={card.id} className={`bg-white rounded-2xl shadow-lg border-2 transition-all hover:shadow-xl ${
                card.status === 'error' ? 'border-red-200 bg-red-50' : 
                card.saved ? 'border-green-200 bg-green-50' : 'border-gray-100'
              }`}>
                <div className="p-4 sm:p-6">
                  <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-4">
                    <div className="flex items-center mb-4 sm:mb-0">
                      {card.status === 'error' ? (
                        <XCircle className="h-6 w-6 text-red-500 mr-3" />
                      ) : card.saved ? (
                        <CheckCircle className="h-6 w-6 text-green-500 mr-3" />
                      ) : (
                        <Camera className="h-6 w-6 text-blue-500 mr-3" />
                      )}
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">
                          {card.status === 'error' ? 'Processing Error' : card.name || 'Unnamed Contact'}
                        </h3>
                        <div className="flex flex-wrap gap-2 mt-1">
                          {card.isFromCamera && (
                            <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">
                              Camera
                            </span>
                          )}
                          {card.qrCodes && card.qrCodes.length > 0 && (
                            <span className="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full font-medium">
                              QR Code
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    {card.status === 'success' && !card.saved && (
                      <div className="flex space-x-2">
                        <button
                          onClick={() => sendWhatsApp(card)}
                          disabled={!card.phones?.length && !card.landlines?.length}
                          className="flex items-center px-3 py-2 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                        >
                          <MessageCircle className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleEditCard(card)}
                          className="flex items-center px-3 py-2 text-gray-600 border border-gray-300 rounded-xl hover:bg-gray-50 transition-colors text-sm"
                        >
                          <Edit className="h-4 w-4 mr-1" />
                          Edit
                        </button>
                        <button
                          onClick={() => saveContact(card)}
                          disabled={saving === card.id}
                          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors disabled:opacity-50 text-sm"
                        >
                          {saving === card.id ? (
                            <Loader2 className="h-4 w-4 mr-1 animate-spin" />
                          ) : (
                            <Save className="h-4 w-4 mr-1" />
                          )}
                          Save
                        </button>
                      </div>
                    )}
                  </div>

                  {card.status === 'error' ? (
                    <div className="text-red-600 flex items-center">
                      <AlertTriangle className="h-4 w-4 mr-2" />
                      {card.error}
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
                      {card.imageUrl && (
                        <div className="lg:col-span-4">
                          <img 
                            src={card.imageUrl} 
                            alt="Business card" 
                            className="w-full h-48 sm:h-32 lg:h-40 object-cover rounded-xl shadow-md"
                          />
                        </div>
                      )}
                      
                      <div className="lg:col-span-8 grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm font-medium text-gray-500">Company</label>
                          <p className="mt-1 text-gray-900">{card.company || "Not provided"}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Email</label>
                          <p className="mt-1 text-gray-900">{card.email || "Not provided"}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Phone Numbers</label>
                          <p className="mt-1 text-gray-900">
                            {card.phones && card.phones.length > 0 
                              ? card.phones.join(", ") 
                              : "Not provided"}
                          </p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Landlines</label>
                          <p className="mt-1 text-gray-900">
                            {card.landlines && card.landlines.length > 0 
                              ? card.landlines.join(", ") 
                              : "Not provided"}
                          </p>
                        </div>
                        {card.services && (
                          <div className="sm:col-span-2">
                            <label className="text-sm font-medium text-gray-500">Services/Position</label>
                            <p className="mt-1 text-gray-900">{card.services}</p>
                          </div>
                        )}
                        {card.address && (
                          <div className="sm:col-span-2">
                            <label className="text-sm font-medium text-gray-500">Address</label>
                            <p className="mt-1 text-gray-900">{card.address}</p>
                          </div>
                        )}
                        {card.qrCodes && card.qrCodes.length > 0 && (
                          <div className="sm:col-span-2">
                            <label className="text-sm font-medium text-gray-500">QR Code Data</label>
                            <div className="mt-2 space-y-2">
                              {card.qrCodes.map((qr, idx) => (
                                <div key={idx} className="bg-purple-50 p-3 rounded-xl border border-purple-200">
                                  <div className="flex items-center justify-between">
                                    <div className="flex-1">
                                      <span className="font-medium capitalize text-purple-800">{qr.type}:</span>
                                      <span className="ml-2 text-purple-700 break-all">{qr.data}</span>
                                    </div>
                                    <button
                                      onClick={() => handleQREdit(card.id, idx, qr.data)}
                                      className="ml-2 p-1 text-purple-600 hover:bg-purple-100 rounded"
                                    >
                                      <Edit className="h-4 w-4" />
                                    </button>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Edit Contact Modal */}
        {editingCard && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-6">Edit Contact Information</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input
                      type="text"
                      value={editData.name || ""}
                      onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Company</label>
                    <input
                      type="text"
                      value={editData.company || ""}
                      onChange={(e) => setEditData(prev => ({ ...prev, company: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input
                      type="email"
                      value={editData.email || ""}
                      onChange={(e) => setEditData(prev => ({ ...prev, email: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Phone Numbers (comma-separated)</label>
                    <input
                      type="text"
                      value={editData.phones?.join(", ") || ""}
                      onChange={(e) => setEditData(prev => ({ 
                        ...prev, 
                        phones: e.target.value.split(",").map(p => p.trim()).filter(p => p)
                      }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  <div className="sm:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Services/Position</label>
                    <textarea
                      value={editData.services || ""}
                      onChange={(e) => setEditData(prev => ({ ...prev, services: e.target.value }))}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  <div className="sm:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
                    <textarea
                      value={editData.address || ""}
                      onChange={(e) => setEditData(prev => ({ ...prev, address: e.target.value }))}
                      rows={2}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <div className="flex justify-end space-x-3 mt-6">
                  <button 
                    onClick={() => setEditingCard(null)}
                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button 
                    onClick={saveEditedCard}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                  >
                    Save Changes
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit QR Modal */}
        {editingQR && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-2xl w-full max-w-md">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4">Edit QR Code URL</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">URL</label>
                    <input
                      type="url"
                      value={qrEditValue}
                      onChange={(e) => setQrEditValue(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="https://example.com"
                    />
                  </div>
                </div>
                <div className="flex justify-end space-x-3 mt-6">
                  <button 
                    onClick={() => setEditingQR(null)}
                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button 
                    onClick={saveQREdit}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                  >
                    Save URL
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-4 px-4 sm:py-8">
          <div className="max-w-6xl mx-auto">
            <div className="mb-8">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-14 h-14 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <Sparkles className="text-white h-7 w-7" />
                </div>
                <div>
                  <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                    AI Business Card Scanner
                  </h2>
                  <p className="text-gray-600 text-sm sm:text-lg mt-1">
                    Extract data from multiple business cards with advanced AI detection
                  </p>
                </div>
              </div>
              
              {/* AI Features Banner */}
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-3 sm:p-4 rounded-xl border border-blue-200">
                  <div className="flex items-center space-x-2 sm:space-x-3">
                    <Brain className="h-6 w-6 sm:h-8 sm:w-8 text-blue-600 flex-shrink-0" />
                    <div>
                      <h3 className="font-semibold text-blue-900 text-sm sm:text-base">AI-Powered</h3>
                      <p className="text-xs sm:text-sm text-blue-700">Advanced OCR</p>
                    </div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 sm:p-4 rounded-xl border border-green-200">
                  <div className="flex items-center space-x-2 sm:space-x-3">
                    <Camera className="h-6 w-6 sm:h-8 sm:w-8 text-green-600 flex-shrink-0" />
                    <div>
                      <h3 className="font-semibold text-green-900 text-sm sm:text-base">Multi-Card</h3>
                      <p className="text-xs sm:text-sm text-green-700">Batch process</p>
                    </div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-purple-50 to-violet-50 p-3 sm:p-4 rounded-xl border border-purple-200">
                  <div className="flex items-center space-x-2 sm:space-x-3">
                    <QrCode className="h-6 w-6 sm:h-8 sm:w-8 text-purple-600 flex-shrink-0" />
                    <div>
                      <h3 className="font-semibold text-purple-900 text-sm sm:text-base">QR Support</h3>
                      <p className="text-xs sm:text-sm text-purple-700">vCard detect</p>
                    </div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-amber-50 to-orange-50 p-3 sm:p-4 rounded-xl border border-amber-200">
                  <div className="flex items-center space-x-2 sm:space-x-3">
                    <CheckCircle2 className="h-6 w-6 sm:h-8 sm:w-8 text-amber-600 flex-shrink-0" />
                    <div>
                      <h3 className="font-semibold text-amber-900 text-sm sm:text-base">Smart Check</h3>
                      <p className="text-xs sm:text-sm text-amber-700">No duplicates</p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Usage Status */}
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 border border-blue-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <Zap className="h-5 w-5 text-blue-600" />
                    <div>
                      <p className="font-medium text-blue-900 text-sm sm:text-base">
                        {hasActiveSubscription ? 'Premium Plan Active' : 'Free Plan'}
                      </p>
                      <p className="text-xs sm:text-sm text-blue-700">
                        {hasActiveSubscription 
                          ? 'Unlimited AI scans available' 
                          : `${usage.aiScansCount}/${limits.aiScans} AI scans used`
                        }
                      </p>
                    </div>
                  </div>
                  {!canUseAIScan && (
                    <button className="px-3 py-1.5 text-xs sm:text-sm bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-colors">
                      Upgrade Now
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Upload Zone */}
            <div className="bg-white rounded-2xl shadow-xl overflow-hidden mb-6">
              {/* Header */}
              <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-4 sm:p-6 text-white">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <FileImage className="h-5 w-5 sm:h-6 sm:w-6" />
                    <h3 className="text-base sm:text-lg font-semibold">Smart Upload Zone</h3>
                  </div>
                  <div className="bg-white/20 px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium">
                    {files.length > 0 ? `${files.length}/10 files` : 'Ready'}
                  </div>
                </div>
              </div>
              
              {/* Upload Area */}
              <div 
                className="p-6 sm:p-8 border-2 border-dashed border-purple-200 m-4 sm:m-6 rounded-2xl hover:border-purple-400 transition-all duration-300 hover:bg-purple-50/50"
                onDragOver={(e) => e.preventDefault()}
                onDrop={(e) => {
                  e.preventDefault();
                  if (canUseAIScan) {
                    handleFileSelect(e.dataTransfer.files);
                  }
                }}
              >
                <div className="text-center">
                  <div className="mx-auto w-16 h-16 sm:w-20 sm:h-20 flex items-center justify-center bg-gradient-to-br from-purple-100 to-pink-100 rounded-2xl mb-4 sm:mb-6">
                    <CloudUpload className="text-purple-600 h-8 w-8 sm:h-10 sm:w-10" />
                  </div>
                  <h3 className="text-lg sm:text-2xl font-bold text-gray-900 mb-4">Drop Your Business Cards Here</h3>
                  <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center items-center">
                    <button 
                      onClick={() => {
                        if (canUseAIScan) {
                          const input = document.createElement('input');
                          input.type = 'file';
                          input.multiple = true;
                          input.accept = 'image/jpeg,image/png,image/gif,image/webp';
                          input.onchange = (e) => {
                            const files = (e.target as HTMLInputElement).files;
                            if (files) handleFileSelect(files);
                          };
                          input.click();
                        }
                      }}
                      disabled={processing}
                      className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 sm:px-8 py-2.5 sm:py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50 transition-colors text-sm sm:text-base"
                    >
                      <CloudUpload className="h-4 w-4 sm:h-5 sm:w-5 mr-2 inline" />
                      {processing ? 'Processing...' : 'Choose Files'}
                    </button>
                    
                    <button
                      onClick={() => {
                        if (canUseAIScan) {
                          setShowCamera(true);
                          startCamera();
                        }
                      }}
                      disabled={processing}
                      className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 px-6 sm:px-8 py-2.5 sm:py-3 rounded-xl font-semibold transition-colors text-sm sm:text-base"
                    >
                      <Camera className="h-4 w-4 sm:h-5 sm:w-5 mr-2 inline" />
                      Use Camera
                    </button>
                  </div>
                  
                  <div className="mt-4 text-center">
                    <p className="text-sm text-gray-500">Or drag and drop files</p>
                    <p className="text-xs text-gray-400 mt-1">PNG, JPG, WebP up to 10MB each • Max 10 files</p>
                    <p className="text-xs text-purple-600 mt-1 flex items-center justify-center">
                      <QrCode className="h-3 w-3 mr-1" />
                      QR codes automatically detected
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Selected Files - Enhanced Display */}
            {files.length > 0 && (
              <div className="bg-white rounded-2xl shadow-xl overflow-hidden mb-6">
                <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-4 sm:p-6 text-white">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <FileText className="h-5 w-5 sm:h-6 sm:w-6" />
                      <h3 className="text-base sm:text-lg font-semibold">Selected Files ({files.length})</h3>
                    </div>
                    <div className="text-xs sm:text-sm opacity-90">
                      Ready for processing
                    </div>
                  </div>
                </div>
                
                <div className="p-4 sm:p-6">
                  {/* File Grid - Enhanced for Mobile */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-6">
                    {files.slice(0, 6).map((file, index) => (
                      <div key={index} className="relative group">
                        <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-4 border-2 border-gray-200 hover:border-purple-300 transition-all">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center flex-1 min-w-0">
                              <ImageIcon className="h-5 w-5 text-gray-500 mr-2 flex-shrink-0" />
                              <div className="min-w-0 flex-1">
                                <p className="text-sm font-medium text-gray-900 truncate">{file.name}</p>
                                <p className="text-xs text-gray-500">
                                  {(file.size / 1024 / 1024).toFixed(2)} MB
                                </p>
                              </div>
                            </div>
                            <button
                              onClick={() => removeFile(index)}
                              disabled={processing}
                              className="ml-2 p-1 text-red-500 hover:bg-red-50 rounded-full transition-colors flex-shrink-0"
                            >
                              <X className="h-4 w-4" />
                            </button>
                          </div>
                          {file.name.includes('camera-capture') && (
                            <div className="flex items-center space-x-1">
                              <Camera className="h-3 w-3 text-green-600" />
                              <span className="text-xs text-green-600 font-medium">Camera</span>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                    {files.length > 6 && (
                      <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-4 border-2 border-purple-200 flex items-center justify-center">
                        <div className="text-center">
                          <p className="text-sm font-medium text-purple-900">+{files.length - 6} more</p>
                          <p className="text-xs text-purple-700">files ready</p>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Compact Process Button */}
                  <button
                    onClick={processFiles}
                    disabled={processing || files.length === 0}
                    className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50 transition-colors flex items-center justify-center text-sm sm:text-base"
                  >
                    {processing ? (
                      <>
                        <Loader2 className="h-4 w-4 sm:h-5 sm:w-5 mr-2 animate-spin" />
                        Processing...
                      </>
                    ) : (
                      <>
                        <Brain className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
                        Process {files.length} with AI
                      </>
                    )}
                  </button>
                  
                  {/* Compact Progress Bar */}
                  {processing && (
                    <div className="mt-4 space-y-2">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-gradient-to-r from-purple-600 to-pink-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${progress}%` }}
                        ></div>
                      </div>
                      <div className="flex justify-between text-xs text-gray-600">
                        <span>{Math.round(progress)}% complete</span>
                        {currentFile && <span className="truncate ml-2">{currentFile}</span>}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Camera Modal - Responsive Design */}
            {showCamera && (
              <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-2 sm:p-4 z-50">
                <div className="bg-white rounded-2xl w-full max-w-4xl max-h-[95vh] overflow-hidden">
                  <div className="p-4 sm:p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-2">
                        <Camera className="h-5 w-5 text-purple-600" />
                        <h3 className="text-lg sm:text-xl font-semibold">Capture Business Cards</h3>
                        {pendingCaptures.length > 0 && (
                          <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                            {pendingCaptures.length} captured
                          </span>
                        )}
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="text-xs sm:text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                          {isMobileDevice() ? <Smartphone className="h-3 w-3" /> : <Monitor className="h-3 w-3" />}
                        </div>
                      </div>
                    </div>

                    {cameraError ? (
                      <div className="text-center py-8 sm:py-12">
                        <CameraOff className="h-12 w-12 sm:h-16 sm:w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-red-600 mb-4 text-sm sm:text-base">{cameraError}</p>
                        <button 
                          onClick={startCamera}
                          className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base"
                        >
                          <RotateCcw className="h-4 w-4 mr-2 inline" />
                          Try Again
                        </button>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div className="relative bg-black rounded-xl overflow-hidden">
                          <video
                            ref={videoRef}
                            autoPlay
                            playsInline
                            muted
                            className="w-full h-64 sm:h-80 lg:h-96 object-cover"
                          />
                          {/* Camera overlay with responsive design */}
                          <div className="absolute inset-0 pointer-events-none">
                            <div className="absolute inset-2 sm:inset-4 border-2 border-white/50 rounded-lg">
                              <ScanLine className="absolute top-1 left-1 sm:top-2 sm:left-2 h-4 w-4 sm:h-6 sm:w-6 text-white/75" />
                              <div className="absolute top-1 sm:top-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs sm:text-sm font-medium">
                                Position card within frame ({captureCount}/10)
                              </div>
                              {pendingCaptures.length > 0 && (
                                <div className="absolute bottom-1 sm:bottom-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs">
                                  {pendingCaptures.length} card{pendingCaptures.length > 1 ? 's' : ''} ready to process
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        {/* Pending captures preview - Mobile optimized */}
                        {pendingCaptures.length > 0 && (
                          <div className="bg-gray-50 rounded-xl p-3 sm:p-4">
                            <h4 className="text-sm font-medium text-gray-900 mb-3">Captured Photos ({pendingCaptures.length})</h4>
                            <div className="flex space-x-2 overflow-x-auto pb-2">
                              {pendingCaptures.map((capture, index) => (
                                <div key={capture.id} className="flex-shrink-0 relative">
                                  <div className="w-12 h-8 sm:w-16 sm:h-10 bg-gray-200 rounded border-2 border-green-300 flex items-center justify-center">
                                    <Camera className="h-3 w-3 sm:h-4 sm:w-4 text-green-600" />
                                  </div>
                                  <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold">
                                    {index + 1}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {cameraMode === 'capture' ? (
                          <div className="flex flex-wrap justify-center gap-2 sm:gap-4">
                            <button
                              onClick={switchCamera}
                              className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                            >
                              <RotateCcw className="h-4 w-4 mr-1 sm:mr-2 inline" />
                              Switch Camera
                            </button>
                            <button
                              onClick={capturePhoto}
                              className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-4 sm:px-8 py-2 text-white rounded-lg transition-colors disabled:opacity-50 text-sm sm:text-base font-medium"
                              disabled={!cameraStream || captureCount >= 10}
                            >
                              <Camera className="h-4 w-4 mr-1 sm:mr-2 inline" />
                              Capture ({captureCount}/10)
                            </button>
                            {pendingCaptures.length > 0 && (
                              <>
                                <button
                                  onClick={processAllCaptures}
                                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-4 sm:px-6 py-2 text-white rounded-lg transition-colors text-sm sm:text-base font-medium"
                                >
                                  <ArrowRight className="h-4 w-4 mr-1 sm:mr-2 inline" />
                                  Process ({pendingCaptures.length})
                                </button>
                                <button
                                  onClick={clearCaptures}
                                  className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                                >
                                  Clear
                                </button>
                              </>
                            )}
                            <button
                              onClick={stopCamera}
                              className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                            >
                              Cancel
                            </button>
                          </div>
                        ) : (
                          <div className="text-center py-8">
                            <div className="animate-spin rounded-full h-8 w-8 sm:h-12 sm:w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                            <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-2">Processing Captures</h3>
                            <p className="text-gray-600 text-sm sm:text-base">Please wait while we extract contact information...</p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Hidden canvas for camera capture */}
          <canvas ref={canvasRef} className="hidden" />
        </div>
      );
    }

    // Main component render for upload interface
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-4 px-4 sm:py-8">
        {/* Component content is above in the main upload interface */}
      </div>
      );
  }

  // Main component render for upload interface
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-4 px-4 sm:py-8">
      <div className="max-w-6xl mx-auto">
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-6">
            <div className="w-14 h-14 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg">
              <Sparkles className="text-white h-7 w-7" />
            </div>
            <div>
              <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                AI Business Card Scanner
              </h2>
              <p className="text-gray-600 text-sm sm:text-lg mt-1">
                Extract data from multiple business cards with advanced AI detection
              </p>
            </div>
          </div>
          
          {/* AI Features Banner */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-3 sm:p-4 rounded-xl border border-blue-200">
              <div className="flex items-center space-x-2 sm:space-x-3">
                <Brain className="h-6 w-6 sm:h-8 sm:w-8 text-blue-600 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-blue-900 text-sm sm:text-base">AI-Powered</h3>
                  <p className="text-xs sm:text-sm text-blue-700">Advanced OCR</p>
                </div>
              </div>
            </div>
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 sm:p-4 rounded-xl border border-green-200">
              <div className="flex items-center space-x-2 sm:space-x-3">
                <Camera className="h-6 w-6 sm:h-8 sm:w-8 text-green-600 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-green-900 text-sm sm:text-base">Multi-Card</h3>
                  <p className="text-xs sm:text-sm text-green-700">Batch process</p>
                </div>
              </div>
            </div>
            <div className="bg-gradient-to-r from-purple-50 to-violet-50 p-3 sm:p-4 rounded-xl border border-purple-200">
              <div className="flex items-center space-x-2 sm:space-x-3">
                <QrCode className="h-6 w-6 sm:h-8 sm:w-8 text-purple-600 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-purple-900 text-sm sm:text-base">QR Support</h3>
                  <p className="text-xs sm:text-sm text-purple-700">vCard detect</p>
                </div>
              </div>
            </div>
            <div className="bg-gradient-to-r from-amber-50 to-orange-50 p-3 sm:p-4 rounded-xl border border-amber-200">
              <div className="flex items-center space-x-2 sm:space-x-3">
                <CheckCircle2 className="h-6 w-6 sm:h-8 sm:w-8 text-amber-600 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-amber-900 text-sm sm:text-base">Smart Check</h3>
                  <p className="text-xs sm:text-sm text-amber-700">No duplicates</p>
                </div>
              </div>
            </div>
          </div>
          
          {/* Usage Status */}
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 border border-blue-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Zap className="h-5 w-5 text-blue-600" />
                <div>
                  <p className="font-medium text-blue-900 text-sm sm:text-base">
                    {hasActiveSubscription ? 'Premium Plan Active' : 'Free Plan'}
                  </p>
                  <p className="text-xs sm:text-sm text-blue-700">
                    {hasActiveSubscription 
                      ? 'Unlimited AI scans available' 
                      : `${usage.aiScansCount}/${limits.aiScans} AI scans used`
                    }
                  </p>
                </div>
              </div>
              {!canUseAIScan && (
                <button className="px-3 py-1.5 text-xs sm:text-sm bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-colors">
                  Upgrade Now
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Upload Zone */}
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden mb-6">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-4 sm:p-6 text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <FileImage className="h-5 w-5 sm:h-6 sm:w-6" />
                <h3 className="text-base sm:text-lg font-semibold">Smart Upload Zone</h3>
              </div>
              <div className="bg-white/20 px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium">
                {files.length > 0 ? `${files.length}/10 files` : 'Ready'}
              </div>
            </div>
          </div>
          
          {/* Upload Area */}
          <div 
            className="p-6 sm:p-8 border-2 border-dashed border-purple-200 m-4 sm:m-6 rounded-2xl hover:border-purple-400 transition-all duration-300 hover:bg-purple-50/50"
            onDragOver={(e) => e.preventDefault()}
            onDrop={(e) => {
              e.preventDefault();
              if (canUseAIScan) {
                handleFileSelect(e.dataTransfer.files);
              }
            }}
          >
            <div className="text-center">
              <div className="mx-auto w-16 h-16 sm:w-20 sm:h-20 flex items-center justify-center bg-gradient-to-br from-purple-100 to-pink-100 rounded-2xl mb-4 sm:mb-6">
                <CloudUpload className="text-purple-600 h-8 w-8 sm:h-10 sm:w-10" />
              </div>
              <h3 className="text-lg sm:text-2xl font-bold text-gray-900 mb-4">Drop Your Business Cards Here</h3>
              <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center items-center">
                <button 
                  onClick={() => {
                    if (canUseAIScan) {
                      const input = document.createElement('input');
                      input.type = 'file';
                      input.multiple = true;
                      input.accept = 'image/jpeg,image/png,image/gif,image/webp';
                      input.onchange = (e) => {
                        const files = (e.target as HTMLInputElement).files;
                        if (files) handleFileSelect(files);
                      };
                      input.click();
                    }
                  }}
                  disabled={processing}
                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 sm:px-8 py-2.5 sm:py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50 transition-colors text-sm sm:text-base"
                >
                  <CloudUpload className="h-4 w-4 sm:h-5 sm:w-5 mr-2 inline" />
                  {processing ? 'Processing...' : 'Choose Files'}
                </button>
                
                <button
                  onClick={() => {
                    if (canUseAIScan) {
                      setShowCamera(true);
                      startCamera();
                    }
                  }}
                  disabled={processing}
                  className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 px-6 sm:px-8 py-2.5 sm:py-3 rounded-xl font-semibold transition-colors text-sm sm:text-base"
                >
                  <Camera className="h-4 w-4 sm:h-5 sm:w-5 mr-2 inline" />
                  Use Camera
                </button>
              </div>
              
              <div className="mt-4 text-center">
                <p className="text-sm text-gray-500">Or drag and drop files</p>
                <p className="text-xs text-gray-400 mt-1">PNG, JPG, WebP up to 10MB each • Max 10 files</p>
                <p className="text-xs text-purple-600 mt-1 flex items-center justify-center">
                  <QrCode className="h-3 w-3 mr-1" />
                  QR codes automatically detected
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Selected Files - Enhanced Display */}
        {files.length > 0 && (
          <div className="bg-white rounded-2xl shadow-xl overflow-hidden mb-6">
            <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-4 sm:p-6 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <FileText className="h-5 w-5 sm:h-6 sm:w-6" />
                  <h3 className="text-base sm:text-lg font-semibold">Selected Files ({files.length})</h3>
                </div>
                <div className="text-xs sm:text-sm opacity-90">
                  Ready for processing
                </div>
              </div>
            </div>
            
            <div className="p-4 sm:p-6">
              {/* File Grid - Enhanced for Mobile */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-6">
                {files.slice(0, 6).map((file, index) => (
                  <div key={index} className="relative group">
                    <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-4 border-2 border-gray-200 hover:border-purple-300 transition-all">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center flex-1 min-w-0">
                          <ImageIcon className="h-5 w-5 text-gray-500 mr-2 flex-shrink-0" />
                          <div className="min-w-0 flex-1">
                            <p className="text-sm font-medium text-gray-900 truncate">{file.name}</p>
                            <p className="text-xs text-gray-500">
                              {(file.size / 1024 / 1024).toFixed(2)} MB
                            </p>
                          </div>
                        </div>
                        <button
                          onClick={() => removeFile(index)}
                          disabled={processing}
                          className="ml-2 p-1 text-red-500 hover:bg-red-50 rounded-full transition-colors flex-shrink-0"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                      {file.name.includes('camera-capture') && (
                        <div className="flex items-center space-x-1">
                          <Camera className="h-3 w-3 text-green-600" />
                          <span className="text-xs text-green-600 font-medium">Camera</span>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
                {files.length > 6 && (
                  <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-4 border-2 border-purple-200 flex items-center justify-center">
                    <div className="text-center">
                      <p className="text-sm font-medium text-purple-900">+{files.length - 6} more</p>
                      <p className="text-xs text-purple-700">files ready</p>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Compact Process Button */}
              <button
                onClick={processFiles}
                disabled={processing || files.length === 0}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50 transition-colors flex items-center justify-center text-sm sm:text-base"
              >
                {processing ? (
                  <>
                    <Loader2 className="h-4 w-4 sm:h-5 sm:w-5 mr-2 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Brain className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
                    Process {files.length} with AI
                  </>
                )}
              </button>
              
              {/* Compact Progress Bar */}
              {processing && (
                <div className="mt-4 space-y-2">
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-gradient-to-r from-purple-600 to-pink-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                  <div className="flex justify-between text-xs text-gray-600">
                    <span>{Math.round(progress)}% complete</span>
                    {currentFile && <span className="truncate ml-2">{currentFile}</span>}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Camera Modal - Responsive Design */}
        {showCamera && (
          <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-2 sm:p-4 z-50">
            <div className="bg-white rounded-2xl w-full max-w-4xl max-h-[95vh] overflow-hidden">
              <div className="p-4 sm:p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <Camera className="h-5 w-5 text-purple-600" />
                    <h3 className="text-lg sm:text-xl font-semibold">Capture Business Cards</h3>
                    {pendingCaptures.length > 0 && (
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                        {pendingCaptures.length} captured
                      </span>
                    )}
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="text-xs sm:text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                      {isMobileDevice() ? <Smartphone className="h-3 w-3" /> : <Monitor className="h-3 w-3" />}
                    </div>
                  </div>
                </div>

                {cameraError ? (
                  <div className="text-center py-8 sm:py-12">
                    <CameraOff className="h-12 w-12 sm:h-16 sm:w-16 text-gray-400 mx-auto mb-4" />
                    <p className="text-red-600 mb-4 text-sm sm:text-base">{cameraError}</p>
                    <button 
                      onClick={startCamera}
                      className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base"
                    >
                      <RotateCcw className="h-4 w-4 mr-2 inline" />
                      Try Again
                    </button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="relative bg-black rounded-xl overflow-hidden">
                      <video
                        ref={videoRef}
                        autoPlay
                        playsInline
                        muted
                        className="w-full h-64 sm:h-80 lg:h-96 object-cover"
                      />
                      {/* Camera overlay with responsive design */}
                      <div className="absolute inset-0 pointer-events-none">
                        <div className="absolute inset-2 sm:inset-4 border-2 border-white/50 rounded-lg">
                          <ScanLine className="absolute top-1 left-1 sm:top-2 sm:left-2 h-4 w-4 sm:h-6 sm:w-6 text-white/75" />
                          <div className="absolute top-1 sm:top-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs sm:text-sm font-medium">
                            Position card within frame ({captureCount}/10)
                          </div>
                          {pendingCaptures.length > 0 && (
                            <div className="absolute bottom-1 sm:bottom-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs">
                              {pendingCaptures.length} card{pendingCaptures.length > 1 ? 's' : ''} ready to process
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    {/* Pending captures preview - Mobile optimized */}
                    {pendingCaptures.length > 0 && (
                      <div className="bg-gray-50 rounded-xl p-3 sm:p-4">
                        <h4 className="text-sm font-medium text-gray-900 mb-3">Captured Photos ({pendingCaptures.length})</h4>
                        <div className="flex space-x-2 overflow-x-auto pb-2">
                          {pendingCaptures.map((capture, index) => (
                            <div key={capture.id} className="flex-shrink-0 relative">
                              <div className="w-12 h-8 sm:w-16 sm:h-10 bg-gray-200 rounded border-2 border-green-300 flex items-center justify-center">
                                <Camera className="h-3 w-3 sm:h-4 sm:w-4 text-green-600" />
                              </div>
                              <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold">
                                {index + 1}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {cameraMode === 'capture' ? (
                      <div className="flex flex-wrap justify-center gap-2 sm:gap-4">
                        <button
                          onClick={switchCamera}
                          className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                        >
                          <RotateCcw className="h-4 w-4 mr-1 sm:mr-2 inline" />
                          Switch Camera
                        </button>
                        <button
                          onClick={capturePhoto}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-4 sm:px-8 py-2 text-white rounded-lg transition-colors disabled:opacity-50 text-sm sm:text-base font-medium"
                          disabled={!cameraStream || captureCount >= 10}
                        >
                          <Camera className="h-4 w-4 mr-1 sm:mr-2 inline" />
                          Capture ({captureCount}/10)
                        </button>
                        {pendingCaptures.length > 0 && (
                          <>
                            <button
                              onClick={processAllCaptures}
                              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-4 sm:px-6 py-2 text-white rounded-lg transition-colors text-sm sm:text-base font-medium"
                            >
                              <ArrowRight className="h-4 w-4 mr-1 sm:mr-2 inline" />
                              Process ({pendingCaptures.length})
                            </button>
                            <button
                              onClick={clearCaptures}
                              className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                            >
                              Clear
                            </button>
                          </>
                        )}
                        <button
                          onClick={stopCamera}
                          className="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    ) : (
                      <div className="text-center py-8">
                        <div className="animate-spin rounded-full h-8 w-8 sm:h-12 sm:w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
                        <h3 className="text-base sm:text-lg font-semibold text-gray-900 mb-2">Processing Captures</h3>
                        <p className="text-gray-600 text-sm sm:text-base">Please wait while we extract contact information...</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hidden canvas for camera capture */}
      <canvas ref={canvasRef} className="hidden" />
    </div>
  );
}