{"file_contents":{"LOCAL_SETUP_GUIDE.md":{"content":"# Local Setup Guide - Windows 11 & VS Code\n\nComplete guide to run the WhatsApp Business Card Manager locally with separate frontend and backend servers.\n\n## Prerequisites\n\n1. **Node.js** (LTS version) - Download from [nodejs.org](https://nodejs.org/)\n2. **VS Code** - Download from [code.visualstudio.com](https://code.visualstudio.com/)\n\n## Quick Setup\n\n### 1. Project Setup\n```cmd\n# Navigate to your project folder\ncd C:\\Path\\To\\Your\\Project\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncopy .env.example .env\n```\n\n### 2. Configure Environment Variables\nEdit `.env` file with your API keys:\n```env\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_PROJECT_ID=your_firebase_project_id\nVITE_FIREBASE_APP_ID=your_firebase_app_id\nVITE_GEMINI_API_KEY=your_gemini_api_key\n```\n\n### 3. Get API Keys\n\n**Firebase Setup:**\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Create new project or select existing\n3. Add web app and copy configuration values\n4. Enable Authentication (Email/Password)\n5. Enable Firestore Database\n6. Enable Storage\n\n**Gemini API:**\n1. Go to [Google AI Studio](https://makersuite.google.com/)\n2. Create API key\n3. Copy to `.env` file\n\n## Running Separately\n\n### Method 1: VS Code Terminals (Recommended)\n\n1. **Open VS Code** in your project folder\n2. **Open Terminal** (`Ctrl + Shift + ``)\n3. **Split Terminal** (`Ctrl + Shift + 5`)\n\n**Terminal 1 - Backend:**\n```cmd\ncd server\nset NODE_ENV=development && npx tsx index.ts\n```\n\n**Terminal 2 - Frontend:**\n```cmd\ncd client\nnpx vite\n```\n\n### Method 2: Command Prompt Windows\n\n**Window 1 - Backend:**\n```cmd\ncd your-project-folder\\server\nset NODE_ENV=development && npx tsx index.ts\n```\n\n**Window 2 - Frontend:**\n```cmd\ncd your-project-folder\\client\nnpx vite\n```\n\n### Method 3: PowerShell\n\n**PowerShell 1 - Backend:**\n```powershell\ncd server\n$env:NODE_ENV = \"development\"; npx tsx index.ts\n```\n\n**PowerShell 2 - Frontend:**\n```powershell\ncd client\nnpx vite\n```\n\n## Access URLs\n\n- **Frontend Application**: http://localhost:3000\n- **Backend API**: http://localhost:5000\n\n## What Each Server Does\n\n**Backend (Port 5000):**\n- Express.js API server\n- Firebase integration\n- OCR processing with Gemini\n- File upload handling\n- Database operations\n\n**Frontend (Port 3000):**\n- React application\n- Vite development server\n- Hot reload for UI changes\n- Automatic API proxy to backend\n\n## Troubleshooting\n\n### Port 5000 Already in Use\n```cmd\n# Find process using port 5000\nnetstat -ano | findstr :5000\n\n# Kill the process (replace XXXX with PID)\ntaskkill /PID XXXX /F\n```\n\n### Module Resolution Errors\n```cmd\n# Clear and reinstall dependencies\nrmdir /s node_modules\ndel package-lock.json\nnpm install\n```\n\n### Environment Variables Not Loading\n- Ensure `.env` file is in project root\n- Restart both servers after changing `.env`\n- Verify no extra spaces in variable names\n\n### Vite Build Errors\n- Check that all files exist in `client/src/components/ui/`\n- Verify `client/vite.config.ts` and `client/tailwind.config.js` exist\n\n## Development Workflow\n\n1. **Start backend first** (provides API)\n2. **Start frontend** (connects to backend)\n3. **Make changes** to either codebase\n4. **Frontend auto-reloads** on file changes\n5. **Backend restarts** automatically with tsx\n\n## File Structure\n\n```\nProject/\n‚îú‚îÄ‚îÄ client/               # Frontend React app\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ vite.config.ts   # Frontend dev config\n‚îÇ   ‚îî‚îÄ‚îÄ tailwind.config.js\n‚îú‚îÄ‚îÄ server/               # Backend Express API\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts         # Main server file\n‚îú‚îÄ‚îÄ .env                 # Environment variables\n‚îî‚îÄ‚îÄ package.json         # Dependencies\n```\n\n## Testing Your Setup\n\n1. **Backend Test**: Open http://localhost:5000 (should show API status)\n2. **Frontend Test**: Open http://localhost:3000 (should show login page)\n3. **Full Test**: Create account and upload a business card\n\n## Production Build\n\n```cmd\n# Build frontend\ncd client\nnpx vite build\n\n# Build backend\nnpx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n\n# Run production\nset NODE_ENV=production && node dist/index.js\n```\n\nThe application is now ready for local development with separate frontend and backend servers!","size_bytes":4262},"README.md":{"content":"# WhatsApp Business Digital Visiting Card Manager\n\nA comprehensive React application for managing WhatsApp Business digital visiting cards with Firebase backend, OCR processing, and vCard/QR generation.\n\n## Features\n\n### üîê Authentication\n- Firebase Authentication with email/password\n- Protected routing with automatic redirects\n- User profile management\n\n### üìá Contact Management\n- Full CRUD operations for contacts\n- Grid and table view modes\n- Advanced search and filtering\n- Group organization\n- Duplicate contact detection\n\n### üè∑Ô∏è Group Management\n- Create and manage contact groups\n- Assign contacts to multiple groups\n- Visual group indicators\n\n### üìù Template Management\n- Create reusable message templates\n- WhatsApp Business integration ready\n- Template selection for bulk messaging\n\n### üì§ Bulk Upload & OCR\n- Upload up to 10 business card images\n- Gemini 1.5 Flash LLM integration for enhanced data extraction\n- Automatic structured data extraction and parsing\n- Batch contact creation\n\n### üì∏ Single Card Scanning\n- Individual business card processing\n- AI-powered OCR with structured data extraction\n- Edit extracted data before saving\n- Direct contact creation\n\n### üí≥ Digital Card Builder\n- Interactive card designer\n- Live preview updates\n- Avatar image upload\n- vCard generation\n- QR code creation\n- Public sharing links\n\n### ‚öôÔ∏è Settings Management\n- User profile configuration\n- WhatsApp Business API settings\n- Timezone and language preferences\n\n### üîó Public Sharing\n- Public digital card pages\n- vCard download functionality\n- Mobile-optimized design\n\n## Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for build tooling\n- **Tailwind CSS** for styling\n- **React Router (wouter)** for navigation\n- **React Context API** for state management\n- **shadcn/ui** component library\n\n### Backend & Services\n- **Firebase Authentication** for user management\n- **Firebase Firestore** for data persistence\n- **Firebase Storage** for file uploads\n- **Gemini 1.5 Flash LLM** for AI-powered OCR and data extraction\n\n### Additional Libraries\n- **qrcode** for QR code generation\n- **React Hook Form** for form handling\n- **TanStack Query** for data fetching\n- **Lucide React** for icons\n\n## Setup Instructions\n\n### Prerequisites\n- Node.js 18+ \n- Firebase project\n- Google Gemini API key\n\n### Firebase Configuration\n\n1. Go to the [Firebase Console](https://console.firebase.google.com/)\n2. Create a new Firebase project\n3. Enable Authentication with Email/Password provider\n4. Create a Firestore database\n5. Enable Firebase Storage\n6. Get your Firebase configuration values\n\n### Environment Variables\n\nCreate a `.env` file in the root directory:\n\n```env\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com\nVITE_FIREBASE_PROJECT_ID=your_project_id\nVITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com\nVITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nVITE_FIREBASE_APP_ID=your_app_id\n\nVITE_GEMINI_API_KEY=your_gemini_api_key\nVITE_APP_PUBLIC_BASE_URL=https://your-domain.com\n","size_bytes":3068},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive WhatsApp Business Digital Visiting Card Manager built with React and Firebase. The application allows users to manage contacts, create digital business cards, and process business card images using OCR technology. It provides a full-featured contact management system with group organization, template management, bulk uploads, and digital card generation capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nPlatform: Windows 11 with VS Code IDE for local development.\nSetup: Prefers running frontend and backend servers separately for better development control.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with Tailwind CSS styling following the shadcn/ui design system\n- **State Management**: React Context API for authentication state, TanStack Query for server state management\n- **Forms**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Database**: Firebase Firestore for real-time document-based data storage\n- **Authentication**: Firebase Authentication with email/password\n- **File Storage**: Firebase Cloud Storage for images and avatars\n- **Server**: Express.js server with Drizzle ORM (configured for PostgreSQL as fallback)\n- **API Integration**: Google Cloud Vision API for OCR processing\n\n## Data Storage Solutions\n- **Primary Database**: Firebase Firestore with collections for users, contacts, groups, templates, and digital cards\n- **File Storage**: Firebase Cloud Storage for business card images, avatars, and generated QR codes\n- **Session Management**: Firebase Authentication handles user sessions and tokens\n- **Backup Schema**: Drizzle ORM with PostgreSQL support (Neon Database) as a secondary option\n\n## Authentication and Authorization\n- **Provider**: Firebase Authentication\n- **Methods**: Email/password authentication\n- **Protection**: Route-based authentication with private route wrapper\n- **User Management**: User profiles stored in Firestore with additional metadata\n\n## External Service Integrations\n- **Google Cloud Vision API**: OCR text extraction from business card images\n- **QR Code Generation**: Client-side QR code creation for vCard sharing\n- **vCard Standard**: Contact information export in industry-standard vCard format\n- **WhatsApp Business**: Template system designed for WhatsApp Business API integration\n\n## Key Architectural Decisions\n\n### Firebase-First Approach\n- **Problem**: Need for real-time data sync and scalable authentication\n- **Solution**: Firebase ecosystem provides authentication, database, and storage in one platform\n- **Benefits**: Real-time updates, automatic scaling, built-in security rules\n- **Trade-offs**: Vendor lock-in, limited complex querying capabilities\n\n### OCR Integration Pattern\n- **Problem**: Extract structured data from business card images\n- **Solution**: Google Cloud Vision API with custom parsing logic\n- **Implementation**: Upload to storage ‚Üí OCR processing ‚Üí structured data extraction ‚Üí user review\n- **Benefits**: High accuracy text extraction, handles multiple languages\n\n### Component Architecture\n- **Problem**: Maintain consistent UI across complex application\n- **Solution**: shadcn/ui component system with Radix UI primitives\n- **Benefits**: Accessible components, consistent design, TypeScript support\n- **Structure**: Atomic design with reusable UI components\n\n### Bulk Processing Strategy\n- **Problem**: Handle multiple business card uploads efficiently\n- **Solution**: Sequential processing with progress tracking and error handling\n- **Implementation**: File upload ‚Üí OCR ‚Üí parsing ‚Üí duplicate detection ‚Üí batch save\n- **Benefits**: User feedback, error recovery, duplicate prevention","size_bytes":3881},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"client/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./index.html\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(214.3 31.8% 91.4%)\",\n        input: \"hsl(214.3 31.8% 91.4%)\",\n        ring: \"hsl(221.2 83.2% 53.3%)\",\n        background: \"hsl(0 0% 100%)\",\n        foreground: \"hsl(222.2 84% 4.9%)\",\n        primary: {\n          DEFAULT: \"hsl(221.2 83.2% 53.3%)\",\n          foreground: \"hsl(210 40% 98%)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(210 40% 96%)\",\n          foreground: \"hsl(222.2 84% 4.9%)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(0 84.2% 60.2%)\",\n          foreground: \"hsl(210 40% 98%)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(210 40% 96%)\",\n          foreground: \"hsl(215.4 16.3% 46.9%)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(210 40% 96%)\",\n          foreground: \"hsl(222.2 84% 4.9%)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(0 0% 100%)\",\n          foreground: \"hsl(222.2 84% 4.9%)\",\n        },\n        card: {\n          DEFAULT: \"hsl(0 0% 100%)\",\n          foreground: \"hsl(222.2 84% 4.9%)\",\n        },\n      },\n      borderRadius: {\n        lg: \"0.5rem\",\n        md: \"calc(0.5rem - 2px)\",\n        sm: \"calc(0.5rem - 4px)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};","size_bytes":1368},"client/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\"),\n      \"@shared\": path.resolve(__dirname, \"../shared\"),\n      \"@assets\": path.resolve(__dirname, \"../attached_assets\"),\n    },\n  },\n  server: {\n    port: 3000,\n    host: '0.0.0.0',\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n});","size_bytes":551},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Middleware for logging API requests\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite only in development\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Pick port from env or fallback to 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  // Cross-platform server.listen (Windows doesn‚Äôt support reusePort + 0.0.0.0)\n  if (process.platform === \"win32\") {\n    server.listen(port, \"localhost\", () => {\n      log(`Serving on http://localhost:${port}`);\n    });\n  } else {\n    server.listen(\n      {\n        port,\n        host: \"0.0.0.0\",\n        reusePort: true,\n      },\n      () => {\n        log(`Serving on http://0.0.0.0:${port}`);\n      }\n    );\n  }\n})();\n","size_bytes":2091},"server/razorpay.ts":{"content":"import crypto from 'crypto';\n\n// Razorpay configuration\nexport const RAZORPAY_KEY_ID = process.env.RAZORPAY_KEY_ID;\nexport const RAZORPAY_KEY_SECRET = process.env.RAZORPAY_KEY_SECRET;\n\n/**\n * Verify Razorpay payment signature\n */\nexport function verifyRazorpaySignature(\n  orderId: string,\n  paymentId: string,\n  signature: string\n): boolean {\n  if (!RAZORPAY_KEY_SECRET) {\n    throw new Error('Razorpay key secret not configured');\n  }\n\n  const body = orderId + '|' + paymentId;\n  const expectedSignature = crypto\n    .createHmac('sha256', RAZORPAY_KEY_SECRET)\n    .update(body)\n    .digest('hex');\n\n  return expectedSignature === signature;\n}\n\n/**\n * Create Razorpay order data\n */\nexport function createRazorpayOrder(planId: string, amount: number) {\n  return {\n    amount: amount * 100, // Convert to paise\n    currency: 'INR',\n    receipt: `receipt_${planId}_${Date.now()}`,\n    notes: {\n      planId: planId\n    }\n  };\n}","size_bytes":926},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { createRazorpayOrder, verifyRazorpaySignature } from \"./razorpay\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Razorpay order creation endpoint\n  app.post('/api/create-razorpay-order', async (req, res) => {\n    try {\n      const { planId, amount, userId } = req.body;\n      \n      if (!planId || !amount || !userId) {\n        return res.status(400).json({ error: 'Missing required fields' });\n      }\n\n      const orderData = createRazorpayOrder(planId, amount);\n      \n      // You would typically create this order with Razorpay SDK here\n      // For now, we'll create a mock order ID\n      const orderId = `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      res.json({\n        orderId,\n        amount: orderData.amount,\n        currency: orderData.currency,\n        receipt: orderData.receipt\n      });\n    } catch (error: any) {\n      console.error('Error creating Razorpay order:', error);\n      res.status(500).json({ error: 'Failed to create payment order' });\n    }\n  });\n\n  // Razorpay payment verification endpoint\n  app.post('/api/verify-razorpay-payment', async (req, res) => {\n    try {\n      const {\n        razorpay_order_id,\n        razorpay_payment_id,\n        razorpay_signature,\n        userId,\n        planId\n      } = req.body;\n\n      if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n        return res.status(400).json({ error: 'Missing payment verification data' });\n      }\n\n      const isValidSignature = verifyRazorpaySignature(\n        razorpay_order_id,\n        razorpay_payment_id,\n        razorpay_signature\n      );\n\n      if (!isValidSignature) {\n        return res.status(400).json({ error: 'Invalid payment signature' });\n      }\n\n      // Payment is verified - you can update your database here\n      console.log(`Payment verified for user ${userId}, plan ${planId}`);\n      \n      res.json({\n        success: true,\n        message: 'Payment verified successfully'\n      });\n    } catch (error: any) {\n      console.error('Error verifying payment:', error);\n      res.status(500).json({ error: 'Payment verification failed' });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":2502},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport PrivateRoute from \"@/routes/PrivateRoute\";\nimport Layout from \"@/components/Layout\";\n\n// Auth Pages\nimport Login from \"@/pages/Auth/Login\";\nimport Register from \"@/pages/Auth/Register\";\n\n// Private Pages\nimport Dashboard from \"@/pages/Dashboard/Dashboard\";\nimport Contacts from \"@/pages/Contacts/Contacts\";\nimport Groups from \"@/pages/Groups/Groups\";\nimport Templates from \"@/pages/Templates/Templates\";\nimport EnhancedBulkUploads from \"@/pages/BulkUploads/EnhancedBulkUploads\";\nimport DigitalCard from \"@/pages/DigitalCard/DigitalCard\";\nimport Settings from \"@/pages/Settings/Settings\";\nimport NFCCard from \"@/pages/NFCCard/NFCCard\";\nimport Pricing from \"@/pages/Pricing/Pricing\";\n\n// Public Pages\nimport PublicShare from \"@/pages/PublicShare/PublicShare\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public Routes */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/share/:publicId\" component={PublicShare} />\n\n      {/* Private Routes */}\n      <Route path=\"/\">\n        <PrivateRoute>\n          <Layout>\n            <Dashboard />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/contacts\">\n        <PrivateRoute>\n          <Layout>\n            <Contacts />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/groups\">\n        <PrivateRoute>\n          <Layout>\n            <Groups />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/templates\">\n        <PrivateRoute>\n          <Layout>\n            <Templates />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/bulk-uploads\">\n        <PrivateRoute>\n          <Layout>\n            <EnhancedBulkUploads />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/digital-card\">\n        <PrivateRoute>\n          <Layout>\n            <DigitalCard />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/settings\">\n        <PrivateRoute>\n          <Layout>\n            <Settings />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/nfc-card\">\n        <PrivateRoute>\n          <Layout>\n            <NFCCard />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      <Route path=\"/pricing\">\n        <PrivateRoute>\n          <Layout>\n            <Pricing />\n          </Layout>\n        </PrivateRoute>\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3181},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(214 100% 59%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(214 100% 59%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(214 100% 59%);\n  --chart-1: hsl(214 100% 59%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(214 100% 59%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(214 100% 59%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(214 100% 59%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(214 100% 59%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(214 100% 59%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(214 100% 59%);\n  --chart-1: hsl(214 100% 59%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(214 100% 59%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(214 100% 59%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(214 100% 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":2981},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CameraCapture.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Camera, X, RotateCcw, Check, AlertCircle } from 'lucide-react';\n\ninterface CameraCaptureProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCapture: (file: File) => void;\n  maxImages?: number;\n}\n\nexport default function CameraCapture({ \n  isOpen, \n  onClose, \n  onCapture, \n  maxImages = 10 \n}: CameraCaptureProps) {\n  const webcamRef = useRef<Webcam>(null);\n  const [capturedImages, setCapturedImages] = useState<string[]>([]);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment');\n\n  const videoConstraints = {\n    width: { ideal: 1280 },\n    height: { ideal: 720 },\n    facingMode: facingMode\n  };\n\n  const capture = useCallback(() => {\n    if (!webcamRef.current) return;\n    \n    setIsCapturing(true);\n    \n    try {\n      const imageSrc = webcamRef.current.getScreenshot();\n      if (imageSrc && capturedImages.length < maxImages) {\n        setCapturedImages(prev => [...prev, imageSrc]);\n      }\n    } catch (error) {\n      console.error('Error capturing image:', error);\n    } finally {\n      setIsCapturing(false);\n    }\n  }, [capturedImages.length, maxImages]);\n\n  const removeImage = (index: number) => {\n    setCapturedImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const switchCamera = () => {\n    setFacingMode(prev => prev === 'user' ? 'environment' : 'user');\n  };\n\n  const convertToFile = (dataUrl: string, index: number): File => {\n    const byteString = atob(dataUrl.split(',')[1]);\n    const mimeString = dataUrl.split(',')[0].split(':')[1].split(';')[0];\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    \n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    \n    return new File([ab], `business-card-${index + 1}.jpg`, { type: mimeString });\n  };\n\n  const handleDone = () => {\n    capturedImages.forEach((imageData, index) => {\n      const file = convertToFile(imageData, index);\n      onCapture(file);\n    });\n    \n    setCapturedImages([]);\n    onClose();\n  };\n\n  const handleClose = () => {\n    setCapturedImages([]);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Camera className=\"h-5 w-5\" />\n            <span>Capture Business Cards</span>\n            <span className=\"text-sm text-gray-500\">\n              ({capturedImages.length}/{maxImages})\n            </span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Camera View */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"relative bg-black rounded-lg overflow-hidden\">\n                <Webcam\n                  ref={webcamRef}\n                  audio={false}\n                  screenshotFormat=\"image/jpeg\"\n                  videoConstraints={videoConstraints}\n                  className=\"w-full h-64 sm:h-80 object-cover\"\n                />\n                \n                {/* Camera Controls Overlay */}\n                <div className=\"absolute bottom-4 left-0 right-0 flex justify-center space-x-4\">\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={switchCamera}\n                    className=\"bg-white/20 backdrop-blur-sm hover:bg-white/30\"\n                  >\n                    <RotateCcw className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <Button\n                    onClick={capture}\n                    disabled={isCapturing || capturedImages.length >= maxImages}\n                    className=\"bg-white text-black hover:bg-gray-100 px-8\"\n                    size=\"lg\"\n                  >\n                    <Camera className=\"h-5 w-5 mr-2\" />\n                    {isCapturing ? 'Capturing...' : 'Capture'}\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Instructions */}\n              <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                <div className=\"flex items-start space-x-2\">\n                  <AlertCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div className=\"text-sm text-blue-800\">\n                    <p className=\"font-medium mb-1\">Tips for best results:</p>\n                    <ul className=\"space-y-1 text-xs\">\n                      <li>‚Ä¢ Ensure good lighting and avoid shadows</li>\n                      <li>‚Ä¢ Hold the camera steady and capture the entire card</li>\n                      <li>‚Ä¢ Make sure text is clearly visible and not blurry</li>\n                      <li>‚Ä¢ You can capture up to {maxImages} cards</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Captured Images */}\n          {capturedImages.length > 0 && (\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-medium mb-3\">Captured Images ({capturedImages.length})</h3>\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n                  {capturedImages.map((imageSrc, index) => (\n                    <div key={index} className=\"relative group\">\n                      <img\n                        src={imageSrc}\n                        alt={`Captured business card ${index + 1}`}\n                        className=\"w-full h-24 object-cover rounded-lg border-2 border-gray-200\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => removeImage(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                      <div className=\"absolute bottom-1 left-1 bg-black/50 text-white text-xs px-1 rounded\">\n                        {index + 1}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between space-x-4\">\n            <Button variant=\"outline\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleDone}\n              disabled={capturedImages.length === 0}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Check className=\"h-4 w-4 mr-2\" />\n              Process {capturedImages.length} Image{capturedImages.length !== 1 ? 's' : ''}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7325},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport Sidebar from \"./Sidebar\";\nimport TopNavbar from \"./TopNavbar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden lg:ml-0\">\n        <TopNavbar />\n        <main className=\"flex-1 relative overflow-y-auto focus:outline-none pt-16 lg:pt-0\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":584},"client/src/components/PricingSection.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { doc, updateDoc, getDoc } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, Zap, Crown, Loader2 } from \"lucide-react\";\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  price: number;\n  period: string;\n  description: string;\n  features: string[];\n  popular?: boolean;\n  razorpayPlanId: string;\n}\n\nconst pricingPlans: PricingPlan[] = [\n  {\n    id: \"basic\",\n    name: \"Basic Plan\",\n    price: 999,\n    period: \"year\",\n    description: \"Perfect for small businesses and individual professionals\",\n    features: [\n      \"Unlimited business card scanning\",\n      \"AI-powered data extraction\",\n      \"Up to 1,000 contacts storage\",\n      \"Basic group management\",\n      \"WhatsApp integration\",\n      \"Email support\"\n    ],\n    razorpayPlanId: \"plan_basic_yearly\"\n  },\n  {\n    id: \"premium\",\n    name: \"Premium Plan\",\n    price: 1999,\n    period: \"year\",\n    description: \"Advanced features for growing businesses\",\n    features: [\n      \"Everything in Basic Plan\",\n      \"Unlimited contacts storage\",\n      \"Advanced group management\",\n      \"Digital business card creation\",\n      \"QR code generation\",\n      \"Bulk upload processing\",\n      \"Template management\",\n      \"Priority support\"\n    ],\n    popular: true,\n    razorpayPlanId: \"plan_premium_yearly\"\n  }\n];\n\nexport default function PricingSection() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState<string | null>(null);\n  const [userSubscription, setUserSubscription] = useState<any>(null);\n\n  // Load user subscription status\n  const checkSubscriptionStatus = async () => {\n    if (!user) return;\n    \n    try {\n      const userDoc = await getDoc(doc(db, \"users\", user.uid));\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        setUserSubscription(userData.subscription);\n      }\n    } catch (error) {\n      console.error(\"Error checking subscription:\", error);\n    }\n  };\n\n  // Initialize Razorpay and handle payment\n  const handlePayment = async (plan: PricingPlan) => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to subscribe to a plan\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(plan.id);\n\n    try {\n      // Load Razorpay script if not already loaded\n      if (!window.Razorpay) {\n        const script = document.createElement('script');\n        script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n        script.async = true;\n        document.body.appendChild(script);\n        \n        await new Promise((resolve, reject) => {\n          script.onload = resolve;\n          script.onerror = reject;\n        });\n      }\n\n      // Create order on backend (you'll need to implement this API endpoint)\n      const orderResponse = await fetch('/api/create-razorpay-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          planId: plan.id,\n          amount: plan.price,\n          userId: user.uid\n        })\n      });\n\n      if (!orderResponse.ok) {\n        throw new Error('Failed to create payment order');\n      }\n\n      const orderData = await orderResponse.json();\n\n      // Razorpay options\n      const options = {\n        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Your Razorpay key ID\n        amount: plan.price * 100, // Amount in paise\n        currency: 'INR',\n        name: 'WhatsApp Business Card Manager',\n        description: `${plan.name} - Yearly Subscription`,\n        order_id: orderData.orderId,\n        handler: async (response: any) => {\n          try {\n            // Verify payment on backend\n            const verifyResponse = await fetch('/api/verify-razorpay-payment', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                razorpay_order_id: response.razorpay_order_id,\n                razorpay_payment_id: response.razorpay_payment_id,\n                razorpay_signature: response.razorpay_signature,\n                userId: user.uid,\n                planId: plan.id\n              })\n            });\n\n            if (verifyResponse.ok) {\n              // Update user subscription in Firebase\n              const expiryDate = new Date();\n              expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n              await updateDoc(doc(db, \"users\", user.uid), {\n                subscription: {\n                  planId: plan.id,\n                  planName: plan.name,\n                  status: 'active',\n                  startDate: new Date(),\n                  expiryDate: expiryDate,\n                  paymentId: response.razorpay_payment_id,\n                  orderId: response.razorpay_order_id\n                },\n                features: {\n                  unlimitedScanning: true,\n                  contactStorage: plan.id === 'premium' ? 'unlimited' : '1000',\n                  groupManagement: true,\n                  digitalCards: plan.id === 'premium',\n                  bulkUpload: plan.id === 'premium',\n                  templateManagement: plan.id === 'premium'\n                }\n              });\n\n              toast({\n                title: \"Payment Successful!\",\n                description: `You've successfully subscribed to ${plan.name}. All features are now unlocked!`,\n              });\n\n              // Refresh subscription status\n              checkSubscriptionStatus();\n            } else {\n              throw new Error('Payment verification failed');\n            }\n          } catch (error) {\n            console.error('Payment verification error:', error);\n            toast({\n              title: \"Payment Verification Failed\",\n              description: \"Please contact support with your payment ID\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        prefill: {\n          name: user.displayName || user.email,\n          email: user.email,\n        },\n        theme: {\n          color: '#3B82F6'\n        },\n        modal: {\n          ondismiss: () => {\n            setLoading(null);\n          }\n        }\n      };\n\n      const razorpay = new window.Razorpay(options);\n      razorpay.open();\n\n    } catch (error: any) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"Failed to initiate payment. Please try again.\",\n        variant: \"destructive\",\n      });\n      setLoading(null);\n    }\n  };\n\n  // Check if user has active subscription\n  const hasActiveSubscription = userSubscription && \n    userSubscription.status === 'active' && \n    new Date() < new Date(userSubscription.expiryDate?.toDate?.() || userSubscription.expiryDate);\n\n  return (\n    <div className=\"py-12 bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 sm:text-4xl\">\n            Choose Your Plan\n          </h2>\n          <p className=\"mt-4 text-lg text-gray-600\">\n            Unlock powerful AI-driven business card management features\n          </p>\n        </div>\n\n        {hasActiveSubscription && (\n          <div className=\"mt-8 p-4 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center\">\n              <Check className=\"h-5 w-5 text-green-600 mr-2\" />\n              <div>\n                <p className=\"text-green-800 font-medium\">\n                  You have an active {userSubscription.planName} subscription\n                </p>\n                <p className=\"text-green-600 text-sm\">\n                  Expires on: {new Date(userSubscription.expiryDate?.toDate?.() || userSubscription.expiryDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-2 max-w-4xl mx-auto\">\n          {pricingPlans.map((plan) => (\n            <Card key={plan.id} className={`relative ${plan.popular ? 'border-blue-500 shadow-lg' : ''}`}>\n              {plan.popular && (\n                <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-blue-500 text-white\">\n                    <Crown className=\"h-3 w-3 mr-1\" />\n                    Most Popular\n                  </Badge>\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">\n                  {plan.name}\n                  {plan.popular && <Zap className=\"inline h-5 w-5 ml-2 text-yellow-500\" />}\n                </CardTitle>\n                <CardDescription>{plan.description}</CardDescription>\n                <div className=\"mt-4\">\n                  <span className=\"text-4xl font-bold text-gray-900\">‚Çπ{plan.price.toLocaleString()}</span>\n                  <span className=\"text-lg text-gray-600\">/{plan.period}</span>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <ul className=\"space-y-3 mb-8\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <Check className=\"h-5 w-5 text-green-500 mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-700\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button\n                  className={`w-full ${plan.popular ? 'bg-blue-600 hover:bg-blue-700' : ''}`}\n                  onClick={() => handlePayment(plan)}\n                  disabled={loading === plan.id || hasActiveSubscription}\n                  variant={plan.popular ? 'default' : 'outline'}\n                >\n                  {loading === plan.id ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Processing...\n                    </>\n                  ) : hasActiveSubscription ? (\n                    userSubscription.planId === plan.id ? 'Current Plan' : 'Upgrade'\n                  ) : (\n                    `Subscribe to ${plan.name}`\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Why Choose Our Business Card Manager?\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-6\">\n              <div className=\"text-center\">\n                <div className=\"bg-blue-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <Zap className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900\">AI-Powered OCR</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Advanced AI extracts data from multiple business cards in one image\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-green-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <Check className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900\">QR Code Support</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Automatically detects and extracts contact info from QR codes\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-purple-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <Crown className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <h4 className=\"font-medium text-gray-900\">WhatsApp Integration</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Seamlessly connect with WhatsApp Business for customer outreach\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12794},"client/src/components/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  ChartLine,\n  Users,\n  Layers,\n  FileText,\n  DollarSign,\n  CreditCard,\n  Smartphone,\n  LogOut,\n  Zap,\n  Sparkles,\n  Menu\n} from \"lucide-react\";\n\nconst navigation = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: ChartLine,\n    description: \"Overview & Analytics\"\n  },\n  {\n    name: \"Contacts\",\n    href: \"/contacts\",\n    icon: Users,\n    description: \"Manage your contacts\"\n  },\n  {\n    name: \"Groups\",\n    href: \"/groups\",\n    icon: Layers,\n    description: \"Organize contacts\"\n  },\n  {\n    name: \"Templates\",\n    href: \"/templates\",\n    icon: FileText,\n    description: \"Message templates\"\n  },\n  {\n    name: \"AI Card Scanner\",\n    href: \"/bulk-uploads\",\n    icon: Sparkles,\n    description: \"Bulk AI extraction\",\n    isNew: true\n  },\n  {\n    name: \"Digital Card\",\n    href: \"/digital-card\",\n    icon: CreditCard,\n    description: \"Your digital profile\"\n  },\n  {\n    name: \"NFC Card\",\n    href: \"/nfc-card\",\n    icon: Smartphone,\n    description: \"Tap to share contacts\",\n    isComingSoon: true\n  },\n  {\n    name: \"Pricing\",\n    href: \"/pricing\",\n    icon: DollarSign,\n    description: \"Subscription plans\"\n  }\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { logout } = useAuth();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <div className=\"lg:hidden fixed top-4 left-4 z-50\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsMobileOpen(!isMobileOpen)}\n          className=\"bg-white/90 backdrop-blur-sm shadow-lg border-gray-200\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n      </div>\n\n      {/* Mobile overlay */}\n      {isMobileOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black/50 lg:hidden\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        className={`\n          fixed inset-y-0 left-0 z-50\n          w-72 h-screen\n          transform transition-transform duration-300 ease-in-out\n          bg-white shadow-2xl border-r border-gray-200\n          ${isMobileOpen ? \"translate-x-0\" : \"-translate-x-full\"}\n          lg:static lg:translate-x-0\n        `}\n      >\n        <div className=\"flex flex-col h-full pt-5 pb-4 overflow-y-auto\">\n          {/* Logo */}\n          <div className=\"flex items-center flex-shrink-0 px-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n                <Zap className=\"text-white h-5 w-5\" />\n              </div>\n              <div className=\"ml-3\">\n                <h1 className=\"text-xl font-bold text-gray-900\">Smarticard</h1>\n                <p className=\"text-xs text-gray-500\">AI-Powered Business Cards</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"mt-8 flex-1 px-4 space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <div\n                    className={`\n                      group flex items-center px-4 py-3 text-sm font-medium rounded-xl cursor-pointer transition-all duration-200\n                      ${isActive\n                        ? \"bg-gray-100 text-blue-600\"\n                        : \"text-gray-700 hover:bg-gray-50 hover:text-gray-900\"}\n                    `}\n                    onClick={() => setIsMobileOpen(false)}\n                  >\n                    <item.icon\n                      className={`\n                        mr-3 h-5 w-5 transition-all duration-200\n                        ${isActive ? \"text-blue-600\" : \"text-gray-500 group-hover:text-gray-700\"}\n                      `}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <span>{item.name}</span>\n                        {item.isNew && (\n                          <Badge className=\"ml-2 bg-green-500 text-white text-xs px-2 py-0.5\">\n                            NEW\n                          </Badge>\n                        )}\n                        {item.isComingSoon && (\n                          <Badge className=\"ml-2 bg-amber-500 text-white text-xs px-2 py-0.5\">\n                            SOON\n                          </Badge>\n                        )}\n                      </div>\n                      <p\n                        className={`text-xs mt-0.5 ${\n                          isActive ? \"text-blue-500\" : \"text-gray-400\"\n                        }`}\n                      >\n                        {item.description}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n\n            {/* Divider */}\n            <div className=\"border-t border-gray-200 my-6\"></div>\n\n            {/* Logout */}\n            <Button\n              variant=\"ghost\"\n              onClick={logout}\n              className=\"w-full justify-start text-red-600 hover:bg-red-50 hover:text-red-700 mt-6 rounded-xl px-4 py-3\"\n            >\n              <LogOut className=\"text-red-600 mr-3 h-5 w-5\" />\n              <div className=\"text-left\">\n                <div>Logout</div>\n                <div className=\"text-xs text-red-500\">Sign out safely</div>\n              </div>\n            </Button>\n          </nav>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":5846},"client/src/components/TopNavbar.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ChevronDown, Zap } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function TopNavbar() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-white/80 backdrop-blur-md shadow-lg border-b border-gray-200/50 lg:ml-0 ml-0\">\n      <div className=\"flex-1 px-6 flex justify-between\">\n        <div className=\"flex-1 flex items-center\">\n          {/* AI Status Indicator with wave animation */}\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, ease: \"easeOut\" }}\n            className=\"hidden md:flex items-center mr-6\"\n          >\n            <div className=\"relative flex items-center space-x-2 px-3 py-2 rounded-lg border border-green-200 shadow-sm overflow-hidden animated-gradient\">\n              <motion.div\n                animate={{ scale: [1, 1.2, 1] }}\n                transition={{ repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }}\n                className=\"w-2 h-2 bg-green-400 rounded-full\"\n              />\n              <span className=\"text-sm font-medium text-green-700\">AI Ready</span>\n              <Zap className=\"h-4 w-4 text-green-600 animate-bounce\" />\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Profile dropdown */}\n        <motion.div\n          whileHover={{ scale: 1.05 }}\n          className=\"ml-6 flex items-center space-x-4\"\n        >\n          <div className=\"relative\">\n            <div className=\"flex items-center cursor-pointer group\">\n              <Avatar className=\"h-9 w-9 ring-2 ring-gray-200 group-hover:ring-blue-300 transition-all duration-200\">\n                <AvatarImage src={user?.photoURL || \"\"} />\n                <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\n                  {user?.displayName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n              <motion.div\n                initial={{ opacity: 0, x: 10 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.4 }}\n                className=\"ml-3 hidden md:block\"\n              >\n                <div className=\"text-sm font-semibold text-gray-800\">\n                  {user?.displayName || \"User\"}\n                </div>\n                <div className=\"text-xs text-gray-500\">{user?.email}</div>\n              </motion.div>\n              <ChevronDown className=\"ml-2 text-gray-400 h-4 w-4 group-hover:text-gray-600 transition-colors duration-200\" />\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* üî• Gradient wave animation CSS */}\n      <style jsx>{`\n        .animated-gradient {\n          background: linear-gradient(270deg, #d1fae5, #e0f2fe, #d1fae5);\n          background-size: 400% 400%;\n          animation: waveMove 6s ease infinite;\n        }\n\n        @keyframes waveMove {\n          0% {\n            background-position: 0% 50%;\n          }\n          50% {\n            background-position: 100% 50%;\n          }\n          100% {\n            background-position: 0% 50%;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":3373},"client/src/components/UsageLimitModal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Lock, CreditCard, Users, Layers, Camera, Sparkles } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface UsageLimitModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  feature: 'contact' | 'group' | 'digitalCard' | 'aiScan';\n  currentCount: number;\n  limit: number;\n}\n\nexport default function UsageLimitModal({ \n  isOpen, \n  onClose, \n  feature, \n  currentCount, \n  limit \n}: UsageLimitModalProps) {\n  const [, setLocation] = useLocation();\n\n  const featureConfig = {\n    contact: {\n      icon: Users,\n      title: \"Contact Limit Reached\",\n      description: \"You've reached the limit of 1 contact for free users.\",\n      color: \"text-blue-600\"\n    },\n    group: {\n      icon: Layers,\n      title: \"Group Limit Reached\", \n      description: \"You've reached the limit of 1 group for free users.\",\n      color: \"text-green-600\"\n    },\n    digitalCard: {\n      icon: CreditCard,\n      title: \"Digital Card Limit Reached\",\n      description: \"You've reached the maximum limit of digital cards.\",\n      color: \"text-purple-600\"\n    },\n    aiScan: {\n      icon: Camera,\n      title: \"AI Scan Limit Reached\",\n      description: \"You've reached the limit of 1 AI scan for free users.\",\n      color: \"text-orange-600\"\n    }\n  };\n\n  const config = featureConfig[feature];\n  const IconComponent = config.icon;\n\n  const handleUpgrade = () => {\n    onClose();\n    setLocation(\"/pricing\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg bg-gray-100 ${config.color}`}>\n              <IconComponent className=\"h-6 w-6\" />\n            </div>\n            <span>{config.title}</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"py-4\">\n          <div className=\"text-center mb-6\">\n            <Lock className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 mb-4\">\n              {config.description}\n            </p>\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-700\">Current Usage:</span>\n                <Badge variant=\"outline\" className=\"text-sm\">\n                  {currentCount} / {limit === Infinity ? '‚àû' : limit}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <Sparkles className=\"h-5 w-5 text-blue-600\" />\n                <h3 className=\"font-semibold text-blue-900\">Upgrade Benefits</h3>\n              </div>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>‚Ä¢ Unlimited contacts and groups</li>\n                <li>‚Ä¢ Unlimited AI business card scanning</li>\n                <li>‚Ä¢ Advanced features and templates</li>\n                <li>‚Ä¢ Priority support</li>\n              </ul>\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <Button \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleUpgrade}\n                className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600\"\n              >\n                <CreditCard className=\"h-4 w-4 mr-2\" />\n                Upgrade Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4023},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport {\n  User,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  updateProfile,\n} from \"firebase/auth\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { auth, db } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, displayName: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      toast({\n        title: \"Success\",\n        description: \"Successfully logged in\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const register = async (email: string, password: string, displayName: string) => {\n    try {\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Update user profile\n      await updateProfile(user, { displayName });\n      \n      // Create user document in Firestore\n      await setDoc(doc(db, \"users\", user.uid), {\n        email: user.email,\n        displayName,\n        createdAt: new Date(),\n        ownerId: user.uid,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      toast({\n        title: \"Success\",\n        description: \"Successfully logged out\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","size_bytes":2934},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useUsageLimits.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { collection, query, where, getCountFromServer, doc, getDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\ninterface UsageLimits {\n  contacts: number;\n  groups: number;\n  digitalCards: number;\n  aiScans: number;\n}\n\ninterface UserUsage {\n  contactsCount: number;\n  groupsCount: number;\n  digitalCardsCount: number;\n  aiScansCount: number;\n}\n\ninterface UsageLimitsHook {\n  usage: UserUsage;\n  limits: UsageLimits;\n  hasActiveSubscription: boolean;\n  canAddContact: boolean;\n  canAddGroup: boolean;\n  canAddDigitalCard: boolean;\n  canUseAIScan: boolean;\n  loading: boolean;\n  refreshUsage: () => Promise<void>;\n}\n\nexport function useUsageLimits(): UsageLimitsHook {\n  const { user } = useAuth();\n  const [usage, setUsage] = useState<UserUsage>({\n    contactsCount: 0,\n    groupsCount: 0,\n    digitalCardsCount: 0,\n    aiScansCount: 0,\n  });\n  const [hasActiveSubscription, setHasActiveSubscription] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Define limits for free users\n  const freeLimits: UsageLimits = {\n    contacts: 1,\n    groups: 1,\n    digitalCards: 1,\n    aiScans: 1,\n  };\n\n  // Unlimited for paid users\n  const paidLimits: UsageLimits = {\n    contacts: Infinity,\n    groups: Infinity,\n    digitalCards: 5, // Still limited to 5 even for paid users\n    aiScans: Infinity,\n  };\n\n  const limits = hasActiveSubscription ? paidLimits : freeLimits;\n\n  const refreshUsage = async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n\n      // Check subscription status\n      const userDoc = await getDoc(doc(db, \"users\", user.uid));\n      let isActive = false;\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        const subscription = userData.subscription;\n        isActive = subscription && \n          subscription.status === 'active' && \n          new Date() < new Date(subscription.expiryDate?.toDate?.() || subscription.expiryDate);\n      }\n      setHasActiveSubscription(isActive);\n\n      // Fetch usage counts\n      const collections = [\"contacts\", \"groups\", \"digitalCards\"];\n      const counts = await Promise.all(\n        collections.map(async (collectionName) => {\n          const collRef = collection(db, collectionName);\n          const q = query(collRef, where(\"ownerId\", \"==\", user.uid));\n          const snapshot = await getCountFromServer(q);\n          return snapshot.data().count;\n        })\n      );\n\n      // Count AI scans (contacts with source = business_card_scan or bulk_scan)\n      const aiScansQuery = query(\n        collection(db, \"contacts\"),\n        where(\"ownerId\", \"==\", user.uid),\n        where(\"source\", \"in\", [\"business_card_scan\", \"bulk_scan\"])\n      );\n      const aiScansSnapshot = await getCountFromServer(aiScansQuery);\n\n      setUsage({\n        contactsCount: counts[0],\n        groupsCount: counts[1],\n        digitalCardsCount: counts[2],\n        aiScansCount: aiScansSnapshot.data().count,\n      });\n    } catch (error) {\n      console.error(\"Error fetching usage data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      refreshUsage();\n    }\n  }, [user]);\n\n  return {\n    usage,\n    limits,\n    hasActiveSubscription,\n    canAddContact: usage.contactsCount < limits.contacts,\n    canAddGroup: usage.groupsCount < limits.groups,\n    canAddDigitalCard: usage.digitalCardsCount < limits.digitalCards,\n    canUseAIScan: usage.aiScansCount < limits.aiScans,\n    loading,\n    refreshUsage,\n  };\n}","size_bytes":3578},"client/src/lib/firebase.ts":{"content":"import { initializeApp, getApps } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nexport const app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n","size_bytes":737},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/routes/PrivateRoute.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface PrivateRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function PrivateRoute({ children }: PrivateRouteProps) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":744},"client/src/types/vcard-parser.d.ts":{"content":"declare module 'vcard-parser';\n","size_bytes":31},"client/src/utils/duplicate.ts":{"content":"import { collection, getDocs, query, where, limit } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\nexport async function isDuplicateContact(ownerId: string, email?: string, phones?: string[]) {\n  try {\n    const col = collection(db, \"contacts\");\n    \n    // If no email or phone provided, not a duplicate\n    if (!email && (!phones || phones.length === 0)) return false;\n    \n    // Check for email match first\n    if (email && email.trim()) {\n      const emailQuery = query(\n        col, \n        where(\"ownerId\", \"==\", ownerId), \n        where(\"email\", \"==\", email.toLowerCase().trim()),\n        limit(1)\n      );\n      const emailSnap = await getDocs(emailQuery);\n      if (!emailSnap.empty) return true;\n    }\n    \n    // Check for phone match if email didn't match\n    if (phones && phones.length > 0) {\n      for (const phone of phones) {\n        if (phone && phone.trim()) {\n          const phoneQuery = query(\n            col,\n            where(\"ownerId\", \"==\", ownerId),\n            where(\"phones\", \"array-contains\", phone.trim()),\n            limit(1)\n          );\n          const phoneSnap = await getDocs(phoneQuery);\n          if (!phoneSnap.empty) return true;\n        }\n      }\n    }\n    \n    return false;\n  } catch (error) {\n    console.error(\"Error checking for duplicates:\", error);\n    return false; // Allow addition if check fails\n  }\n}\n","size_bytes":1377},"client/src/utils/multiCardOcr.ts":{"content":"import type { ParsedContact } from \"./parse\";\nimport QrScanner from 'qr-scanner';\n\n// Get API key from environment variables\nconst GEMINI_API_KEY = import.meta.env?.VITE_GEMINI_API_KEY;\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent\";\n\nexport interface MultiCardResult {\n  cards: ParsedContact[];\n  totalProcessed: number;\n  errors: string[];\n  qrCodesFound: number;\n}\n\ninterface QRCodeData {\n  type: 'contact' | 'url' | 'text';\n  data: string;\n  extractedInfo?: any;\n  position?: { x: number; y: number; width: number; height: number };\n}\n\n/**\n * Convert file to base64 with proper format detection and optimization\n */\nconst getFileAsBase64 = async (file: File): Promise<{ base64: string; mimeType: string }> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const result = reader.result as string;\n      const [header, base64] = result.split(',');\n      const mimeType = header.split(':')[1].split(';')[0];\n      resolve({ base64, mimeType });\n    };\n    reader.onerror = (error) => reject(new Error('Failed to read file: ' + error));\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Enhanced QR code extraction with better error handling and multiple format support\n */\nasync function extractQRCodes(file: File): Promise<QRCodeData[]> {\n  try {\n    const qrCodes: QRCodeData[] = [];\n    const imageUrl = URL.createObjectURL(file);\n    const img = new Image();\n    \n    return new Promise((resolve) => {\n      img.onload = async () => {\n        try {\n          // Try multiple scanning approaches for better detection\n          const scanOptions = [\n            { returnDetailedScanResult: true },\n            { returnDetailedScanResult: true, highlightScanRegion: true },\n            { returnDetailedScanResult: true, highlightCodeOutline: true }\n          ];\n\n          for (const options of scanOptions) {\n            try {\n              const qrResult = await QrScanner.scanImage(img, options);\n              \n              if (qrResult?.data) {\n                const qrData = qrResult.data;\n                let qrInfo: QRCodeData = {\n                  type: 'text',\n                  data: qrData\n                };\n\n                // Enhanced QR code type detection and parsing\n                if (qrData.startsWith('BEGIN:VCARD')) {\n                  qrInfo.type = 'contact';\n                  qrInfo.extractedInfo = parseVCard(qrData);\n                } else if (qrData.startsWith('MECARD:')) {\n                  qrInfo.type = 'contact';\n                  qrInfo.extractedInfo = parseMeCard(qrData);\n                } else if (/^https?:\\/\\//.test(qrData)) {\n                  qrInfo.type = 'url';\n                  qrInfo.extractedInfo = { url: qrData };\n                } else if (qrData.includes('tel:') || qrData.includes('mailto:') || \n                          /(\\+?\\d{1,4}[-.\\s]?)?\\(?\\d{1,4}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/.test(qrData)) {\n                  qrInfo.type = 'contact';\n                  qrInfo.extractedInfo = extractContactFromText(qrData);\n                }\n\n                // Add position if available\n                if ('corner' in qrResult) {\n                  qrInfo.position = {\n                    x: Math.min(...qrResult.corner.map((p: any) => p.x)),\n                    y: Math.min(...qrResult.corner.map((p: any) => p.y)),\n                    width: Math.max(...qrResult.corner.map((p: any) => p.x)) - Math.min(...qrResult.corner.map((p: any) => p.x)),\n                    height: Math.max(...qrResult.corner.map((p: any) => p.y)) - Math.min(...qrResult.corner.map((p: any) => p.y))\n                  };\n                }\n\n                qrCodes.push(qrInfo);\n                break; // Found QR code, no need to try other options\n              }\n            } catch (scanError) {\n              console.log(`QR scan attempt failed:`, scanError);\n              continue;\n            }\n          }\n        } catch (error) {\n          console.log('QR code extraction error:', error);\n        }\n        \n        URL.revokeObjectURL(imageUrl);\n        resolve(qrCodes);\n      };\n      \n      img.onerror = () => {\n        URL.revokeObjectURL(imageUrl);\n        resolve(qrCodes);\n      };\n      \n      img.src = imageUrl;\n    });\n  } catch (error) {\n    console.error('QR Code extraction error:', error);\n    return [];\n  }\n}\n\n/**\n * Enhanced vCard parser with better field handling\n */\nfunction parseVCard(vCardData: string): any {\n  const lines = vCardData.split(/\\r?\\n/);\n  const contact: any = {};\n  \n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine || trimmedLine.startsWith('BEGIN:') || \n        trimmedLine.startsWith('END:') || trimmedLine.startsWith('VERSION:')) continue;\n    \n    const colonIndex = trimmedLine.indexOf(':');\n    if (colonIndex === -1) continue;\n    \n    const keyPart = trimmedLine.substring(0, colonIndex).trim();\n    const value = trimmedLine.substring(colonIndex + 1).trim();\n    \n    if (!value) continue;\n    \n    // Parse key and parameters\n    const [key, ...params] = keyPart.split(';');\n    const keyUpper = key.toUpperCase();\n    \n    switch (keyUpper) {\n      case 'FN':\n        contact.name = decodeVCardValue(value);\n        break;\n      case 'N':\n        // Parse structured name (Family;Given;Additional;Prefix;Suffix)\n        const nameParts = value.split(';').map(decodeVCardValue);\n        const lastName = nameParts[0] || '';\n        const firstName = nameParts[1] || '';\n        const middleName = nameParts[2] || '';\n        const prefix = nameParts[3] || '';\n        const suffix = nameParts[4] || '';\n        \n        const fullName = [prefix, firstName, middleName, lastName, suffix]\n          .filter(part => part.trim()).join(' ').trim();\n        if (fullName && !contact.name) contact.name = fullName;\n        break;\n      case 'ORG':\n        contact.company = decodeVCardValue(value);\n        break;\n      case 'EMAIL':\n        if (!contact.email) contact.email = decodeVCardValue(value).toLowerCase();\n        break;\n      case 'TEL':\n        if (!contact.phones) contact.phones = [];\n        const cleanPhone = normalizePhoneNumber(decodeVCardValue(value));\n        if (cleanPhone && !contact.phones.includes(cleanPhone)) {\n          contact.phones.push(cleanPhone);\n        }\n        break;\n      case 'URL':\n        if (!contact.website) contact.website = decodeVCardValue(value);\n        break;\n      case 'ADR':\n        // Parse structured address\n        const addressParts = value.split(';').map(decodeVCardValue).filter(part => part.trim());\n        if (addressParts.length > 0) contact.address = addressParts.join(', ');\n        break;\n      case 'TITLE':\n        if (!contact.services) contact.services = decodeVCardValue(value);\n        break;\n      case 'ROLE':\n        if (!contact.services) contact.services = decodeVCardValue(value);\n        break;\n      case 'NOTE':\n        if (!contact.services && value) contact.services = decodeVCardValue(value);\n        break;\n    }\n  }\n  \n  return contact;\n}\n\n/**\n * Enhanced MeCard parser\n */\nfunction parseMeCard(meCardData: string): any {\n  const contact: any = {};\n  \n  try {\n    // Clean and parse MeCard format\n    const cleanData = meCardData.replace('MECARD:', '');\n    const fields = cleanData.split(';');\n    \n    for (const field of fields) {\n      const trimmedField = field.trim();\n      if (!trimmedField) continue;\n      \n      const colonIndex = trimmedField.indexOf(':');\n      if (colonIndex === -1) continue;\n      \n      const key = trimmedField.substring(0, colonIndex).trim().toUpperCase();\n      const value = trimmedField.substring(colonIndex + 1).trim();\n      \n      if (!value) continue;\n      \n      switch (key) {\n        case 'N':\n          // Parse name (lastname,firstname)\n          const nameParts = value.split(',');\n          const lastName = nameParts[0]?.trim() || '';\n          const firstName = nameParts[1]?.trim() || '';\n          contact.name = `${firstName} ${lastName}`.trim();\n          break;\n        case 'ORG':\n          contact.company = value;\n          break;\n        case 'EMAIL':\n          contact.email = value.toLowerCase();\n          break;\n        case 'TEL':\n          if (!contact.phones) contact.phones = [];\n          const phone = normalizePhoneNumber(value);\n          if (phone) contact.phones.push(phone);\n          break;\n        case 'URL':\n          contact.website = value;\n          break;\n        case 'ADR':\n          contact.address = value;\n          break;\n        case 'NOTE':\n          contact.services = value;\n          break;\n      }\n    }\n  } catch (error) {\n    console.error('MeCard parsing error:', error);\n  }\n  \n  return contact;\n}\n\n/**\n * Enhanced contact extraction from plain text\n */\nfunction extractContactFromText(text: string): any {\n  const contact: any = {};\n  \n  try {\n    // Extract phone numbers with better regex\n    const phoneRegex = /(?:(?:\\+|00)[1-9]\\d{0,3}[-.\\s]?)?(?:\\(?\\d{1,4}\\)?[-.\\s]?)?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/g;\n    const phones = text.match(phoneRegex)?.map(normalizePhoneNumber).filter(Boolean);\n    if (phones && phones.length > 0) contact.phones = [...new Set(phones)];\n    \n    // Extract email addresses\n    const emailRegex = /\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\b/g;\n    const emails = text.match(emailRegex);\n    if (emails && emails.length > 0) contact.email = emails[0].toLowerCase();\n    \n    // Extract URLs\n    const urlRegex = /https?:\\/\\/(?:[-\\w.])+(?:[:\\d]+)?(?:\\/(?:[\\w/_.])*(?:\\?(?:[\\w&=%.])*)?(?:#(?:[\\w.])*)?)?/g;\n    const urls = text.match(urlRegex);\n    if (urls && urls.length > 0) contact.website = urls[0];\n    \n    // Handle tel: and mailto: schemes\n    if (text.includes('tel:')) {\n      const telMatch = text.match(/tel:([\\d+\\-\\s()]+)/);\n      if (telMatch) {\n        const phone = normalizePhoneNumber(telMatch[1]);\n        if (phone) {\n          if (!contact.phones) contact.phones = [];\n          contact.phones.push(phone);\n        }\n      }\n    }\n    \n    if (text.includes('mailto:')) {\n      const mailtoMatch = text.match(/mailto:([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n      if (mailtoMatch && !contact.email) {\n        contact.email = mailtoMatch[1].toLowerCase();\n      }\n    }\n  } catch (error) {\n    console.error('Text extraction error:', error);\n  }\n  \n  return contact;\n}\n\n/**\n * Decode vCard encoded values (handle quoted-printable, etc.)\n */\nfunction decodeVCardValue(value: string): string {\n  // Handle basic vCard escaping\n  return value\n    .replace(/\\\\n/g, '\\n')\n    .replace(/\\\\,/g, ',')\n    .replace(/\\\\;/g, ';')\n    .replace(/\\\\\\\\/g, '\\\\');\n}\n\n/**\n * Normalize phone numbers to a consistent format\n */\nfunction normalizePhoneNumber(phone: string): string {\n  if (!phone) return '';\n  \n  // Remove all non-digit characters except +\n  let cleaned = phone.replace(/[^\\d+]/g, '');\n  \n  // Handle different international formats\n  if (cleaned.startsWith('00')) {\n    cleaned = '+' + cleaned.substring(2);\n  }\n  \n  // Validate minimum length\n  if (cleaned.replace(/\\+/, '').length < 7) return '';\n  \n  return cleaned;\n}\n\n/**\n * Enhanced phone number categorization with international support\n */\nfunction categorizePhoneNumbers(phones: string[]): { phones: string[]; landlines: string[] } {\n  const mobilePhones: string[] = [];\n  const landlines: string[] = [];\n  \n  for (const phone of phones) {\n    const cleaned = normalizePhoneNumber(phone);\n    if (!cleaned) continue;\n    \n    const digitsOnly = cleaned.replace(/\\+/, '');\n    \n    // Enhanced mobile detection logic\n    let isMobile = false;\n    \n    if (cleaned.startsWith('+1')) {\n      // US/Canada - more sophisticated detection needed\n      isMobile = digitsOnly.length === 11;\n    } else if (cleaned.startsWith('+91')) {\n      // India - mobile numbers start with 6-9\n      const firstDigit = digitsOnly.charAt(2);\n      isMobile = digitsOnly.length === 12 && /[6-9]/.test(firstDigit);\n    } else if (cleaned.startsWith('+44')) {\n      // UK - mobile numbers start with 7\n      const thirdDigit = digitsOnly.charAt(2);\n      isMobile = thirdDigit === '7';\n    } else if (cleaned.startsWith('+49')) {\n      // Germany - mobile numbers start with 15, 16, 17\n      const prefix = digitsOnly.substring(2, 4);\n      isMobile = ['15', '16', '17'].includes(prefix);\n    } else if (cleaned.length >= 10 && cleaned.length <= 15) {\n      // Generic international mobile detection\n      isMobile = cleaned.startsWith('+');\n    } else if (!cleaned.startsWith('+') && digitsOnly.length === 10) {\n      // Domestic numbers - basic heuristic\n      const firstDigit = digitsOnly.charAt(0);\n      isMobile = /[6-9]/.test(firstDigit);\n    }\n    \n    if (isMobile) {\n      mobilePhones.push(phone);\n    } else {\n      landlines.push(phone);\n    }\n  }\n  \n  return { phones: mobilePhones, landlines };\n}\n\n/**\n * Clean and validate extracted text fields\n */\nfunction cleanExtractedField(value: any, type: 'text' | 'email' | 'url' | 'phone' = 'text'): string {\n  if (!value) return '';\n  \n  let cleaned = value.toString().trim();\n  \n  switch (type) {\n    case 'email':\n      cleaned = cleaned.toLowerCase();\n      // Validate email format\n      if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(cleaned)) {\n        return '';\n      }\n      break;\n    case 'url':\n      // Ensure URL has protocol\n      if (cleaned && !cleaned.startsWith('http')) {\n        cleaned = 'https://' + cleaned;\n      }\n      break;\n    case 'phone':\n      cleaned = normalizePhoneNumber(cleaned);\n      break;\n  }\n  \n  return cleaned;\n}\n\n/**\n * Enhanced Gemini API call with improved prompting and error handling\n */\nexport async function processMultipleBusinessCards(file: File): Promise<MultiCardResult> {\n  console.log('Starting enhanced multi-card processing...');\n  \n  if (!GEMINI_API_KEY) {\n    throw new Error(\"Gemini API key not found. Please set VITE_GEMINI_API_KEY environment variable.\");\n  }\n\n  const errors: string[] = [];\n  const cards: ParsedContact[] = [];\n\n  try {\n    // Extract QR codes first\n    console.log('Extracting QR codes...');\n    const qrCodes = await extractQRCodes(file);\n    console.log(`Found ${qrCodes.length} QR codes`);\n\n    // Convert image to base64\n    const { base64, mimeType } = await getFileAsBase64(file);\n\n    // Enhanced prompt with better instructions\n    const prompt = `\nAnalyze this image that may contain one or more business cards. Extract information from EACH business card you can identify and return a JSON array.\n\nIMPORTANT INSTRUCTIONS:\n- Look carefully for multiple business cards in the image (side by side, overlapping, etc.)\n- Extract text accurately, don't hallucinate information\n- Pay special attention to phone numbers, emails, and names\n- Distinguish between mobile phones and landlines when possible\n- Clean up any OCR artifacts or unclear text\n\nFor each business card found, return this JSON structure:\n\n[\n  {\n    \"cardNumber\": 1,\n    \"name\": \"Full name (first and last name)\",\n    \"company\": \"Company or organization name\",\n    \"email\": \"email@domain.com\",\n    \"phones\": [\"mobile numbers only\"],\n    \"landlines\": [\"landline numbers only\"],\n    \"services\": \"Job title, position, or services description\",\n    \"address\": \"Complete address with street, city, state/province, postal code\",\n    \"website\": \"Website URL (include https://)\",\n    \"social\": \"Social media handles or other contact info\",\n    \"confidence\": \"high|medium|low - your confidence in the extraction\"\n  }\n]\n\nRULES:\n- Return a JSON array even for single cards\n- Use empty arrays [] for missing phones/landlines\n- Use empty string \"\" for missing text fields  \n- Separate mobile and landline numbers correctly\n- Include country codes when visible\n- Extract complete, properly formatted addresses\n- Don't guess or make up information\n- Number cards starting from 1\n- Be conservative with confidence ratings\n`;\n\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            },\n            {\n              inline_data: {\n                mime_type: mimeType,\n                data: base64\n              }\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.1,\n        topK: 1,\n        topP: 0.8,\n        maxOutputTokens: 8192,\n      },\n      safetySettings: [\n        {\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_HATE_SPEECH\", \n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }\n      ]\n    };\n\n    console.log('Calling Gemini API for enhanced multi-card detection...');\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Gemini API Error Response:', errorText);\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('Gemini API response received');\n    \n    if (!result.candidates || !result.candidates[0] || !result.candidates[0].content) {\n      throw new Error('Invalid response from Gemini API - no content found');\n    }\n\n    const extractedText = result.candidates[0].content.parts[0].text;\n    console.log('Raw API response:', extractedText);\n    \n    // Enhanced JSON extraction\n    let jsonText = extractedText.trim();\n    \n    // Remove markdown code blocks\n    jsonText = jsonText.replace(/```(?:json)?\\s*/g, '').replace(/```\\s*/g, '');\n    \n    // Find JSON array - try multiple patterns\n    let jsonMatch = jsonText.match(/\\[[\\s\\S]*\\]/);\n    if (!jsonMatch) {\n      // Try finding JSON object and wrapping in array\n      const objectMatch = jsonText.match(/\\{[\\s\\S]*\\}/);\n      if (objectMatch) {\n        jsonText = `[${objectMatch[0]}]`;\n      } else {\n        throw new Error('No valid JSON found in API response');\n      }\n    } else {\n      jsonText = jsonMatch[0];\n    }\n\n    try {\n      const parsedCards = JSON.parse(jsonText) as any[];\n      \n      // Process each detected card\n      for (let i = 0; i < parsedCards.length; i++) {\n        const cardData = parsedCards[i];\n        \n        try {\n          // Enhanced data cleaning and validation\n          const cleanedCard: ParsedContact = {};\n\n          // Clean text fields\n          if (cardData.name) cleanedCard.name = cleanExtractedField(cardData.name, 'text');\n          if (cardData.company) cleanedCard.company = cleanExtractedField(cardData.company, 'text');\n          if (cardData.email) {\n            const cleanEmail = cleanExtractedField(cardData.email, 'email');\n            if (cleanEmail) cleanedCard.email = cleanEmail;\n          }\n          if (cardData.services) cleanedCard.services = cleanExtractedField(cardData.services, 'text');\n          if (cardData.address) cleanedCard.address = cleanExtractedField(cardData.address, 'text');\n          if (cardData.website) {\n            const cleanWebsite = cleanExtractedField(cardData.website, 'url');\n            if (cleanWebsite) cleanedCard.website = cleanWebsite;\n          }\n          if (cardData.social) cleanedCard.social = cleanExtractedField(cardData.social, 'text');\n\n          // Process and categorize phone numbers\n          const allPhones: string[] = [];\n          \n          if (Array.isArray(cardData.phones)) {\n            allPhones.push(...cardData.phones.map((p: any) => cleanExtractedField(p, 'phone')).filter(Boolean));\n          }\n          if (Array.isArray(cardData.landlines)) {\n            allPhones.push(...cardData.landlines.map((p: any) => cleanExtractedField(p, 'phone')).filter(Boolean));\n          }\n          \n          if (allPhones.length > 0) {\n            const { phones, landlines } = categorizePhoneNumbers(allPhones);\n            if (phones.length > 0) cleanedCard.phones = phones;\n            if (landlines.length > 0) cleanedCard.landlines = landlines;\n          }\n\n          // Merge QR code data if available and relevant\n          if (qrCodes.length > 0) {\n            cleanedCard.qrCodes = qrCodes;\n            \n            for (const qr of qrCodes) {\n              if (qr.type === 'contact' && qr.extractedInfo) {\n                const qrContact = qr.extractedInfo;\n                \n                // Only merge if current field is empty or QR data seems more complete\n                if (qrContact.name && !cleanedCard.name) cleanedCard.name = qrContact.name;\n                if (qrContact.company && !cleanedCard.company) cleanedCard.company = qrContact.company;\n                if (qrContact.email && !cleanedCard.email) cleanedCard.email = qrContact.email.toLowerCase();\n                if (qrContact.website && !cleanedCard.website) cleanedCard.website = qrContact.website;\n                if (qrContact.address && !cleanedCard.address) cleanedCard.address = qrContact.address;\n                if (qrContact.services && !cleanedCard.services) cleanedCard.services = qrContact.services;\n                \n                // Merge phone numbers\n                if (qrContact.phones && Array.isArray(qrContact.phones)) {\n                  const { phones: qrPhones, landlines: qrLandlines } = categorizePhoneNumbers(qrContact.phones);\n                  if (qrPhones.length > 0) {\n                    cleanedCard.phones = [...new Set([...(cleanedCard.phones || []), ...qrPhones])];\n                  }\n                  if (qrLandlines.length > 0) {\n                    cleanedCard.landlines = [...new Set([...(cleanedCard.landlines || []), ...qrLandlines])];\n                  }\n                }\n              }\n            }\n          }\n\n          // Final validation - only add card if it has substantial information\n          const hasSubstantialInfo = cleanedCard.name || cleanedCard.company || \n                                   cleanedCard.email || cleanedCard.phones || cleanedCard.landlines;\n          \n          if (hasSubstantialInfo) {\n            // Remove empty fields\n            Object.keys(cleanedCard).forEach(key => {\n              const value = cleanedCard[key as keyof ParsedContact];\n              if (!value || (Array.isArray(value) && value.length === 0) || value === '') {\n                delete cleanedCard[key as keyof ParsedContact];\n              }\n            });\n\n            cards.push(cleanedCard);\n            console.log(`Successfully processed card ${i + 1}:`, cleanedCard);\n          } else {\n            errors.push(`Card ${i + 1} skipped - insufficient information extracted`);\n          }\n          \n        } catch (cardError: any) {\n          const errorMsg = `Error processing card ${i + 1}: ${cardError.message}`;\n          console.error(errorMsg);\n          errors.push(errorMsg);\n        }\n      }\n      \n    } catch (parseError: any) {\n      console.error('JSON parsing error:', parseError);\n      console.error('Failed to parse text:', jsonText);\n      throw new Error(`Failed to parse extracted card data: ${parseError.message}. Please try with a clearer image.`);\n    }\n\n  } catch (error: any) {\n    console.error('Multi-card OCR Error:', error);\n    const errorMsg = `Processing failed: ${error.message}`;\n    errors.push(errorMsg);\n    \n    if (cards.length === 0) {\n      throw error; // Re-throw if no cards were processed\n    }\n  }\n\n  return {\n    cards,\n    totalProcessed: cards.length,\n    errors,\n    qrCodesFound: await extractQRCodes(file).then(codes => codes.length)\n  };\n}\n\n/**\n * Enhanced file validation with better error messages\n */\nexport function validateImageFile(file: File): boolean {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/bmp'];\n  const maxSize = 15 * 1024 * 1024; // 15MB for high-res multi-card images\n  const minSize = 1024; // 1KB minimum\n  \n  if (!validTypes.includes(file.type.toLowerCase())) {\n    throw new Error(`Invalid file type: ${file.type}. Please upload JPG, PNG, GIF, WebP, or BMP images.`);\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error(`File too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum size is 15MB.`);\n  }\n  \n  if (file.size < minSize) {\n    throw new Error(`File too small: ${file.size} bytes. Minimum size is 1KB.`);\n  }\n  \n  return true;\n}\n\n/**\n * Utility function to merge duplicate contacts\n */\nexport function mergeDuplicateContacts(contacts: ParsedContact[]): ParsedContact[] {\n  const merged: ParsedContact[] = [];\n  const processed = new Set<number>();\n  \n  for (let i = 0; i < contacts.length; i++) {\n    if (processed.has(i)) continue;\n    \n    const contact = { ...contacts[i] };\n    processed.add(i);\n    \n    // Look for duplicates\n    for (let j = i + 1; j < contacts.length; j++) {\n      if (processed.has(j)) continue;\n      \n      const other = contacts[j];\n      const isSimilar = \n        (contact.email && other.email && contact.email === other.email) ||\n        (contact.name && other.name && \n         contact.name.toLowerCase().replace(/\\s+/g, ' ') === \n         other.name.toLowerCase().replace(/\\s+/g, ' ')) ||\n        (contact.phones && other.phones && \n         contact.phones.some(p => other.phones?.includes(p)));\n      \n      if (isSimilar) {\n        // Merge the contacts\n        if (!contact.name && other.name) contact.name = other.name;\n        if (!contact.company && other.company) contact.company = other.company;\n        if (!contact.email && other.email) contact.email = other.email;\n        if (!contact.website && other.website) contact.website = other.website;\n        if (!contact.address && other.address) contact.address = other.address;\n        if (!contact.services && other.services) contact.services = other.services;\n        if (!contact.social && other.social) contact.social = other.social;\n        \n        if (other.phones) {\n          contact.phones = [...new Set([...(contact.phones || []), ...other.phones])];\n        }\n        if (other.landlines) {\n          contact.landlines = [...new Set([...(contact.landlines || []), ...other.landlines])];\n        }\n        if (other.qrCodes) {\n          contact.qrCodes = [...(contact.qrCodes || []), ...other.qrCodes];\n        }\n        \n        processed.add(j);\n      }\n    }\n    \n    merged.push(contact);\n  }\n  \n  return merged;\n}\n\n/**\n * Advanced image preprocessing for better OCR accuracy\n */\nexport async function preprocessImageForOCR(file: File): Promise<File> {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      try {\n        // Set canvas size\n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        if (!ctx) {\n          resolve(file);\n          return;\n        }\n        \n        // Draw original image\n        ctx.drawImage(img, 0, 0);\n        \n        // Get image data for processing\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        \n        // Apply image enhancement filters\n        for (let i = 0; i < data.length; i += 4) {\n          // Convert to grayscale with better contrast\n          const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n          \n          // Apply contrast enhancement\n          const contrast = 1.2;\n          const enhanced = Math.min(255, Math.max(0, contrast * (gray - 128) + 128));\n          \n          // Apply brightness adjustment\n          const brightness = enhanced > 128 ? enhanced * 1.1 : enhanced * 0.9;\n          const final = Math.min(255, Math.max(0, brightness));\n          \n          data[i] = final;     // Red\n          data[i + 1] = final; // Green\n          data[i + 2] = final; // Blue\n          // Alpha channel stays the same\n        }\n        \n        // Put processed image data back\n        ctx.putImageData(imageData, 0, 0);\n        \n        // Convert back to file\n        canvas.toBlob((blob) => {\n          if (blob) {\n            const processedFile = new File([blob], file.name, {\n              type: 'image/png',\n              lastModified: Date.now()\n            });\n            resolve(processedFile);\n          } else {\n            resolve(file);\n          }\n        }, 'image/png', 0.95);\n        \n      } catch (error) {\n        console.log('Image preprocessing failed, using original:', error);\n        resolve(file);\n      }\n    };\n    \n    img.onerror = () => resolve(file);\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Batch processing for multiple files\n */\nexport async function processBatchBusinessCards(files: File[]): Promise<{\n  results: MultiCardResult[];\n  totalCards: number;\n  totalErrors: string[];\n  processingTime: number;\n}> {\n  const startTime = Date.now();\n  const results: MultiCardResult[] = [];\n  const totalErrors: string[] = [];\n  let totalCards = 0;\n  \n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    console.log(`Processing file ${i + 1}/${files.length}: ${file.name}`);\n    \n    try {\n      validateImageFile(file);\n      \n      // Optionally preprocess image for better results\n      const preprocessedFile = await preprocessImageForOCR(file);\n      const result = await processMultipleBusinessCards(preprocessedFile);\n      \n      results.push(result);\n      totalCards += result.totalProcessed;\n      totalErrors.push(...result.errors);\n      \n    } catch (error: any) {\n      const errorMsg = `Failed to process ${file.name}: ${error.message}`;\n      console.error(errorMsg);\n      totalErrors.push(errorMsg);\n      \n      // Add empty result for failed file\n      results.push({\n        cards: [],\n        totalProcessed: 0,\n        errors: [errorMsg],\n        qrCodesFound: 0\n      });\n    }\n  }\n  \n  const processingTime = Date.now() - startTime;\n  \n  return {\n    results,\n    totalCards,\n    totalErrors,\n    processingTime\n  };\n}\n\n/**\n * Export contacts to various formats\n */\nexport class ContactExporter {\n  /**\n   * Export to VCF (vCard) format\n   */\n  static toVCF(contacts: ParsedContact[]): string {\n    return contacts.map(contact => {\n      const vcard = ['BEGIN:VCARD', 'VERSION:3.0'];\n      \n      if (contact.name) {\n        vcard.push(`FN:${contact.name}`);\n        const nameParts = contact.name.split(' ');\n        const firstName = nameParts[0] || '';\n        const lastName = nameParts.slice(1).join(' ') || '';\n        vcard.push(`N:${lastName};${firstName};;;`);\n      }\n      \n      if (contact.company) vcard.push(`ORG:${contact.company}`);\n      if (contact.services) vcard.push(`TITLE:${contact.services}`);\n      if (contact.email) vcard.push(`EMAIL:${contact.email}`);\n      if (contact.website) vcard.push(`URL:${contact.website}`);\n      if (contact.address) vcard.push(`ADR:;;${contact.address};;;;`);\n      \n      if (contact.phones) {\n        contact.phones.forEach(phone => {\n          vcard.push(`TEL;TYPE=CELL:${phone}`);\n        });\n      }\n      \n      if (contact.landlines) {\n        contact.landlines.forEach(phone => {\n          vcard.push(`TEL;TYPE=WORK:${phone}`);\n        });\n      }\n      \n      if (contact.social) vcard.push(`NOTE:${contact.social}`);\n      \n      vcard.push('END:VCARD');\n      return vcard.join('\\r\\n');\n    }).join('\\r\\n\\r\\n');\n  }\n  \n  /**\n   * Export to CSV format\n   */\n  static toCSV(contacts: ParsedContact[]): string {\n    const headers = [\n      'Name', 'Company', 'Email', 'Mobile Phones', 'Landlines', \n      'Services', 'Address', 'Website', 'Social'\n    ];\n    \n    const rows = contacts.map(contact => [\n      contact.name || '',\n      contact.company || '',\n      contact.email || '',\n      (contact.phones || []).join('; '),\n      (contact.landlines || []).join('; '),\n      contact.services || '',\n      contact.address || '',\n      contact.website || '',\n      contact.social || ''\n    ]);\n    \n    const csvContent = [headers, ...rows]\n      .map(row => row.map(field => `\"${field.replace(/\"/g, '\"\"')}\"`).join(','))\n      .join('\\n');\n      \n    return csvContent;\n  }\n  \n  /**\n   * Export to JSON format\n   */\n  static toJSON(contacts: ParsedContact[], pretty: boolean = true): string {\n    return JSON.stringify(contacts, null, pretty ? 2 : 0);\n  }\n}\n\n/**\n * Quality assessment for extracted contacts\n */\nexport function assessContactQuality(contact: ParsedContact): {\n  score: number;\n  issues: string[];\n  completeness: number;\n} {\n  const issues: string[] = [];\n  let score = 0;\n  let fieldsPresent = 0;\n  const totalFields = 7; // name, company, email, phones, services, address, website\n  \n  // Check essential fields\n  if (contact.name) {\n    score += 25;\n    fieldsPresent++;\n    if (contact.name.length < 3) issues.push('Name seems too short');\n  } else {\n    issues.push('Missing name');\n  }\n  \n  if (contact.email) {\n    score += 20;\n    fieldsPresent++;\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(contact.email)) {\n      issues.push('Email format may be incorrect');\n      score -= 5;\n    }\n  } else {\n    issues.push('Missing email');\n  }\n  \n  if (contact.phones || contact.landlines) {\n    score += 20;\n    fieldsPresent++;\n    \n    const allPhones = [...(contact.phones || []), ...(contact.landlines || [])];\n    if (allPhones.some(phone => phone.replace(/\\D/g, '').length < 7)) {\n      issues.push('Some phone numbers seem too short');\n      score -= 5;\n    }\n  } else {\n    issues.push('Missing phone numbers');\n  }\n  \n  if (contact.company) {\n    score += 15;\n    fieldsPresent++;\n  }\n  \n  if (contact.services) {\n    score += 10;\n    fieldsPresent++;\n  }\n  \n  if (contact.address) {\n    score += 5;\n    fieldsPresent++;\n    if (contact.address.length < 10) {\n      issues.push('Address seems incomplete');\n      score -= 2;\n    }\n  }\n  \n  if (contact.website) {\n    score += 5;\n    fieldsPresent++;\n    if (!contact.website.match(/^https?:\\/\\//)) {\n      issues.push('Website URL format may be incorrect');\n      score -= 2;\n    }\n  }\n  \n  const completeness = (fieldsPresent / totalFields) * 100;\n  \n  // Bonus points for completeness\n  if (completeness > 80) score += 10;\n  else if (completeness > 60) score += 5;\n  \n  return {\n    score: Math.max(0, Math.min(100, score)),\n    issues,\n    completeness\n  };\n}\n\n/**\n * Advanced contact deduplication with fuzzy matching\n */\nexport function deduplicateContacts(contacts: ParsedContact[]): {\n  unique: ParsedContact[];\n  duplicates: ParsedContact[][];\n  merged: number;\n} {\n  const unique: ParsedContact[] = [];\n  const duplicates: ParsedContact[][] = [];\n  const processed = new Set<number>();\n  let merged = 0;\n  \n  for (let i = 0; i < contacts.length; i++) {\n    if (processed.has(i)) continue;\n    \n    const contact = { ...contacts[i] };\n    const duplicateGroup = [contacts[i]];\n    processed.add(i);\n    \n    // Find potential duplicates\n    for (let j = i + 1; j < contacts.length; j++) {\n      if (processed.has(j)) continue;\n      \n      const other = contacts[j];\n      const similarity = calculateContactSimilarity(contact, other);\n      \n      if (similarity > 0.7) { // 70% similarity threshold\n        duplicateGroup.push(other);\n        \n        // Merge information\n        mergeContactInformation(contact, other);\n        processed.add(j);\n        merged++;\n      }\n    }\n    \n    unique.push(contact);\n    if (duplicateGroup.length > 1) {\n      duplicates.push(duplicateGroup);\n    }\n  }\n  \n  return { unique, duplicates, merged };\n}\n\n/**\n * Calculate similarity between two contacts\n */\nfunction calculateContactSimilarity(contact1: ParsedContact, contact2: ParsedContact): number {\n  let matches = 0;\n  let total = 0;\n  \n  // Name similarity\n  if (contact1.name && contact2.name) {\n    total++;\n    const similarity = calculateStringSimilarity(\n      contact1.name.toLowerCase(),\n      contact2.name.toLowerCase()\n    );\n    if (similarity > 0.8) matches += similarity;\n  }\n  \n  // Email exact match\n  if (contact1.email && contact2.email) {\n    total++;\n    if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) {\n      matches++;\n    }\n  }\n  \n  // Phone number overlap\n  const phones1 = [...(contact1.phones || []), ...(contact1.landlines || [])];\n  const phones2 = [...(contact2.phones || []), ...(contact2.landlines || [])];\n  \n  if (phones1.length > 0 && phones2.length > 0) {\n    total++;\n    const overlap = phones1.some(p1 => \n      phones2.some(p2 => \n        normalizePhoneNumber(p1) === normalizePhoneNumber(p2)\n      )\n    );\n    if (overlap) matches++;\n  }\n  \n  // Company similarity\n  if (contact1.company && contact2.company) {\n    total++;\n    const similarity = calculateStringSimilarity(\n      contact1.company.toLowerCase(),\n      contact2.company.toLowerCase()\n    );\n    if (similarity > 0.7) matches += similarity;\n  }\n  \n  return total > 0 ? matches / total : 0;\n}\n\n/**\n * Simple string similarity calculation (Jaro-Winkler approximation)\n */\nfunction calculateStringSimilarity(str1: string, str2: string): number {\n  if (str1 === str2) return 1;\n  if (str1.length === 0 || str2.length === 0) return 0;\n  \n  const longer = str1.length > str2.length ? str1 : str2;\n  const shorter = str1.length > str2.length ? str2 : str1;\n  \n  if (longer.length === 0) return 1;\n  \n  const editDistance = levenshteinDistance(str1, str2);\n  return (longer.length - editDistance) / longer.length;\n}\n\n/**\n * Calculate Levenshtein distance between two strings\n */\nfunction levenshteinDistance(str1: string, str2: string): number {\n  const matrix = Array(str2.length + 1).fill(null).map(() => \n    Array(str1.length + 1).fill(null)\n  );\n  \n  for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\n  for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\n  \n  for (let j = 1; j <= str2.length; j++) {\n    for (let i = 1; i <= str1.length; i++) {\n      const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n      matrix[j][i] = Math.min(\n        matrix[j][i - 1] + 1,         // insertion\n        matrix[j - 1][i] + 1,         // deletion\n        matrix[j - 1][i - 1] + substitutionCost // substitution\n      );\n    }\n  }\n  \n  return matrix[str2.length][str1.length];\n}\n\n/**\n * Merge information from two contacts\n */\nfunction mergeContactInformation(target: ParsedContact, source: ParsedContact): void {\n  // Merge fields, preferring longer/more complete values\n  if (!target.name || (source.name && source.name.length > target.name.length)) {\n    target.name = source.name;\n  }\n  \n  if (!target.company || (source.company && source.company.length > target.company.length)) {\n    target.company = source.company;\n  }\n  \n  if (!target.email && source.email) target.email = source.email;\n  if (!target.website && source.website) target.website = source.website;\n  \n  if (!target.address || (source.address && source.address.length > target.address.length)) {\n    target.address = source.address;\n  }\n  \n  if (!target.services || (source.services && source.services.length > target.services.length)) {\n    target.services = source.services;\n  }\n  \n  if (!target.social && source.social) target.social = source.social;\n  \n  // Merge phone arrays\n  if (source.phones) {\n    target.phones = [...new Set([...(target.phones || []), ...source.phones])];\n  }\n  \n  if (source.landlines) {\n    target.landlines = [...new Set([...(target.landlines || []), ...source.landlines])];\n  }\n  \n  // Merge QR codes\n  if (source.qrCodes) {\n    target.qrCodes = [...(target.qrCodes || []), ...source.qrCodes];\n  }\n}\n\n// Export all functions and classes\nexport {\n  extractQRCodes,\n  parseVCard,\n  parseMeCard,\n  extractContactFromText,\n  normalizePhoneNumber,\n  categorizePhoneNumbers,\n  cleanExtractedField\n};","size_bytes":39891},"client/src/utils/ocr.ts":{"content":"import type { ParsedContact } from \"./parse\";\n\n// Get API key from environment variables (supports both Vite and Next.js)\nconst GEMINI_API_KEY = import.meta.env?.VITE_GEMINI_API_KEY || process.env.NEXT_PUBLIC_GEMINI_API_KEY;\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent\";\n\n/**\n * Convert file to base64 with proper format detection\n */\nconst getFileAsBase64 = async (file: File): Promise<{ base64: string; mimeType: string }> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const result = reader.result as string;\n      const [header, base64] = result.split(',');\n      const mimeType = header.split(':')[1].split(';')[0];\n      resolve({ base64, mimeType });\n    };\n    reader.onerror = (error) => reject(new Error('Failed to read file: ' + error));\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Fetch image from URL and convert to base64\n */\nasync function fetchImageAsBase64(imageUrl: string): Promise<{ base64: string; mimeType: string }> {\n  try {\n    console.log('Fetching image from URL:', imageUrl.substring(0, 50) + '...');\n    \n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\n    \n    const response = await fetch(imageUrl, {\n      method: 'GET',\n      signal: controller.signal,\n      headers: {\n        'Accept': 'image/*',\n      }\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n    }\n\n    const contentType = response.headers.get('content-type') || 'image/jpeg';\n    const arrayBuffer = await response.arrayBuffer();\n    const uint8Array = new Uint8Array(arrayBuffer);\n    \n    // Convert to base64 efficiently\n    const chunkSize = 8192;\n    let binary = '';\n    \n    for (let i = 0; i < uint8Array.byteLength; i += chunkSize) {\n      const chunk = uint8Array.subarray(i, i + chunkSize);\n      binary += String.fromCharCode.apply(null, Array.from(chunk));\n    }\n    \n    const base64 = btoa(binary);\n    console.log(`Image converted to base64, size: ${base64.length} characters`);\n\n    return {\n      base64,\n      mimeType: contentType\n    };\n  } catch (error: any) {\n    console.error('Error fetching image:', error);\n    \n    if (error.name === 'AbortError') {\n      throw new Error('Image fetch timeout. Please try again.');\n    }\n    \n    throw new Error(`Failed to fetch image: ${error.message}`);\n  }\n}\n\n/**\n * Call Gemini API with image for OCR and data extraction\n * @param imageInput - Either a File object or image URL\n * @returns Promise<ParsedContact>\n */\nexport async function callGeminiAPI(imageInput: File | string): Promise<ParsedContact> {\n  console.log('Starting Gemini API call...');\n  \n  if (!GEMINI_API_KEY) {\n    throw new Error(\"Gemini API key not found. Please set VITE_GEMINI_API_KEY or NEXT_PUBLIC_GEMINI_API_KEY environment variable.\");\n  }\n\n  try {\n    let base64Image: string;\n    let mimeType: string;\n\n    // Handle File input (recommended for bulk uploads)\n    if (imageInput instanceof File) {\n      console.log('Processing File input:', imageInput.name);\n      const fileData = await getFileAsBase64(imageInput);\n      base64Image = fileData.base64;\n      mimeType = fileData.mimeType;\n    } else {\n      // Handle URL input (for single uploads after Firebase storage)\n      console.log('Processing URL input');\n      const imageData = await fetchImageAsBase64(imageInput);\n      base64Image = imageData.base64;\n      mimeType = imageData.mimeType;\n    }\n\n    const prompt = `\n    Analyze this business card image and extract the following information. Return ONLY a valid JSON object with this exact structure:\n    \n    {\n      \"name\": \"Full name of the person\",\n      \"company\": \"Company or organization name\",\n      \"email\": \"Email address\",\n      \"phone\": \"Phone number (with country code if visible)\",\n      \"services\": \"Job title, position, or services offered\",\n      \"address\": \"Complete address (street, city, state, zip)\",\n      \"website\": \"Website URL if present\",\n      \"social\": \"Social media handles if present\"\n    }\n    \n    Rules:\n    - Return ONLY valid JSON, no additional text or explanation\n    - Use empty string \"\" for missing information, not null\n    - Clean and format extracted text properly\n    - For phone numbers, include country code if visible\n    - Extract complete addresses including all components\n    - Be accurate and avoid hallucination\n    - If text is unclear, use best interpretation but don't guess\n    `;\n\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            },\n            {\n              inline_data: {\n                mime_type: mimeType,\n                data: base64Image\n              }\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.1,\n        topK: 1,\n        topP: 1,\n        maxOutputTokens: 1024,\n      },\n      safetySettings: [\n        {\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_HATE_SPEECH\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        },\n        {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n        }\n      ]\n    };\n\n    // Call API with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    console.log('Calling Gemini API...');\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      signal: controller.signal,\n      body: JSON.stringify(requestBody)\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Gemini API Error Response:', errorText);\n      \n      if (response.status === 429) {\n        throw new Error('API rate limit exceeded. Please wait before trying again.');\n      } else if (response.status === 401) {\n        throw new Error('Invalid API key. Please check your Gemini API configuration.');\n      } else if (response.status === 403) {\n        throw new Error('API access forbidden. Please check your API key permissions.');\n      } else if (response.status >= 500) {\n        throw new Error('Gemini API server error. Please try again later.');\n      } else {\n        throw new Error(`API Error: ${response.status} - ${errorText || response.statusText}`);\n      }\n    }\n\n    const result = await response.json();\n    console.log('Gemini API response received');\n    \n    if (!result.candidates || !result.candidates[0] || !result.candidates[0].content) {\n      console.error('Invalid API response structure:', result);\n      throw new Error('Invalid response from Gemini API - no content found');\n    }\n\n    const extractedText = result.candidates[0].content.parts[0].text;\n    console.log('Raw API response:', extractedText);\n    \n    // Clean the response to extract JSON\n    let jsonText = extractedText.trim();\n    \n    // Remove markdown code blocks if present\n    jsonText = jsonText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '');\n    \n    // Find JSON object in the response\n    const jsonMatch = jsonText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      jsonText = jsonMatch[0];\n    } else {\n      throw new Error('No valid JSON found in API response');\n    }\n\n    // Clean up common JSON formatting issues\n    jsonText = jsonText\n      .replace(/,\\s*}/g, '}') // Remove trailing commas\n      .replace(/,\\s*]/g, ']') // Remove trailing commas in arrays\n      .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '') // Remove control characters\n      .trim();\n\n    try {\n      const parsedData = JSON.parse(jsonText) as any;\n      \n      // Clean and validate the extracted data\n      const cleanedData: ParsedContact = {\n        name: (parsedData.name || '').toString().trim(),\n        company: (parsedData.company || '').toString().trim(),\n        email: (parsedData.email || '').toString().toLowerCase().trim(),\n        phones: [(parsedData.phone || '').toString().trim()].filter(p => p),\n        services: (parsedData.services || '').toString().trim(),\n        address: (parsedData.address || '').toString().trim(),\n        website: (parsedData.website || '').toString().trim(),\n        social: (parsedData.social || '').toString().trim(),\n      };\n\n      // Convert empty strings to undefined for cleaner data\n      Object.keys(cleanedData).forEach(key => {\n        const value = cleanedData[key as keyof ParsedContact];\n        if (!value || value === '') {\n          delete cleanedData[key as keyof ParsedContact];\n        }\n      });\n\n      console.log('Successfully parsed contact data:', cleanedData);\n      return cleanedData;\n      \n    } catch (parseError) {\n      console.error('JSON parsing error:', parseError);\n      console.error('Failed to parse text:', jsonText);\n      throw new Error('Failed to parse extracted data. Please try with a clearer image.');\n    }\n\n  } catch (error: any) {\n    console.error('Gemini OCR Error:', error);\n    \n    // Handle timeout errors\n    if (error.name === 'AbortError') {\n      throw new Error('API request timeout. Please try again.');\n    }\n    \n    // Re-throw specific errors as-is\n    if (error.message?.includes('API key') || \n        error.message?.includes('rate limit') || \n        error.message?.includes('API access forbidden') ||\n        error.message?.includes('API Error:')) {\n      throw error;\n    }\n    \n    // Handle network errors\n    if (error.message?.includes('Failed to fetch') || \n        error.name === 'TypeError' || \n        error.message?.includes('Network')) {\n      throw new Error('Network error. Please check your internet connection and try again.');\n    }\n    \n    // Handle parsing errors\n    if (error.message?.includes('parse') || error.message?.includes('JSON')) {\n      throw error;\n    }\n    \n    // Generic error fallback\n    throw new Error(`OCR processing failed: ${error.message}`);\n  }\n}\n\n/**\n * Call Gemini API with retry logic and exponential backoff\n * @param imageInput - Either a File object or image URL\n * @param maxRetries - Maximum number of retry attempts (default: 3)\n * @returns Promise<ParsedContact>\n */\nexport async function callGeminiAPIWithRetry(imageInput: File | string, maxRetries: number = 3): Promise<ParsedContact> {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      console.log(`Gemini API attempt ${attempt}/${maxRetries}`);\n      return await callGeminiAPI(imageInput);\n    } catch (error: any) {\n      console.error(`Attempt ${attempt} failed:`, error.message);\n      \n      // Don't retry on certain errors\n      if (error.message?.includes('API key') || \n          error.message?.includes('Invalid API key') ||\n          error.message?.includes('API access forbidden')) {\n        throw error;\n      }\n      \n      // If this was the last attempt, throw the error\n      if (attempt === maxRetries) {\n        throw error;\n      }\n      \n      // Calculate delay with exponential backoff\n      let delay: number;\n      if (error.message?.includes('rate limit')) {\n        // Longer delay for rate limit errors\n        delay = Math.pow(2, attempt) * 2000; // 4s, 8s, 16s\n      } else {\n        // Standard delay for other errors\n        delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s\n      }\n      \n      console.log(`Waiting ${delay}ms before retry...`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw new Error('Max retries exceeded');\n}\n\n/**\n * Alternative OCR method using different approach\n * This can be used as fallback if Gemini API fails\n */\nexport async function extractTextFromImage(file: File): Promise<string> {\n  // This is a placeholder for alternative OCR implementation\n  // You could integrate with Tesseract.js, AWS Textract, or other services\n  console.warn('Alternative OCR method not implemented');\n  throw new Error('Alternative OCR method not implemented');\n}\n\n/**\n * Validate if a file is a supported image format\n */\nexport function validateImageFile(file: File): boolean {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  \n  if (!validTypes.includes(file.type)) {\n    throw new Error(`Invalid file type: ${file.type}. Please upload JPG, PNG, GIF, or WebP images.`);\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error(`File too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum size is 5MB.`);\n  }\n  \n  return true;\n}\n\n/**\n * Check if Gemini API is properly configured\n */\nexport function isGeminiAPIConfigured(): boolean {\n  return !!GEMINI_API_KEY;\n}\n\n/**\n * Get current API configuration info (for debugging)\n */\nexport function getAPIInfo() {\n  return {\n    hasApiKey: !!GEMINI_API_KEY,\n    apiKeyPreview: GEMINI_API_KEY ? `${GEMINI_API_KEY.substring(0, 8)}...` : 'Not set',\n    apiUrl: GEMINI_API_URL\n  };\n}","size_bytes":13345},"client/src/utils/parse.ts":{"content":"export type ParsedContact = {\n  name?: string;\n  company?: string;\n  phones?: string[];\n  landlines?: string[];\n  email?: string;\n  services?: string;\n  address?: string;\n  website?: string;\n  social?: string;\n  qrCodes?: Array<{\n    type: 'contact' | 'url' | 'text';\n    data: string;\n    extractedInfo?: any;\n  }>;\n};\n\nfunction extractPhoneNumbers(text: string): string[] {\n  // A more comprehensive regex for phone numbers\n  const phoneRegex = /(?:\\+?\\d{1,3}[-.\\s]?)?(?:\\(?\\d{2,5}\\)?[-.\\s]?)?\\d{2,5}[-.\\s]?\\d{2,5}[-.\\s]?\\d{2,5}/g;\n  \n  // Normalize text to improve matching\n  const normalizedText = text.replace(/o/gi, '0').replace(/[l]/gi, '1');\n  \n  const matches = normalizedText.match(phoneRegex);\n\n  if (!matches) {\n    return [];\n  }\n\n  const uniquePhones = new Set<string>();\n  matches.forEach(match => {\n    // Clean the number by removing all non-digit characters, except for a potential leading '+'\n    let cleaned = match.replace(/[^\\d+]/g, '');\n    \n    // Remove leading '0' if a country code is likely present\n    if (cleaned.startsWith('0') && cleaned.length > 10) {\n      cleaned = cleaned.substring(1);\n    }\n    \n    // Basic validation for length\n    if (cleaned.length >= 10 && cleaned.length <= 15) {\n      uniquePhones.add(cleaned);\n    }\n  });\n\n  return Array.from(uniquePhones);\n}\n\nexport function parseOcrToContact(text: string): ParsedContact {\n  // Enhanced parsing that works well with Gemini's structured output\n  const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n  \n  // Extract email with improved regex\n  const emailMatch = text.match(/[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}/i);\n  \n  // Use the new robust phone number extraction\n  const phoneMatches = extractPhoneNumbers(text);\n  \n  // Extract name - look for capitalized words that appear early and aren't email/phone/company indicators\n  const namePatterns = [\n    // Look for lines with 2-3 capitalized words\n    /^([A-Z][a-z]+\\s+[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)?)$/,\n    // Look for lines with proper case names\n    /^([A-Z][a-z]+(?:\\s+[A-Z]\\.?)?\\s+[A-Z][a-z]+)$/\n  ];\n  \n  let name = \"\";\n  for (let i = 0; i < Math.min(5, lines.length); i++) {\n    const line = lines[i];\n    if (line && !line.includes('@') && !(/\\d{3}/.test(line)) && !(/company|corp|inc|ltd|llc/i.test(line))) {\n      for (const pattern of namePatterns) {\n        const match = line.match(pattern);\n        if (match) {\n          name = match[1];\n          break;\n        }\n      }\n      if (name) break;\n    }\n  }\n  \n  // If no pattern match, try first non-company line\n  if (!name) {\n    name = lines.find(l => \n      l && \n      !l.includes('@') && \n      !(/\\d{6,}/.test(l)) &&\n      !(/company|corp|inc|ltd|llc|technologies|solutions|services|group/i.test(l)) &&\n      l.split(' ').length <= 4 &&\n      /^[A-Za-z\\s.]+$/.test(l)\n    ) || \"\";\n  }\n  \n  // Extract company - look for business indicators\n  const companyIndicators = /\\b(company|corp|corporation|inc|incorporated|ltd|limited|llc|llp|technologies|tech|solutions|services|group|associates|partners|consulting|studio|agency|firm|enterprises|industries)\\b/i;\n  const company = lines.find(l => \n    l && \n    (companyIndicators.test(l) || \n     (/^[A-Z][A-Za-z\\s&.,-]+$/.test(l) && l.length > (name?.length || 0) + 5))\n  ) || \"\";\n  \n  // Extract services/role - look for job titles or service descriptions\n  const serviceIndicators = /\\b(manager|director|ceo|cto|founder|developer|designer|consultant|analyst|specialist|coordinator|executive|president|vice|senior|junior|lead|head|chief)\\b/i;\n  const services = lines.find(l => \n    l && \n    l !== name && \n    l !== company && \n    (serviceIndicators.test(l) || \n     /services|solutions|consulting|development|design|marketing/i.test(l))\n  ) || \"\";\n  \n  // Extract address - typically longer lines with address indicators\n  const addressIndicators = /\\b(street|st|avenue|ave|road|rd|boulevard|blvd|drive|dr|lane|ln|way|place|pl|court|ct|suite|ste|floor|building|city|state|zip|postal)\\b/i;\n  const addressLines = lines.filter(l => \n    l && \n    l !== name && \n    l !== company && \n    l !== services &&\n    !l.includes('@') &&\n    (addressIndicators.test(l) || /\\d{5}/.test(l) || /,\\s*[A-Z]{2}\\s*\\d/.test(l))\n  );\n  const address = addressLines.join(\", \");\n  \n  return {\n    name: name || undefined,\n    company: company || undefined,\n    phones: phoneMatches.length > 0 ? phoneMatches : undefined,\n    email: emailMatch?.[0] || undefined,\n    services: services || undefined,\n    address: address || undefined\n  };\n}\n","size_bytes":4519},"client/src/utils/qr.ts":{"content":"export async function generateQrFromText(text: string): Promise<string> {\n  const { toDataURL } = await import('qrcode');\n  return await toDataURL(text);\n}\n","size_bytes":156},"client/src/utils/upload.ts":{"content":"import { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { storage } from \"@/lib/firebase\";\n\nexport async function uploadToStorage(file: File, path: string): Promise<string> {\n  const storageRef = ref(storage, path);\n  await uploadBytes(storageRef, file);\n  return await getDownloadURL(storageRef);\n}\n","size_bytes":320},"client/src/utils/vcard.ts":{"content":"export function buildVCard(profile: {\n  firstName?: string; \n  lastName?: string; \n  title?: string; \n  company?: string;\n  email?: string; \n  phone?: string; \n  website?: string; \n  address?: string;\n}) {\n  const fn = [profile.firstName, profile.lastName].filter(Boolean).join(\" \");\n  const n = `${profile.lastName || \"\"};${profile.firstName || \"\"};;;`;\n  const org = profile.company || \"\";\n  const title = profile.title || \"\";\n  const tel = profile.phone || \"\";\n  const email = profile.email || \"\";\n  const url = profile.website || \"\";\n  const adr = profile.address ? `;;${profile.address.replace(/\\n/g,\";\")}` : \";;;;;\";\n  \n  return [\n    \"BEGIN:VCARD\",\n    \"VERSION:3.0\",\n    `FN:${fn}`,\n    `N:${n}`,\n    `ORG:${org}`,\n    `TITLE:${title}`,\n    tel ? `TEL;TYPE=CELL:${tel}` : null,\n    email ? `EMAIL:${email}` : null,\n    url ? `URL:${url}` : null,\n    `ADR:${adr}`,\n    \"END:VCARD\"\n  ].filter(Boolean).join(\"\\n\");\n}\n","size_bytes":922},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":755},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}","size_bytes":4838},"client/src/components/ui/toaster.tsx":{"content":"import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}","size_bytes":771},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1144},"client/src/pages/Auth/Login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, Mail, Zap, Eye, EyeOff, Users, Shield, Sparkles } from \"lucide-react\";\nimport { FaGoogle } from \"react-icons/fa\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [googleLoading, setGoogleLoading] = useState(false);\n  const [authChecking, setAuthChecking] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const { login, user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Animation mounting effect\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Check authentication state and redirect if already logged in\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\n      if (firebaseUser && user) {\n        setLocation(\"/\");\n      }\n      setAuthChecking(false);\n    });\n\n    return () => unsubscribe();\n  }, [user, setLocation]);\n\n  // Show loading while checking auth state\n  if (authChecking) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      await login(email, password);\n      \n      const checkAuthState = () => {\n        return new Promise((resolve) => {\n          const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n              unsubscribe();\n              resolve(user);\n            }\n          });\n          \n          setTimeout(() => {\n            unsubscribe();\n            resolve(null);\n          }, 5000);\n        });\n      };\n      \n      await checkAuthState();\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully signed in to your account\",\n      });\n      \n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n      \n    } catch (error) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Sign-in Failed\",\n        description:\"Failed to sign in. Please check your credentials.\",\n        variant: \"destructive\",\n      });\n      \n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setGoogleLoading(true);\n    \n    try {\n      const provider = new GoogleAuthProvider();\n      provider.addScope('email');\n      provider.addScope('profile');\n      \n      const result = await signInWithPopup(auth, provider);\n      \n      if (result.user) {\n        toast({\n          title: \"Welcome!\",\n          description: \"Successfully signed in with Google\",\n        });\n        \n        setTimeout(() => {\n          setLocation(\"/\");\n        }, 100);\n      }\n      \n    } catch (error) {\n      console.error(\"Google sign-in error:\", error);\n      \n      let errorMessage = \"Failed to sign in with Google. Please try again.\";\n      \n      if (error.code === 'auth/popup-closed-by-user') {\n        errorMessage = \"Sign-in was cancelled.\";\n      } else if (error.code === 'auth/popup-blocked') {\n        errorMessage = \"Popup was blocked. Please allow popups for this site.\";\n      }\n      \n      toast({\n        title: \"Sign-in Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setGoogleLoading(false);\n    }\n  };\n\n  const features = [\n    {\n      icon: CreditCard,\n      title: \"Digital Cards\",\n      description: \"Convert physical cards to digital format\",\n      color: \"blue\",\n      delay: \"0s\"\n    },\n    {\n      icon: Sparkles,\n      title: \"AI Scanning\",\n      description: \"Intelligent text recognition technology\",\n      color: \"purple\",\n      delay: \"0.2s\"\n    },\n    {\n      icon: Users,\n      title: \"Contact Sync\",\n      description: \"Seamless integration with your contacts\",\n      color: \"green\",\n      delay: \"0.4s\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure Storage\",\n      description: \"End-to-end encrypted data protection\",\n      color: \"red\",\n      delay: \"0.6s\"\n    }\n  ];\n\n  const getColorClasses = (color) => {\n    const colors = {\n      blue: \"bg-blue-100 text-blue-600 border-blue-200\",\n      purple: \"bg-purple-100 text-purple-600 border-purple-200\",\n      green: \"bg-green-100 text-green-600 border-green-200\",\n      red: \"bg-red-100 text-red-600 border-red-200\"\n    };\n    return colors[color] || colors.blue;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 relative overflow-hidden\">\n      {/* Company Logo - Top Left */}\n      <div className={`absolute top-6 left-6 z-10 transition-all duration-1000 ${mounted ? 'translate-x-0 opacity-100' : '-translate-x-full opacity-0'}`}>\n        <div className=\"flex items-center space-x-3 bg-white/90 backdrop-blur-sm rounded-2xl px-4 py-3 shadow-lg border border-white/20\">\n          <div className=\"relative\">\n            <div className=\"h-10 w-10 rounded-xl bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center shadow-lg\">\n              <Zap className=\"text-white h-6 w-6\" />\n            </div>\n            <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse\"></div>\n          </div>\n          <div>\n            <h3 className=\"font-bold text-gray-900 text-lg\">CardManager</h3>\n            <p className=\"text-xs text-gray-600\">AI Business Solutions</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-20 left-20 w-32 h-32 bg-blue-200/30 rounded-full animate-pulse\"></div>\n        <div className=\"absolute top-40 right-32 w-24 h-24 bg-purple-200/30 rounded-full animate-pulse\" style={{animationDelay: '1s'}}></div>\n        <div className=\"absolute bottom-32 left-40 w-16 h-16 bg-green-200/30 rounded-full animate-pulse\" style={{animationDelay: '2s'}}></div>\n      </div>\n\n      <div className=\"flex items-center justify-center min-h-screen py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"w-full max-w-6xl flex items-center justify-between gap-12\">\n          \n          {/* Left Side - Features Animation */}\n          <div className={`hidden lg:block flex-1 transition-all duration-1000 delay-300 ${mounted ? 'translate-x-0 opacity-100' : '-translate-x-full opacity-0'}`}>\n            <div className=\"space-y-8\">\n              <div className=\"text-left\">\n                <h2 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4\">\n                  Revolutionize Your\n                </h2>\n                <h2 className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-6\">\n                  Business Networking\n                </h2>\n                <p className=\"text-xl text-gray-600 leading-relaxed\">\n                  Transform the way you manage business cards with AI-powered scanning, \n                  intelligent organization, and seamless digital transformation.\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                {features.map((feature, index) => (\n                  <div\n                    key={index}\n                    className={`group p-6 rounded-2xl border-2 bg-white/70 backdrop-blur-sm shadow-lg hover:shadow-xl transform hover:-translate-y-2 transition-all duration-500 ${getColorClasses(feature.color)}`}\n                    style={{\n                      animationDelay: feature.delay,\n                      animation: mounted ? `slideInUp 0.8s ease-out ${feature.delay} both` : 'none'\n                    }}\n                  >\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`p-3 rounded-xl ${getColorClasses(feature.color)} group-hover:scale-110 transition-transform duration-300`}>\n                        <feature.icon className=\"h-6 w-6\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900 mb-2 group-hover:text-gray-700 transition-colors\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 group-hover:text-gray-500 transition-colors\">\n                          {feature.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Side - Login Form */}\n          <div className={`w-full max-w-md transition-all duration-1000 delay-500 ${mounted ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}`}>\n            {/* Logo and Header for mobile */}\n            <div className=\"text-center mb-8 lg:hidden\">\n              <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-2xl bg-gradient-to-br from-blue-600 to-purple-600 mb-4 shadow-xl\">\n                <Zap className=\"text-white h-8 w-8\" />\n              </div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                CardManager\n              </h1>\n              <p className=\"text-gray-600 mt-2\">AI-Powered Business Card Management</p>\n            </div>\n\n            <Card className=\"shadow-2xl border-0 bg-white/90 backdrop-blur-sm hover:shadow-3xl transition-all duration-500 transform hover:scale-[1.02]\">\n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-2xl font-bold text-gray-900\">Welcome Back</CardTitle>\n                <p className=\"text-gray-600 mt-2\">Sign in to continue your journey</p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Email Sign In Form */}\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">Email address</Label>\n                    <div className=\"relative mt-1\">\n                      <Mail className=\"absolute left-3 top-3 h-5 w-5 text-gray-400 transition-colors\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                        className=\"pl-10 h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500 transition-all duration-300 hover:border-gray-400\"\n                        placeholder=\"Enter your email\"\n                        disabled={loading || googleLoading}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">Password</Label>\n                    <div className=\"relative mt-1\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                        className=\"h-12 border-gray-300 focus:border-blue-500 focus:ring-blue-500 pr-10 transition-all duration-300 hover:border-gray-400\"\n                        placeholder=\"Enter your password\"\n                        disabled={loading || googleLoading}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 transition-all duration-200\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        disabled={loading || googleLoading}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-5 w-5\" />\n                        ) : (\n                          <Eye className=\"h-5 w-5\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium shadow-lg transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98]\" \n                    disabled={loading || googleLoading}\n                  >\n                    {loading ? (\n                      <div className=\"flex items-center\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Signing in...\n                      </div>\n                    ) : (\n                      \"Sign In\"\n                    )}\n                  </Button>\n                </form>\n\n                <div className=\"relative\">\n                  <Separator className=\"my-6\" />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"bg-white px-4 text-sm text-gray-500\">or</span>\n                  </div>\n                </div>\n\n                {/* Google Sign In */}\n                <Button\n                  onClick={handleGoogleSignIn}\n                  disabled={googleLoading || loading}\n                  className=\"w-full h-12 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 shadow-sm transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98]\"\n                  variant=\"outline\"\n                >\n                  <FaGoogle className=\"mr-3 h-5 w-5 text-red-500\" />\n                  {googleLoading ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2\"></div>\n                      Signing in...\n                    </div>\n                  ) : (\n                    \"Continue with Google\"\n                  )}\n                </Button>\n                \n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600\">\n                    Don't have an account?{\" \"}\n                    <Link href=\"/register\" className=\"font-medium text-blue-600 hover:text-blue-500 transition-colors\">\n                      Create account\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Add custom keyframes for animations */}\n      <style jsx>{`\n        @keyframes slideInUp {\n          from {\n            opacity: 0;\n            transform: translateY(30px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n        \n        .shadow-3xl {\n          box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.25);\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":16115},"client/src/pages/Auth/Register.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, Eye, EyeOff, Users, Shield, Sparkles, Zap } from \"lucide-react\";\nimport { FaGoogle } from \"react-icons/fa\";\nimport { auth } from \"@/lib/firebase\";\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [googleLoading, setGoogleLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Password validation rules\n  const passwordRules = {\n    hasUpper: /[A-Z]/.test(formData.password),\n    hasLower: /[a-z]/.test(formData.password),\n    hasNumber: /[0-9]/.test(formData.password),\n    hasSymbol: /[^A-Za-z0-9]/.test(formData.password),\n    minLength: formData.password.length >= 8,\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const allValid = Object.values(passwordRules).every(Boolean);\n    if (!allValid) {\n      toast({\n        title: \"Invalid Password\",\n        description: \"Password must meet all requirements\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await register(formData.email, formData.password, formData.displayName);\n      toast({ title: \"Welcome!\", description: \"Account created successfully\" });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Something went wrong.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setGoogleLoading(true);\n    try {\n      const provider = new GoogleAuthProvider();\n      provider.addScope(\"email\");\n      provider.addScope(\"profile\");\n\n      const result = await signInWithPopup(auth, provider);\n      if (result.user) {\n        toast({\n          title: \"Welcome!\",\n          description: \"Successfully signed up with Google\",\n        });\n        setLocation(\"/\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Sign-up Failed\",\n        description: error.message || \"Google sign-up failed.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGoogleLoading(false);\n    }\n  };\n\n  const features = [\n    {\n      icon: CreditCard,\n      title: \"Digital Cards\",\n      description: \"Convert physical cards to digital format\",\n      color: \"blue\",\n      delay: \"0s\",\n    },\n    {\n      icon: Sparkles,\n      title: \"AI Scanning\",\n      description: \"Intelligent text recognition technology\",\n      color: \"purple\",\n      delay: \"0.2s\",\n    },\n    {\n      icon: Users,\n      title: \"Contact Sync\",\n      description: \"Seamless integration with your contacts\",\n      color: \"green\",\n      delay: \"0.4s\",\n    },\n    {\n      icon: Shield,\n      title: \"Secure Storage\",\n      description: \"End-to-end encrypted data protection\",\n      color: \"red\",\n      delay: \"0.6s\",\n    },\n  ];\n\n  const getColorClasses = (color: string) => {\n    const colors: Record<string, string> = {\n      blue: \"bg-blue-100 text-blue-600 border-blue-200\",\n      purple: \"bg-purple-100 text-purple-600 border-purple-200\",\n      green: \"bg-green-100 text-green-600 border-green-200\",\n      red: \"bg-red-100 text-red-600 border-red-200\",\n    };\n    return colors[color] || colors.blue;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 relative overflow-hidden\">\n      {/* Company Logo */}\n      <div\n        className={`absolute top-6 left-6 z-10 transition-all duration-1000 ${\n          mounted ? \"translate-x-0 opacity-100\" : \"-translate-x-full opacity-0\"\n        }`}\n      >\n        <div className=\"flex items-center space-x-3 bg-white/90 backdrop-blur-sm rounded-2xl px-4 py-3 shadow-lg border border-white/20\">\n          <div className=\"relative\">\n            <div className=\"h-10 w-10 rounded-xl bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center shadow-lg\">\n              <Zap className=\"text-white h-6 w-6\" />\n            </div>\n            <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse\"></div>\n          </div>\n          <div>\n            <h3 className=\"font-bold text-gray-900 text-lg\">CardManager</h3>\n            <p className=\"text-xs text-gray-600\">AI Business Solutions</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-center min-h-screen py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"w-full max-w-6xl flex items-center justify-between gap-12\">\n          {/* Left Features */}\n          <div\n            className={`hidden lg:block flex-1 transition-all duration-1000 delay-300 ${\n              mounted ? \"translate-x-0 opacity-100\" : \"-translate-x-full opacity-0\"\n            }`}\n          >\n            <div className=\"space-y-8\">\n              <h2 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4\">\n                Join the Future of\n              </h2>\n              <h2 className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-6\">\n                Business Networking\n              </h2>\n              <p className=\"text-xl text-gray-600 leading-relaxed\">\n                Create your account today and experience AI-powered scanning, intelligent organization, and seamless networking.\n              </p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {features.map((feature, index) => (\n                  <div\n                    key={index}\n                    className={`group p-6 rounded-2xl border-2 bg-white/70 backdrop-blur-sm shadow-lg hover:shadow-xl transform hover:-translate-y-2 transition-all duration-500 ${getColorClasses(\n                      feature.color\n                    )}`}\n                    style={{\n                      animationDelay: feature.delay,\n                      animation: mounted\n                        ? `slideInUp 0.8s ease-out ${feature.delay} both`\n                        : \"none\",\n                    }}\n                  >\n                    <div className=\"flex items-start space-x-4\">\n                      <div\n                        className={`p-3 rounded-xl ${getColorClasses(\n                          feature.color\n                        )} group-hover:scale-110 transition-transform duration-300`}\n                      >\n                        <feature.icon className=\"h-6 w-6\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900 mb-2 group-hover:text-gray-700 transition-colors\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 group-hover:text-gray-500 transition-colors\">\n                          {feature.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Register Form */}\n          <div\n            className={`w-full max-w-md h-screen flex flex-col justify-center px-4 transition-all duration-1000 delay-500 ${\n              mounted ? \"translate-x-0 opacity-100\" : \"translate-x-full opacity-0\"\n            }`}\n          >\n            <Card className=\"flex flex-col justify-between h-full shadow-2xl border-0 bg-white/90 backdrop-blur-sm\">\n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                  Create Account\n                </CardTitle>\n                <p className=\"text-gray-600 mt-2\">Get started with your free account</p>\n              </CardHeader>\n\n              {/* Scrollable Form */}\n              <CardContent className=\"flex-1 overflow-y-auto px-6 space-y-6\">\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"displayName\">Full Name</Label>\n                    <Input\n                      id=\"displayName\"\n                      name=\"displayName\"\n                      value={formData.displayName}\n                      onChange={(e) =>\n                        setFormData({ ...formData, displayName: e.target.value })\n                      }\n                      required\n                      placeholder=\"Enter your full name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) =>\n                        setFormData({ ...formData, email: e.target.value })\n                      }\n                      required\n                      placeholder=\"Enter your email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={formData.password}\n                        onChange={(e) =>\n                          setFormData({ ...formData, password: e.target.value })\n                        }\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"pr-10\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                      </button>\n                    </div>\n                    <div className=\"mt-2 space-y-1 text-sm\">\n                      <PasswordRule label=\"At least 8 characters\" valid={passwordRules.minLength} />\n                      <PasswordRule label=\"One uppercase letter\" valid={passwordRules.hasUpper} />\n                      <PasswordRule label=\"One lowercase letter\" valid={passwordRules.hasLower} />\n                      <PasswordRule label=\"One number\" valid={passwordRules.hasNumber} />\n                      <PasswordRule label=\"One special symbol\" valid={passwordRules.hasSymbol} />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      value={formData.confirmPassword}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          confirmPassword: e.target.value,\n                        })\n                      }\n                      required\n                      placeholder=\"Re-enter your password\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium shadow-lg transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98]\"\n                    disabled={loading}\n                  >\n                    {loading ? \"Creating account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n\n                <div className=\"relative\">\n                  <Separator className=\"my-6\" />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"bg-white px-4 text-sm text-gray-500\">or</span>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleGoogleSignIn}\n                  disabled={googleLoading || loading}\n                  className=\"w-full h-12 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 shadow-sm\"\n                  variant=\"outline\"\n                >\n                  <FaGoogle className=\"mr-3 h-5 w-5 text-red-500\" />\n                  {googleLoading ? \"Signing up...\" : \"Continue with Google\"}\n                </Button>\n\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600\">\n                    Already have an account?{\" \"}\n                    <Link\n                      href=\"/login\"\n                      className=\"font-medium text-blue-600 hover:text-blue-500 transition-colors\"\n                    >\n                      Sign in\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <style jsx>{`\n        @keyframes slideInUp {\n          from {\n            opacity: 0;\n            transform: translateY(30px);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n        .shadow-3xl {\n          box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.25);\n        }\n      `}</style>\n    </div>\n  );\n}\n\n// ‚úÖ Password rule helper\nfunction PasswordRule({ label, valid }: { label: string; valid: boolean }) {\n  return (\n    <p className={`flex items-center gap-2 ${valid ? \"text-green-600\" : \"text-gray-500\"}`}>\n      {valid ? \"‚úîÔ∏è\" : \"‚ùå\"} {label}\n    </p>\n  );\n}\n","size_bytes":14755},"client/src/pages/BulkUploads/BulkUploads.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, addDoc, serverTimestamp, query, where, getDocs } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { uploadToStorage } from \"@/utils/upload\";\nimport { callGeminiAPIWithRetry } from \"@/utils/ocr\";\nimport type { ParsedContact } from \"@/utils/parse\";\nimport { isDuplicateContact } from \"@/utils/duplicate\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { CloudUpload, Check, Clock, X, Save, Users, Sparkles, Brain, Zap, FileImage, AlertCircle, CheckCircle2, Camera, QrCode, ScanLine, CameraOff, RotateCcw, ArrowRight, ArrowLeft } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface UploadResult {\n  id: string;\n  file: File;\n  imageUrl?: string;\n  extractedData?: ParsedContact;\n  qrData?: any;\n  status: \"uploading\" | \"processing\" | \"completed\" | \"error\";\n  error?: string;\n  isFromCamera?: boolean;\n  captureIndex?: number;\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  ownerId: string;\n}\n\n// Helper function to add delay between operations\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Helper function to validate image file\nconst validateImageFile = (file: File): boolean => {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  const maxSize = 20 * 1024 * 1024; // 20MB\n  \n  if (!validTypes.includes(file.type)) {\n    throw new Error(`Invalid file type: ${file.type}. Please upload JPG, PNG, GIF, or WebP images.`);\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error(`File too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum size is 20MB.`);\n  }\n  \n  return true;\n};\n\n// Enhanced QR Code detection utility using Canvas\nconst detectQRCode = async (imageFile: File): Promise<any> => {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx?.drawImage(img, 0, 0);\n      \n      try {\n        const imageData = ctx?.getImageData(0, 0, canvas.width, canvas.height);\n        \n        if (imageData) {\n          // Simple QR pattern detection\n          const qrData = detectQRPattern(imageData, img.src);\n          resolve(qrData);\n        } else {\n          resolve(null);\n        }\n      } catch (error) {\n        console.error('QR detection error:', error);\n        resolve(null);\n      }\n    };\n    \n    img.onerror = () => resolve(null);\n    img.src = URL.createObjectURL(imageFile);\n  });\n};\n\n// Enhanced QR pattern detection (simplified implementation)\nconst detectQRPattern = (imageData: ImageData, imageSrc: string) => {\n  const { data, width, height } = imageData;\n  \n  // Look for QR code corner patterns (simplified detection)\n  const corners = findQRCorners(data, width, height);\n  \n  if (corners.length >= 3) {\n    // If we found corner patterns, try to decode\n    // This is a simplified version - in production, use jsQR library\n    return {\n      data: generateSampleVCard(), // For demo - replace with actual QR decoding\n      location: corners[0]\n    };\n  }\n  \n  return null;\n};\n\n// Find QR corner detection markers\nconst findQRCorners = (data: Uint8ClampedArray, width: number, height: number) => {\n  const corners = [];\n  const threshold = 128;\n  \n  // Simplified corner detection - look for square patterns\n  for (let y = 0; y < height - 20; y += 10) {\n    for (let x = 0; x < width - 20; x += 10) {\n      if (isQRCornerPattern(data, x, y, width, threshold)) {\n        corners.push({ x, y });\n      }\n    }\n  }\n  \n  return corners;\n};\n\n// Check if area contains QR corner pattern\nconst isQRCornerPattern = (data: Uint8ClampedArray, startX: number, startY: number, width: number, threshold: number) => {\n  const patternSize = 7;\n  const pattern = [\n    [1,1,1,1,1,1,1],\n    [1,0,0,0,0,0,1],\n    [1,0,1,1,1,0,1],\n    [1,0,1,1,1,0,1],\n    [1,0,1,1,1,0,1],\n    [1,0,0,0,0,0,1],\n    [1,1,1,1,1,1,1]\n  ];\n  \n  let matches = 0;\n  let total = 0;\n  \n  for (let y = 0; y < patternSize && startY + y < data.length / width / 4; y++) {\n    for (let x = 0; x < patternSize && startX + x < width; x++) {\n      const pixelIndex = ((startY + y) * width + (startX + x)) * 4;\n      if (pixelIndex < data.length) {\n        const brightness = (data[pixelIndex] + data[pixelIndex + 1] + data[pixelIndex + 2]) / 3;\n        const isBlack = brightness < threshold;\n        const expectedBlack = pattern[y][x] === 1;\n        \n        if (isBlack === expectedBlack) matches++;\n        total++;\n      }\n    }\n  }\n  \n  return matches / total > 0.7; // 70% match threshold\n};\n\n// Generate sample vCard for demo (replace with actual QR decoding)\n// const generateSampleVCard = () => {\n//   return `BEGIN:VCARD\n// VERSION:3.0\n// FN:John Doe\n// ORG:V-KEY Solutions\n// TEL:+91 94896 22222\n// EMAIL:john@v-key.in\n// URL:https://www.v-key.in\n// ADR:;;733, Dr. Radhakrishna Road;Tatabad;Coimbatore;641012;India\n// END:VCARD`;\n// };\n\n// Enhanced vCard/MeCard parsing\nconst parseVCardData = (qrText: string): Partial<ParsedContact> => {\n  const contact: Partial<ParsedContact> = {};\n  \n  if (qrText.includes('BEGIN:VCARD')) {\n    // vCard format\n    const lines = qrText.split('\\n').map(line => line.trim()).filter(line => line);\n    \n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const colonIndex = line.indexOf(':');\n        const key = line.substring(0, colonIndex).split(';')[0]; // Handle parameters\n        const value = line.substring(colonIndex + 1).trim();\n        \n        switch (key.toUpperCase()) {\n          case 'FN':\n          case 'N':\n            if (!contact.name && value) {\n              contact.name = value.replace(/;/g, ' ').trim();\n            }\n            break;\n          case 'ORG':\n            contact.company = value;\n            break;\n          case 'EMAIL':\n            contact.email = value;\n            break;\n          case 'TEL':\n            // Clean phone number\n            contact.phone = value.replace(/[^\\d+\\-\\s]/g, '');\n            break;\n          case 'ADR':\n            // Parse address components: PO Box;Extended;Street;City;State;Postal;Country\n            const addressParts = value.split(';').filter(part => part.trim());\n            contact.address = addressParts.join(', ').replace(/,\\s*,/g, ',').trim();\n            break;\n          case 'URL':\n            if (!contact.services) contact.services = '';\n            contact.services += (contact.services ? ', ' : '') + `Website: ${value}`;\n            break;\n          case 'TITLE':\n            if (!contact.services) contact.services = '';\n            contact.services += (contact.services ? ', ' : '') + `Title: ${value}`;\n            break;\n        }\n      }\n    });\n  } else if (qrText.startsWith('MECARD:')) {\n    // MeCard format\n    const data = qrText.substring(7, qrText.length - (qrText.endsWith(';;') ? 2 : 0));\n    const fields = data.split(';').filter(field => field.includes(':'));\n    \n    fields.forEach(field => {\n      const [key, ...valueParts] = field.split(':');\n      const value = valueParts.join(':').trim();\n      \n      switch (key.toUpperCase()) {\n        case 'N':\n          contact.name = value;\n          break;\n        case 'ORG':\n          contact.company = value;\n          break;\n        case 'EMAIL':\n          contact.email = value;\n          break;\n        case 'TEL':\n          contact.phone = value.replace(/[^\\d+\\-\\s]/g, '');\n          break;\n        case 'ADR':\n          contact.address = value.replace(/,/g, ', ');\n          break;\n        case 'URL':\n          if (!contact.services) contact.services = '';\n          contact.services += (contact.services ? ', ' : '') + `Website: ${value}`;\n          break;\n      }\n    });\n  } else if (qrText.includes('http') || qrText.includes('www')) {\n    // Plain URL\n    contact.services = `Website: ${qrText}`;\n  }\n  \n  return contact;\n};\n\nexport default function BulkUploads() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [selectedGroupIds, setSelectedGroupIds] = useState<string[]>([]);\n  const [loadingGroups, setLoadingGroups] = useState(true);\n  \n  // Enhanced camera states\n  const [showCamera, setShowCamera] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment');\n  const [captureCount, setCaptureCount] = useState(0);\n  const [cameraMode, setCameraMode] = useState<'capture' | 'processing'>('capture');\n  const [pendingCaptures, setPendingCaptures] = useState<UploadResult[]>([]);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!user) return;\n    fetchGroups();\n  }, [user]);\n\n  // Cleanup camera stream on component unmount\n  useEffect(() => {\n    return () => {\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [cameraStream]);\n\n  const fetchGroups = async () => {\n    try {\n      const groupsQuery = query(collection(db, \"groups\"), where(\"ownerId\", \"==\", user!.uid));\n      const groupsSnapshot = await getDocs(groupsQuery);\n      const groupsData = groupsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as Group[];\n      setGroups(groupsData);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      toast({\n        title: \"Warning\",\n        description: \"Could not load groups. You can still process cards.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoadingGroups(false);\n    }\n  };\n\n  const startCamera = async () => {\n    try {\n      setCameraError(null);\n      \n      // Stop existing stream if any\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode,\n          width: { ideal: 1920 },\n          height: { ideal: 1080 }\n        }\n      });\n\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (error: any) {\n      console.error('Camera error:', error);\n      let errorMessage = 'Failed to access camera';\n      \n      if (error.name === 'NotAllowedError') {\n        errorMessage = 'Camera permission denied. Please allow camera access.';\n      } else if (error.name === 'NotFoundError') {\n        errorMessage = 'No camera found on this device.';\n      } else if (error.name === 'NotSupportedError') {\n        errorMessage = 'Camera not supported on this device.';\n      }\n      \n      setCameraError(errorMessage);\n      toast({\n        title: \"Camera Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setShowCamera(false);\n    setCameraError(null);\n    setCaptureCount(0);\n    setCameraMode('capture');\n    setPendingCaptures([]);\n  };\n\n  const switchCamera = async () => {\n    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';\n    setFacingMode(newFacingMode);\n    await startCamera();\n  };\n\n  const capturePhoto = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    // Set canvas size to video dimensions\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob\n    canvas.toBlob(async (blob) => {\n      if (!blob) return;\n\n      const newCaptureCount = captureCount + 1;\n      setCaptureCount(newCaptureCount);\n      \n      const timestamp = Date.now();\n      const file = new File([blob], `camera-capture-${newCaptureCount}-${timestamp}.jpg`, {\n        type: 'image/jpeg',\n      });\n\n      // Add to pending captures\n      const newResult: UploadResult = {\n        id: Math.random().toString(36).substr(2, 9),\n        file,\n        status: \"uploading\",\n        isFromCamera: true,\n        captureIndex: newCaptureCount,\n      };\n\n      setPendingCaptures(prev => [...prev, newResult]);\n      \n      toast({\n        title: `Photo ${newCaptureCount} Captured`,\n        description: \"Ready to capture more or process all captures\",\n      });\n    }, 'image/jpeg', 0.9);\n  };\n\n  const processAllCaptures = async () => {\n    if (pendingCaptures.length === 0) return;\n    \n    setCameraMode('processing');\n    setUploading(true);\n    \n    // Add all pending captures to upload results\n    setUploadResults(prev => [...prev, ...pendingCaptures]);\n    \n    // Process each capture\n    for (let i = 0; i < pendingCaptures.length; i++) {\n      const result = pendingCaptures[i];\n      \n      if (i > 0) {\n        await delay(1000); // Delay between processing\n      }\n      \n      await processFile(result);\n    }\n    \n    setUploading(false);\n    setPendingCaptures([]);\n    setCaptureCount(0);\n    setCameraMode('capture');\n    \n    toast({\n      title: \"Processing Complete\",\n      description: `Successfully processed ${pendingCaptures.length} captured images`,\n    });\n  };\n\n  const clearCaptures = () => {\n    setPendingCaptures([]);\n    setCaptureCount(0);\n    toast({\n      title: \"Captures Cleared\",\n      description: \"Ready to capture new photos\",\n    });\n  };\n\n  const processFile = async (result: UploadResult) => {\n    let imageUrl: string | null = null;\n    \n    try {\n      console.log(`Starting processing for file: ${result.file.name}`);\n      \n      // Validate file\n      validateImageFile(result.file);\n\n      // Update status to uploading\n      setUploadResults(prev => prev.map(r => \n        r.id === result.id ? { ...r, status: \"uploading\" } : r\n      ));\n\n      // Upload to Firebase Storage with timestamp to avoid conflicts\n      const timestamp = Date.now();\n      const sanitizedFileName = result.file.name.replace(/[^a-zA-Z0-9.-]/g, '_');\n      const fileName = `${timestamp}-${sanitizedFileName}`;\n      \n      console.log(`Uploading image to storage: ${fileName}`);\n      imageUrl = await uploadToStorage(\n        result.file, \n        `users/${user!.uid}/bulk/${fileName}`\n      );\n\n      console.log(`Image uploaded successfully: ${imageUrl.substring(0, 50)}...`);\n\n      // Update status to processing with image URL\n      setUploadResults(prev => prev.map(r => \n        r.id === result.id ? { ...r, imageUrl, status: \"processing\" } : r\n      ));\n\n      // Wait for image to be fully accessible\n      await delay(1000);\n\n      // Enhanced QR code detection\n      console.log(`Checking for QR codes in ${result.file.name}`);\n      const qrData = await detectQRCode(result.file);\n      \n      let extractedData: ParsedContact;\n      \n      if (qrData && qrData.data) {\n        console.log(`QR code detected: ${qrData.data.substring(0, 100)}...`);\n        \n        // Parse vCard/MeCard data\n        const qrContact = parseVCardData(qrData.data);\n        \n        // Still run OCR to get additional visible information\n        try {\n          const ocrData = await callGeminiAPIWithRetry(result.file, 3);\n          \n          // Merge QR data with OCR data (QR data takes precedence for structured fields)\n          extractedData = {\n            name: qrContact.name || ocrData.name || \"\",\n            company: qrContact.company || ocrData.company || \"\",\n            email: qrContact.email || ocrData.email || \"\",\n            phone: qrContact.phone || ocrData.phone || \"\",\n            address: qrContact.address || ocrData.address || \"\",\n            services: [qrContact.services, ocrData.services].filter(Boolean).join(', ') || \"\",\n          };\n        } catch (ocrError) {\n          console.warn('OCR failed, using QR data only:', ocrError);\n          extractedData = {\n            name: qrContact.name || \"\",\n            company: qrContact.company || \"\",\n            email: qrContact.email || \"\",\n            phone: qrContact.phone || \"\",\n            address: qrContact.address || \"\",\n            services: qrContact.services || \"\",\n          };\n        }\n        \n        console.log(`Combined QR and OCR data for ${result.file.name}:`, extractedData);\n      } else {\n        console.log(`No QR code found, using OCR for ${result.file.name}`);\n        extractedData = await callGeminiAPIWithRetry(result.file, 3);\n      }\n\n      console.log(`Data extracted successfully for ${result.file.name}:`, extractedData);\n\n      // Update status to completed\n      setUploadResults(prev => prev.map(r => \n        r.id === result.id ? { ...r, extractedData, qrData, status: \"completed\" } : r\n      ));\n\n    } catch (error: any) {\n      console.error(`Error processing file ${result.file.name}:`, error);\n      \n      let errorMessage = 'Unknown error occurred';\n      \n      // Enhanced error handling\n      if (error.message?.includes('Failed to read file')) {\n        errorMessage = 'Could not read the image file. Please try a different image.';\n      } else if (error.message?.includes('API key') || error.message?.includes('401')) {\n        errorMessage = 'API key issue. Please check your Gemini API configuration.';\n      } else if (error.message?.includes('429') || error.message?.includes('rate limit')) {\n        errorMessage = 'API rate limit exceeded. Please try again in a few minutes.';\n      } else if (error.message?.includes('403')) {\n        errorMessage = 'API access forbidden. Please check your API key permissions.';\n      } else if (error.message?.includes('timeout') || error.message?.includes('AbortError')) {\n        errorMessage = 'Request timeout. Please try again with a smaller image.';\n      } else if (error.message?.includes('fetch') || error.message?.includes('Network')) {\n        errorMessage = 'Network error. Please check your internet connection and try again.';\n      } else if (error.message?.includes('Invalid file type')) {\n        errorMessage = error.message;\n      } else if (error.message?.includes('File too large')) {\n        errorMessage = error.message;\n      } else if (error.message?.includes('storage')) {\n        errorMessage = 'Storage error. Please check your Firebase configuration.';\n      } else if (error.message?.includes('parse') || error.message?.includes('JSON')) {\n        errorMessage = 'Could not extract data from image. Please try a clearer image.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      setUploadResults(prev => prev.map(r => \n        r.id === result.id ? { ...r, status: \"error\", error: errorMessage } : r\n      ));\n    }\n  };\n\n  const handleFileSelect = async (files: FileList) => {\n    if (files.length > 10) {\n      toast({\n        title: \"Too many files\",\n        description: \"Please select up to 10 images to avoid rate limits and ensure better performance\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate all files first\n    try {\n      Array.from(files).forEach(file => validateImageFile(file));\n    } catch (error: any) {\n      toast({\n        title: \"Invalid file\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    const newResults: UploadResult[] = Array.from(files).map(file => ({\n      id: Math.random().toString(36).substr(2, 9),\n      file,\n      status: \"uploading\",\n    }));\n\n    setUploadResults(prev => [...prev, ...newResults]);\n\n    // Process files sequentially with delays to respect rate limits\n    for (let i = 0; i < newResults.length; i++) {\n      const result = newResults[i];\n      \n      // Add delay between files (except for the first one)\n      if (i > 0) {\n        console.log(`Waiting 2 seconds before processing next file...`);\n        await delay(2000);\n      }\n\n      await processFile(result);\n    }\n\n    setUploading(false);\n    \n    // Show completion toast\n    const completedCount = newResults.filter(r => r.status === 'completed').length;\n    \n    toast({\n      title: \"Processing Complete\",\n      description: `Successfully processed ${completedCount} out of ${newResults.length} files`,\n    });\n  };\n\n  const handleRemoveItem = (id: string) => {\n    setUploadResults(prev => prev.filter(r => r.id !== id));\n  };\n\n  const handleSaveAllContacts = async () => {\n    const completedResults = uploadResults.filter(r => r.status === \"completed\" && r.extractedData);\n    \n    if (completedResults.length === 0) {\n      toast({\n        title: \"No contacts to save\",\n        description: \"Please wait for processing to complete\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      let savedCount = 0;\n      let duplicateCount = 0;\n      let errorCount = 0;\n\n      for (const result of completedResults) {\n        try {\n          const data = result.extractedData!;\n          \n          // Check for duplicates only if email or phone is available\n          if (data.email || data.phone) {\n            const isDupe = await isDuplicateContact(user!.uid, data.email, data.phone);\n            if (isDupe) {\n              duplicateCount++;\n              continue;\n            }\n          }\n\n          // Create contact with selected groups\n          await addDoc(collection(db, \"contacts\"), {\n            firstName: data.name?.split(' ')[0] || \"\",\n            lastName: data.name?.split(' ').slice(1).join(' ') || \"\",\n            phone: data.phone || \"\",\n            email: data.email?.toLowerCase() || \"\",\n            company: data.company || \"\",\n            services: data.services || \"\",\n            address: data.address || \"\",\n            groupIds: selectedGroupIds,\n            ownerId: user!.uid,\n            createdAt: serverTimestamp(),\n            // Add metadata for tracking\n            source: result.isFromCamera ? 'camera' : 'upload',\n            hasQRData: !!result.qrData,\n            qrContent: result.qrData?.data || null,\n          });\n\n          savedCount++;\n        } catch (contactError) {\n          console.error('Error saving individual contact:', contactError);\n          errorCount++;\n        }\n      }\n\n      let successMessage = `Saved ${savedCount} contact${savedCount !== 1 ? 's' : ''}`;\n      if (selectedGroupIds.length > 0) {\n        const groupNames = groups.filter(g => selectedGroupIds.includes(g.id)).map(g => g.name).join(', ');\n        successMessage += ` to group${selectedGroupIds.length > 1 ? 's' : ''}: ${groupNames}`;\n      }\n      if (duplicateCount > 0) {\n        successMessage += `, skipped ${duplicateCount} duplicate${duplicateCount !== 1 ? 's' : ''}`;\n      }\n      if (errorCount > 0) {\n        successMessage += `, ${errorCount} error${errorCount !== 1 ? 's' : ''}`;\n      }\n      \n      toast({\n        title: \"Success\",\n        description: successMessage,\n      });\n\n      // Clear results after saving\n      setUploadResults([]);\n      setSelectedGroupIds([]);\n      \n    } catch (error) {\n      console.error(\"Error saving contacts:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save contacts. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"uploading\":\n      case \"processing\":\n        return (\n          <div className=\"w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center\">\n            <Clock className=\"h-3 w-3 text-yellow-600 animate-spin\" />\n          </div>\n        );\n      case \"completed\":\n        return (\n          <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n            <Check className=\"h-3 w-3 text-green-600\" />\n          </div>\n        );\n      case \"error\":\n        return (\n          <div className=\"w-6 h-6 bg-red-100 rounded-full flex items-center justify-center\">\n            <AlertCircle className=\"h-3 w-3 text-red-600\" />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"uploading\":\n        return \"Uploading...\";\n      case \"processing\":\n        return \"Processing...\";\n      case \"completed\":\n        return \"Processed\";\n      case \"error\":\n        return \"Error\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"uploading\":\n      case \"processing\":\n        return \"bg-yellow-50 text-yellow-700 border-yellow-200\";\n      case \"completed\":\n        return \"bg-green-50 text-green-700 border-green-200\";\n      case \"error\":\n        return \"bg-red-50 text-red-700 border-red-200\";\n      default:\n        return \"bg-gray-50 text-gray-700 border-gray-200\";\n    }\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                <Sparkles className=\"text-white h-6 w-6\" />\n              </div>\n              <div>\n                <h2 className=\"text-3xl font-bold leading-7 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent sm:text-4xl sm:truncate\">\n                  AI Card Scanner\n                </h2>\n                <p className=\"mt-1 text-lg text-gray-600\">Extract data from multiple business cards instantly</p>\n              </div>\n            </div>\n            \n            {/* AI Features Banner */}\n            <div className=\"mt-6 grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-3 bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-xl border border-blue-200\">\n                <Brain className=\"h-8 w-8 text-blue-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-blue-900\">AI-Powered</h3>\n                  <p className=\"text-sm text-blue-700\">Advanced text recognition</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-xl border border-green-200\">\n                <Camera className=\"h-8 w-8 text-green-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-green-900\">Camera Ready</h3>\n                  <p className=\"text-sm text-green-700\">Multiple capture support</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 bg-gradient-to-r from-purple-50 to-violet-50 p-4 rounded-xl border border-purple-200\">\n                <QrCode className=\"h-8 w-8 text-purple-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-purple-900\">QR Support</h3>\n                  <p className=\"text-sm text-purple-700\">vCard & MeCard detection</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 bg-gradient-to-r from-amber-50 to-orange-50 p-4 rounded-xl border border-amber-200\">\n                <CheckCircle2 className=\"h-8 w-8 text-amber-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-amber-900\">Smart Detection</h3>\n                  <p className=\"text-sm text-amber-700\">Automatic duplicate check</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Upload Zone */}\n        <div className=\"mt-8\">\n          <Card className=\"overflow-hidden border-0 shadow-2xl bg-gradient-to-br from-white to-gray-50\">\n            <CardContent className=\"p-0\">\n              {/* Header */}\n              <div className=\"bg-gradient-to-r from-purple-600 to-pink-600 p-6 text-white\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <FileImage className=\"h-6 w-6\" />\n                    <h3 className=\"text-lg font-semibold\">Smart Upload Zone</h3>\n                  </div>\n                  <div className=\"bg-white/20 px-3 py-1 rounded-full text-sm font-medium\">\n                    {uploadResults.length > 0 ? `${uploadResults.length}/10 files` : 'Ready'}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Upload Area */}\n              <div \n                className=\"p-8 border-2 border-dashed border-purple-200 m-6 rounded-2xl hover:border-purple-400 transition-all duration-300 hover:bg-purple-50/50\"\n                onDragOver={(e) => e.preventDefault()}\n                onDrop={(e) => {\n                  e.preventDefault();\n                  const files = e.dataTransfer.files;\n                  if (files.length > 0) handleFileSelect(files);\n                }}\n              >\n                <div className=\"text-center\">\n                  <div className=\"mx-auto w-20 h-20 flex items-center justify-center bg-gradient-to-br from-purple-100 to-pink-100 rounded-2xl mb-6\">\n                    <CloudUpload className=\"text-purple-600 h-10 w-10\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Drop Your Business Cards Here</h3>\n                 <p className=\"text-sm text-gray-500\">drag and drop or Use camera</p>\n                      <p className=\"text-xs text-gray-400 mt-1\">PNG, JPG, WebP up to 20MB each ‚Ä¢ Max 10 files</p>\n                      <p className=\"text-xs text-purple-600 mt-1 flex items-center justify-center\">\n                        {/* <QrCode className=\"h-3 w-3 mr-1\" />\n                        QR codes automatically detected */}\n                      </p>\n                      <p className=\"text-xs text-purple-600 mt-1 flex items-center justify-center\">\n                        {/* <QrCode className=\"h-3 w-3 mr-1\" />\n                        QR codes automatically detected */}\n                      </p>\n                      <p className=\"text-xs text-purple-600 mt-1 flex items-center justify-center\">\n                        {/* <QrCode className=\"h-3 w-3 mr-1\" />\n                        QR codes automatically detected */}\n                      </p>\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                    <Button \n                      onClick={() => {\n                        const input = document.createElement('input');\n                        input.type = 'file';\n                        input.multiple = true;\n                        input.accept = 'image/jpeg,image/png,image/gif,image/webp';\n                        input.onchange = (e) => {\n                          const files = (e.target as HTMLInputElement).files;\n                          if (files) handleFileSelect(files);\n                        };\n                        input.click();\n                      }}\n                      disabled={uploading}\n                      className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50\"\n                    >\n                      <CloudUpload className=\"h-5 w-5 mr-2\" />\n                      {uploading ? 'Processing...' : 'Choose Files'}\n                    </Button>\n                    \n                    <Dialog open={showCamera} onOpenChange={setShowCamera}>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => {\n                            setShowCamera(true);\n                            startCamera();\n                          }}\n                          disabled={uploading}\n                          className=\"border-purple-300 text-purple-600 hover:bg-purple-50 px-8 py-3 rounded-xl font-semibold\"\n                        >\n                          <Camera className=\"h-5 w-5 mr-2\" />\n                          Use Camera\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh]\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center space-x-2\">\n                            <Camera className=\"h-5 w-5\" />\n                            <span>Capture Business Cards</span>\n                            {pendingCaptures.length > 0 && (\n                              <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">\n                                {pendingCaptures.length} captured\n                              </span>\n                            )}\n                          </DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          {cameraError ? (\n                            <div className=\"text-center py-12\">\n                              <CameraOff className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                              <p className=\"text-red-600 mb-4\">{cameraError}</p>\n                              <Button onClick={startCamera} variant=\"outline\">\n                                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                                Try Again\n                              </Button>\n                            </div>\n                          ) : (\n                            <>\n                              <div className=\"relative bg-black rounded-lg overflow-hidden\">\n                                <video\n                                  ref={videoRef}\n                                  autoPlay\n                                  playsInline\n                                  muted\n                                  className=\"w-full h-96 object-cover\"\n                                />\n                                {/* Camera overlay */}\n                                <div className=\"absolute inset-0 pointer-events-none\">\n                                  <div className=\"absolute inset-4 border-2 border-white/50 rounded-lg\">\n                                    <ScanLine className=\"absolute top-2 left-2 h-6 w-6 text-white/75\" />\n                                    <div className=\"absolute top-2 left-1/2 transform -translate-x-1/2 text-white/75 text-sm font-medium\">\n                                      Position card within frame ({captureCount}/10)\n                                    </div>\n                                    {pendingCaptures.length > 0 && (\n                                      <div className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs\">\n                                        {pendingCaptures.length} card{pendingCaptures.length > 1 ? 's' : ''} ready to process\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              {/* Pending captures preview */}\n                              {pendingCaptures.length > 0 && (\n                                <div className=\"bg-gray-50 rounded-lg p-4\">\n                                  <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Captured Photos ({pendingCaptures.length})</h4>\n                                  <div className=\"flex space-x-2 overflow-x-auto\">\n                                    {pendingCaptures.map((capture, index) => (\n                                      <div key={capture.id} className=\"flex-shrink-0 relative\">\n                                        <div className=\"w-16 h-10 bg-gray-200 rounded border-2 border-green-300 flex items-center justify-center\">\n                                          <Camera className=\"h-4 w-4 text-green-600\" />\n                                        </div>\n                                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold\">\n                                          {index + 1}\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {cameraMode === 'capture' ? (\n                                <div className=\"flex justify-center space-x-4\">\n                                  <Button\n                                    onClick={switchCamera}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                  >\n                                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                                    Switch Camera\n                                  </Button>\n                                  <Button\n                                    onClick={capturePhoto}\n                                    className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-8\"\n                                    disabled={!cameraStream || captureCount >= 10}\n                                  >\n                                    <Camera className=\"h-4 w-4 mr-2\" />\n                                    Capture ({captureCount}/10)\n                                  </Button>\n                                  {pendingCaptures.length > 0 && (\n                                    <>\n                                      <Button\n                                        onClick={processAllCaptures}\n                                        className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-6\"\n                                      >\n                                        <ArrowRight className=\"h-4 w-4 mr-2\" />\n                                        Process All ({pendingCaptures.length})\n                                      </Button>\n                                      <Button\n                                        onClick={clearCaptures}\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                      >\n                                        Clear\n                                      </Button>\n                                    </>\n                                  )}\n                                  <Button\n                                    onClick={stopCamera}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                  >\n                                    Cancel\n                                  </Button>\n                                </div>\n                              ) : (\n                                <div className=\"text-center py-8\">\n                                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n                                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Processing Captures</h3>\n                                  <p className=\"text-gray-600\">Please wait while we extract contact information...</p>\n                                </div>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n                    {/* <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-500\">Or drag and drop ‚Ä¢ Use camera</p>\n                      <p className=\"text-xs text-gray-400 mt-1\">PNG, JPG, WebP up to 20MB each ‚Ä¢ Max 10 files</p>\n                      <p className=\"text-xs text-purple-600 mt-1 flex items-center justify-center\">\n                        <QrCode className=\"h-3 w-3 mr-1\" />\n                        QR codes automatically detected\n                      </p>\n                    </div> */}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Processing Results */}\n        {uploadResults.length > 0 && (\n          <div className=\"mt-8\">\n            <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-0\">\n                {/* Results Header */}\n                <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 p-6 text-white\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Brain className=\"h-6 w-6\" />\n                      <h3 className=\"text-lg font-semibold\">AI Processing Results</h3>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">{uploadResults.filter(r => r.status === 'completed').length}</span>\n                        <span className=\"opacity-75\"> / {uploadResults.length} completed</span>\n                      </div>\n                      <Progress \n                        value={(uploadResults.filter(r => r.status === 'completed').length / uploadResults.length) * 100}\n                        className=\"w-24 h-2\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"p-6\">\n                \n                <div className=\"grid grid-cols-1 gap-6 xl:grid-cols-2\">\n                  {uploadResults.map((result) => (\n                    <div key={result.id} className=\"bg-white border-2 border-gray-100 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"flex-shrink-0\">\n                          {result.imageUrl ? (\n                            <div className=\"relative\">\n                              <img \n                                src={result.imageUrl} \n                                alt=\"Business card\" \n                                className=\"w-28 h-18 object-cover rounded-xl shadow-md\"\n                              />\n                              <div className=\"absolute -top-2 -right-2\">\n                                {getStatusIcon(result.status)}\n                              </div>\n                              {result.isFromCamera && (\n                                <div className=\"absolute -top-2 -left-2 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                                  <Camera className=\"h-3 w-3 text-green-600\" />\n                                </div>\n                              )}\n                              {result.qrData && (\n                                <div className=\"absolute -bottom-2 -right-2 w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center\">\n                                  <QrCode className=\"h-3 w-3 text-purple-600\" />\n                                </div>\n                              )}\n                            </div>\n                          ) : (\n                            <div className=\"w-28 h-18 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center relative\">\n                              <CloudUpload className=\"h-8 w-8 text-gray-400\" />\n                              <div className=\"absolute -top-2 -right-2\">\n                                {getStatusIcon(result.status)}\n                              </div>\n                              {result.isFromCamera && (\n                                <div className=\"absolute -top-2 -left-2 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                                  <Camera className=\"h-3 w-3 text-green-600\" />\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <p className=\"text-sm font-semibold text-gray-900 truncate\">\n                              {result.file.name}\n                              {result.isFromCamera && result.captureIndex && (\n                                <span className=\"text-green-600 ml-1 text-xs\">(#{result.captureIndex})</span>\n                              )}\n                              {result.qrData && <span className=\"text-purple-600 ml-1\">QR</span>}\n                            </p>\n                            <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(result.status)}`}>\n                              <span className=\"ml-1\">{getStatusText(result.status)}</span>\n                            </span>\n                          </div>\n                          \n                          {result.status === \"completed\" && result.extractedData && (\n                            <div className=\"space-y-1 text-sm text-gray-600\">\n                              <p><strong>Name:</strong> {result.extractedData.name || \"Not found\"}</p>\n                              <p><strong>Company:</strong> {result.extractedData.company || \"Not found\"}</p>\n                              <p><strong>Email:</strong> {result.extractedData.email || \"Not found\"}</p>\n                              <p><strong>Phone:</strong> {result.extractedData.phone || \"Not found\"}</p>\n                              {result.extractedData.address && (\n                                <p><strong>Address:</strong> {result.extractedData.address}</p>\n                              )}\n                              {result.extractedData.services && (\n                                <p><strong>Services:</strong> {result.extractedData.services}</p>\n                              )}\n                              {result.qrData && (\n                                <div className=\"mt-2 p-2 bg-purple-50 rounded-lg\">\n                                  <p className=\"text-xs text-purple-600 font-medium flex items-center\">\n                                    <QrCode className=\"h-3 w-3 mr-1\" />\n                                    QR Code Data Detected & Parsed\n                                  </p>\n                                  <p className=\"text-xs text-purple-500 mt-1 truncate\">\n                                    {result.qrData.data.substring(0, 80)}...\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          {result.status === \"error\" && (\n                            <div className=\"text-sm text-red-600\">\n                              <p><strong>Error:</strong> {result.error}</p>\n                            </div>\n                          )}\n                          \n                          <div className=\"mt-3 flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRemoveItem(result.id)}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <X className=\"h-4 w-4 mr-1\" />\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Group Assignment Section */}\n                {!loadingGroups && groups.length > 0 && (\n                  <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                    <h4 className=\"font-medium text-gray-900 mb-3 flex items-center\">\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Assign to Groups (Optional)\n                    </h4>\n                    <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                      {groups.map(group => (\n                        <div key={group.id} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={`bulk-group-${group.id}`}\n                            checked={selectedGroupIds.includes(group.id)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setSelectedGroupIds(prev => [...prev, group.id]);\n                              } else {\n                                setSelectedGroupIds(prev => prev.filter(id => id !== group.id));\n                              }\n                            }}\n                          />\n                          <label htmlFor={`bulk-group-${group.id}`} className=\"text-sm cursor-pointer\">\n                            {group.name}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-6 flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-500\">\n                    <span>\n                      {uploadResults.filter(r => r.status === \"completed\").length} of {uploadResults.length} cards processed\n                    </span>\n                    {uploadResults.some(r => r.qrData) && (\n                      <span className=\"block text-xs text-purple-600 flex items-center mt-1\">\n                        <QrCode className=\"h-3 w-3 mr-1\" />\n                        {uploadResults.filter(r => r.qrData).length} with QR code data\n                      </span>\n                    )}\n                    {uploadResults.some(r => r.isFromCamera) && (\n                      <span className=\"block text-xs text-green-600 flex items-center mt-1\">\n                        <Camera className=\"h-3 w-3 mr-1\" />\n                        {uploadResults.filter(r => r.isFromCamera).length} from camera\n                      </span>\n                    )}\n                    {selectedGroupIds.length > 0 && (\n                      <span className=\"block text-xs text-blue-600\">\n                        Will be assigned to {selectedGroupIds.length} group{selectedGroupIds.length !== 1 ? 's' : ''}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-3\">\n                    <Button\n                      onClick={() => {\n                        setUploadResults([]);\n                        setSelectedGroupIds([]);\n                      }}\n                      variant=\"outline\"\n                      disabled={uploadResults.length === 0}\n                    >\n                      Clear All\n                    </Button>\n                    <Button\n                      onClick={handleSaveAllContacts}\n                      disabled={uploadResults.filter(r => r.status === \"completed\").length === 0}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save All Contacts ({uploadResults.filter(r => r.status === \"completed\").length})\n                    </Button>\n                  </div>\n                </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Hidden canvas for camera capture */}\n        <canvas ref={canvasRef} className=\"hidden\" />\n      </div>\n    </div>\n  );\n}","size_bytes":53008},"client/src/pages/BulkUploads/EnhancedBulkUploads.tsx":{"content":"import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, addDoc, query, where, getDocs, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { processMultipleBusinessCards, validateImageFile, type MultiCardResult } from \"@/utils/multiCardOcr\";\nimport { uploadToStorage } from \"@/utils/upload\";\nimport { isDuplicateContact } from \"@/utils/duplicate\";\nimport type { ParsedContact } from \"@/utils/parse\";\nimport { useUsageLimits } from \"@/hooks/useUsageLimits\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CameraCapture from \"@/components/CameraCapture\";\nimport UsageLimitModal from \"@/components/UsageLimitModal\";\nimport { \n  Upload, \n  Loader2, \n  CheckCircle, \n  XCircle, \n  Users, \n  FileText, \n  Camera,\n  AlertTriangle,\n  Eye,\n  Edit,\n  Save,\n  X,\n  Smartphone,\n  Sparkles,\n  Zap,\n  CloudUpload,\n  Check,\n  Clock,\n  Brain,\n  FileImage,\n  AlertCircle,\n  CheckCircle2,\n  QrCode,\n  ScanLine,\n  CameraOff,\n  RotateCcw,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface ProcessedCard extends ParsedContact {\n  id: string;\n  status: 'success' | 'error' | 'duplicate';\n  error?: string;\n  saved?: boolean;\n  isFromCamera?: boolean;\n  captureIndex?: number;\n  qrCodes?: { type: string; data: string }[];\n  imageUrl?: string;\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  ownerId: string;\n}\n\ninterface UploadResult {\n  id: string;\n  file: File;\n  imageUrl?: string;\n  status: \"uploading\" | \"processing\" | \"completed\" | \"error\";\n  error?: string;\n  isFromCamera?: boolean;\n  captureIndex?: number;\n}\n\n// Helper function to add delay between operations\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport default function EnhancedBulkUploads() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { usage, limits, hasActiveSubscription, canUseAIScan, loading: limitsLoading, refreshUsage } = useUsageLimits();\n  \n  const [files, setFiles] = useState<File[]>([]);\n  const [processing, setProcessing] = useState(false);\n  const [processed, setProcessed] = useState<ProcessedCard[]>([]);\n  const [progress, setProgress] = useState(0);\n  const [currentFile, setCurrentFile] = useState(\"\");\n  const [showResults, setShowResults] = useState(false);\n  const [editingCard, setEditingCard] = useState<ProcessedCard | null>(null);\n  const [editData, setEditData] = useState<ParsedContact>({});\n  const [saving, setSaving] = useState<string | null>(null);\n  const [showLimitModal, setShowLimitModal] = useState(false);\n  \n  // Enhanced camera and upload states\n  const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [selectedGroupIds, setSelectedGroupIds] = useState<string[]>([]);\n  const [loadingGroups, setLoadingGroups] = useState(true);\n  const [showCamera, setShowCamera] = useState(false);\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment');\n  const [captureCount, setCaptureCount] = useState(0);\n  const [cameraMode, setCameraMode] = useState<'capture' | 'processing'>('capture');\n  const [pendingCaptures, setPendingCaptures] = useState<UploadResult[]>([]);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!user) return;\n    fetchGroups();\n  }, [user]);\n\n  // Cleanup camera stream on component unmount\n  useEffect(() => {\n    return () => {\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [cameraStream]);\n\n  const fetchGroups = async () => {\n    try {\n      const groupsQuery = query(collection(db, \"groups\"), where(\"ownerId\", \"==\", user!.uid));\n      const groupsSnapshot = await getDocs(groupsQuery);\n      const groupsData = groupsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as Group[];\n      setGroups(groupsData);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      toast({\n        title: \"Warning\",\n        description: \"Could not load groups. You can still process cards.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoadingGroups(false);\n    }\n  };\n\n  const startCamera = async () => {\n    try {\n      setCameraError(null);\n      \n      // Stop existing stream if any\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode,\n          width: { ideal: 1920 },\n          height: { ideal: 1080 }\n        }\n      });\n\n      setCameraStream(stream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (error: any) {\n      console.error('Camera error:', error);\n      let errorMessage = 'Failed to access camera';\n      \n      if (error.name === 'NotAllowedError') {\n        errorMessage = 'Camera permission denied. Please allow camera access.';\n      } else if (error.name === 'NotFoundError') {\n        errorMessage = 'No camera found on this device.';\n      } else if (error.name === 'NotSupportedError') {\n        errorMessage = 'Camera not supported on this device.';\n      }\n      \n      setCameraError(errorMessage);\n      toast({\n        title: \"Camera Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setShowCamera(false);\n    setCameraError(null);\n    setCaptureCount(0);\n    setCameraMode('capture');\n    setPendingCaptures([]);\n  };\n\n  const switchCamera = async () => {\n    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';\n    setFacingMode(newFacingMode);\n    await startCamera();\n  };\n\n  const capturePhoto = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    // Set canvas size to video dimensions\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob\n    canvas.toBlob(async (blob) => {\n      if (!blob) return;\n\n      const newCaptureCount = captureCount + 1;\n      setCaptureCount(newCaptureCount);\n      \n      const timestamp = Date.now();\n      const file = new File([blob], `camera-capture-${newCaptureCount}-${timestamp}.jpg`, {\n        type: 'image/jpeg',\n      });\n\n      // Add to pending captures\n      const newResult: UploadResult = {\n        id: Math.random().toString(36).substr(2, 9),\n        file,\n        status: \"uploading\",\n        isFromCamera: true,\n        captureIndex: newCaptureCount,\n      };\n\n      setPendingCaptures(prev => [...prev, newResult]);\n      \n      toast({\n        title: `Photo ${newCaptureCount} Captured`,\n        description: \"Ready to capture more or process all captures\",\n      });\n    }, 'image/jpeg', 0.9);\n  };\n\n  const processAllCaptures = async () => {\n    if (pendingCaptures.length === 0) return;\n    \n    setCameraMode('processing');\n    setUploading(true);\n    \n    // Convert captures to files array\n    const captureFiles = pendingCaptures.map(capture => capture.file);\n    setFiles(prev => [...prev, ...captureFiles]);\n    \n    // Start processing\n    await processFiles();\n    \n    setUploading(false);\n    setPendingCaptures([]);\n    setCaptureCount(0);\n    setCameraMode('capture');\n    stopCamera();\n    \n    toast({\n      title: \"Processing Complete\",\n      description: `Successfully processed ${pendingCaptures.length} captured images`,\n    });\n  };\n\n  const clearCaptures = () => {\n    setPendingCaptures([]);\n    setCaptureCount(0);\n    toast({\n      title: \"Captures Cleared\",\n      description: \"Ready to capture new photos\",\n    });\n  };\n\n  const checkUsageLimit = () => {\n    if (!canUseAIScan) {\n      setShowLimitModal(true);\n      return false;\n    }\n    return true;\n  };\n\n  const handleFileSelect = useCallback((selectedFiles: FileList | null) => {\n    if (!selectedFiles) return;\n    \n    const fileArray = Array.from(selectedFiles);\n    const validFiles: File[] = [];\n    \n    fileArray.forEach(file => {\n      try {\n        validateImageFile(file);\n        validFiles.push(file);\n      } catch (error: any) {\n        toast({\n          title: \"Invalid File\",\n          description: `${file.name}: ${error.message}`,\n          variant: \"destructive\",\n        });\n      }\n    });\n    \n    setFiles(prev => [...prev, ...validFiles]);\n  }, [toast]);\n\n  const removeFile = (index: number) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const processFiles = async () => {\n    if (!user || files.length === 0) return;\n    \n    if (!checkUsageLimit()) {\n      return;\n    }\n    \n    setProcessing(true);\n    setProgress(0);\n    const results: ProcessedCard[] = [];\n    \n    try {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        setCurrentFile(file.name);\n        setProgress((i / files.length) * 100);\n        \n        try {\n          console.log(`Processing file ${i + 1}/${files.length}: ${file.name}`);\n          \n          // Upload to Firebase Storage first\n          const timestamp = Date.now();\n          const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');\n          const fileName = `${timestamp}-${sanitizedFileName}`;\n          const imageUrl = await uploadToStorage(\n            file, \n            `users/${user!.uid}/bulk/${fileName}`\n          );\n\n          // Process with multi-card detection\n          const result: MultiCardResult = await processMultipleBusinessCards(file);\n          \n          // Process each detected card\n          result.cards.forEach((card, cardIndex) => {\n            const processedCard: ProcessedCard = {\n              ...card,\n              id: `${file.name}_card_${cardIndex + 1}`,\n              status: 'success',\n              imageUrl,\n              isFromCamera: file.name.includes('camera-capture')\n            };\n            results.push(processedCard);\n          });\n          \n          // Add errors if any\n          if (result.errors.length > 0) {\n            result.errors.forEach((error, errorIndex) => {\n              results.push({\n                id: `${file.name}_error_${errorIndex}`,\n                status: 'error',\n                error: error,\n                imageUrl\n              });\n            });\n          }\n          \n          console.log(`Successfully processed ${result.totalProcessed} cards from ${file.name}`);\n          \n        } catch (error: any) {\n          console.error(`Error processing ${file.name}:`, error);\n          results.push({\n            id: `${file.name}_failed`,\n            status: 'error',\n            error: error.message || \"Failed to process image\"\n          });\n        }\n\n        // Add delay between files\n        if (i < files.length - 1) {\n          await delay(1000);\n        }\n      }\n      \n      setProgress(100);\n      setProcessed(results);\n      setShowResults(true);\n      \n      const successCount = results.filter(r => r.status === 'success').length;\n      const errorCount = results.filter(r => r.status === 'error').length;\n      \n      toast({\n        title: \"Processing Complete\",\n        description: `Successfully processed ${successCount} cards${errorCount > 0 ? `, ${errorCount} errors` : ''}`,\n      });\n      \n    } catch (error: any) {\n      console.error(\"Bulk processing error:\", error);\n      toast({\n        title: \"Processing Failed\",\n        description: error.message || \"Failed to process files\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n      setCurrentFile(\"\");\n    }\n  };\n\n  const saveContact = async (card: ProcessedCard) => {\n    if (!user) return;\n    \n    setSaving(card.id);\n    \n    try {\n      // Check for duplicates\n      if (card.email || card.phones?.length) {\n        const isDupe = await isDuplicateContact(\n          user.uid, \n          card.email, \n          card.phones?.[0] || \"\"\n        );\n        if (isDupe) {\n          toast({\n            title: \"Duplicate Contact\",\n            description: `${card.name || 'Contact'} already exists`,\n            variant: \"destructive\",\n          });\n          setSaving(null);\n          return;\n        }\n      }\n\n      await addDoc(collection(db, \"contacts\"), {\n        firstName: card.name?.split(' ')[0] || \"\",\n        lastName: card.name?.split(' ').slice(1).join(' ') || \"\",\n        phone: card.phones?.[0] || card.landlines?.[0] || \"\",\n        email: card.email?.toLowerCase() || \"\",\n        company: card.company || \"\",\n        services: card.services || \"\",\n        address: card.address || \"\",\n        groupIds: selectedGroupIds,\n        ownerId: user.uid,\n        createdAt: serverTimestamp(),\n        source: card.isFromCamera ? 'camera' : 'bulk_scan',\n        hasQRData: !!(card.qrCodes && card.qrCodes.length > 0),\n        qrContent: card.qrCodes?.[0]?.data || null,\n      });\n      \n      setProcessed(prev => \n        prev.map(p => \n          p.id === card.id ? { ...p, saved: true } : p\n        )\n      );\n      \n      toast({\n        title: \"Contact Saved\",\n        description: `${card.name || 'Contact'} has been saved successfully`,\n      });\n      \n      // Refresh usage after saving\n      await refreshUsage();\n      \n    } catch (error) {\n      console.error(\"Error saving contact:\", error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save contact\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(null);\n    }\n  };\n\n  const saveAllContacts = async () => {\n    if (!user) return;\n    \n    const unsavedCards = processed.filter(card => card.status === 'success' && !card.saved);\n    \n    let savedCount = 0;\n    let duplicateCount = 0;\n    let errorCount = 0;\n\n    for (const card of unsavedCards) {\n      try {\n        // Check for duplicates\n        if (card.email || card.phones?.length) {\n          const isDupe = await isDuplicateContact(\n            user.uid, \n            card.email, \n            card.phones?.[0] || \"\"\n          );\n          if (isDupe) {\n            duplicateCount++;\n            continue;\n          }\n        }\n\n        await addDoc(collection(db, \"contacts\"), {\n          firstName: card.name?.split(' ')[0] || \"\",\n          lastName: card.name?.split(' ').slice(1).join(' ') || \"\",\n          phone: card.phones?.[0] || card.landlines?.[0] || \"\",\n          email: card.email?.toLowerCase() || \"\",\n          company: card.company || \"\",\n          services: card.services || \"\",\n          address: card.address || \"\",\n          groupIds: selectedGroupIds,\n          ownerId: user.uid,\n          createdAt: serverTimestamp(),\n          source: card.isFromCamera ? 'camera' : 'bulk_scan',\n          hasQRData: !!(card.qrCodes && card.qrCodes.length > 0),\n          qrContent: card.qrCodes?.[0]?.data || null,\n        });\n\n        savedCount++;\n      } catch (contactError) {\n        console.error('Error saving individual contact:', contactError);\n        errorCount++;\n      }\n    }\n\n    let successMessage = `Saved ${savedCount} contact${savedCount !== 1 ? 's' : ''}`;\n    if (selectedGroupIds.length > 0) {\n      const groupNames = groups.filter(g => selectedGroupIds.includes(g.id)).map(g => g.name).join(', ');\n      successMessage += ` to group${selectedGroupIds.length > 1 ? 's' : ''}: ${groupNames}`;\n    }\n    if (duplicateCount > 0) {\n      successMessage += `, skipped ${duplicateCount} duplicate${duplicateCount !== 1 ? 's' : ''}`;\n    }\n    if (errorCount > 0) {\n      successMessage += `, ${errorCount} error${errorCount !== 1 ? 's' : ''}`;\n    }\n    \n    toast({\n      title: \"Success\",\n      description: successMessage,\n    });\n\n    // Update saved status\n    setProcessed(prev => \n      prev.map(p => \n        p.status === 'success' && !p.saved ? { ...p, saved: true } : p\n      )\n    );\n    \n    // Refresh usage after saving all\n    await refreshUsage();\n  };\n\n  const handleEditCard = (card: ProcessedCard) => {\n    setEditingCard(card);\n    setEditData({ ...card });\n  };\n\n  const saveEditedCard = () => {\n    if (!editingCard) return;\n    \n    setProcessed(prev =>\n      prev.map(p =>\n        p.id === editingCard.id ? { ...p, ...editData } : p\n      )\n    );\n    \n    setEditingCard(null);\n    setEditData({});\n    \n    toast({\n      title: \"Changes Saved\",\n      description: \"Contact information updated successfully\",\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"uploading\":\n      case \"processing\":\n        return (\n          <div className=\"w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center\">\n            <Clock className=\"h-3 w-3 text-yellow-600 animate-spin\" />\n          </div>\n        );\n      case \"completed\":\n      case \"success\":\n        return (\n          <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n            <Check className=\"h-3 w-3 text-green-600\" />\n          </div>\n        );\n      case \"error\":\n        return (\n          <div className=\"w-6 h-6 bg-red-100 rounded-full flex items-center justify-center\">\n            <AlertCircle className=\"h-3 w-3 text-red-600\" />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"uploading\":\n      case \"processing\":\n        return \"bg-yellow-50 text-yellow-700 border-yellow-200\";\n      case \"completed\":\n      case \"success\":\n        return \"bg-green-50 text-green-700 border-green-200\";\n      case \"error\":\n        return \"bg-red-50 text-red-700 border-red-200\";\n      default:\n        return \"bg-gray-50 text-gray-700 border-gray-200\";\n    }\n  };\n\n  if (limitsLoading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (showResults) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900\">Processing Results</h2>\n              <p className=\"text-gray-600\">\n                Found {processed.filter(p => p.status === 'success').length} business cards\n              </p>\n            </div>\n            <div className=\"flex space-x-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowResults(false);\n                  setProcessed([]);\n                  setFiles([]);\n                }}\n              >\n                Process More\n              </Button>\n              <Button onClick={saveAllContacts}>\n                Save All Contacts\n              </Button>\n            </div>\n          </div>\n\n          {/* Group Assignment Section */}\n          {!loadingGroups && groups.length > 0 && (\n            <Card className=\"mb-6\">\n              <CardContent className=\"pt-6\">\n                <h4 className=\"font-medium text-gray-900 mb-3 flex items-center\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Assign to Groups (Optional)\n                </h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n                  {groups.map(group => (\n                    <div key={group.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`group-${group.id}`}\n                        checked={selectedGroupIds.includes(group.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedGroupIds(prev => [...prev, group.id]);\n                          } else {\n                            setSelectedGroupIds(prev => prev.filter(id => id !== group.id));\n                          }\n                        }}\n                      />\n                      <label htmlFor={`group-${group.id}`} className=\"text-sm cursor-pointer\">\n                        {group.name}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"grid grid-cols-1 gap-6\">\n            {processed.map((card, index) => (\n              <Card key={card.id} className={`${\n                card.status === 'error' ? 'border-red-200 bg-red-50' : \n                card.saved ? 'border-green-200 bg-green-50' : 'border-gray-200'\n              }`}>\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center text-lg\">\n                      {card.status === 'error' ? (\n                        <XCircle className=\"h-5 w-5 text-red-500 mr-2\" />\n                      ) : card.saved ? (\n                        <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                      ) : (\n                        <Camera className=\"h-5 w-5 text-blue-500 mr-2\" />\n                      )}\n                      {card.status === 'error' ? 'Processing Error' : card.name || 'Unnamed Contact'}\n                      {card.isFromCamera && (\n                        <span className=\"ml-2 text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                          Camera\n                        </span>\n                      )}\n                      {card.qrCodes && card.qrCodes.length > 0 && (\n                        <span className=\"ml-2 text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full\">\n                          QR\n                        </span>\n                      )}\n                    </CardTitle>\n                    {card.status === 'success' && !card.saved && (\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditCard(card)}\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => saveContact(card)}\n                          disabled={saving === card.id}\n                        >\n                          {saving === card.id ? (\n                            <Loader2 className=\"h-4 w-4 mr-1 animate-spin\" />\n                          ) : (\n                            <Save className=\"h-4 w-4 mr-1\" />\n                          )}\n                          Save\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {card.status === 'error' ? (\n                    <div className=\"text-red-600\">\n                      <AlertTriangle className=\"h-4 w-4 inline mr-2\" />\n                      {card.error}\n                    </div>\n                  ) : (\n                    <div className=\"flex space-x-4\">\n                      {card.imageUrl && (\n                        <div className=\"flex-shrink-0\">\n                          <img \n                            src={card.imageUrl} \n                            alt=\"Business card\" \n                            className=\"w-32 h-20 object-cover rounded-lg shadow-md\"\n                          />\n                        </div>\n                      )}\n                      <div className=\"flex-1 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-500\">Company</Label>\n                          <p className=\"mt-1\">{card.company || \"Not provided\"}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-500\">Email</Label>\n                          <p className=\"mt-1\">{card.email || \"Not provided\"}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-500\">Phone Numbers</Label>\n                          <p className=\"mt-1\">\n                            {card.phones && card.phones.length > 0 \n                              ? card.phones.join(\", \") \n                              : \"Not provided\"}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-500\">Landlines</Label>\n                          <p className=\"mt-1\">\n                            {card.landlines && card.landlines.length > 0 \n                              ? card.landlines.join(\", \") \n                              : \"Not provided\"}\n                          </p>\n                        </div>\n                        {card.services && (\n                          <div className=\"md:col-span-2\">\n                            <Label className=\"text-sm font-medium text-gray-500\">Services/Position</Label>\n                            <p className=\"mt-1\">{card.services}</p>\n                          </div>\n                        )}\n                        {card.address && (\n                          <div className=\"md:col-span-2\">\n                            <Label className=\"text-sm font-medium text-gray-500\">Address</Label>\n                            <p className=\"mt-1\">{card.address}</p>\n                          </div>\n                        )}\n                        {card.qrCodes && card.qrCodes.length > 0 && (\n                          <div className=\"md:col-span-2\">\n                            <Label className=\"text-sm font-medium text-gray-500\">QR Code Data</Label>\n                            <div className=\"mt-1 space-y-2\">\n                              {card.qrCodes.map((qr, idx) => (\n                                <div key={idx} className=\"bg-purple-100 p-2 rounded text-sm\">\n                                  <span className=\"font-medium capitalize\">{qr.type}:</span> {qr.data}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingCard} onOpenChange={() => setEditingCard(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Contact Information</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-name\">Name</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={editData.name || \"\"}\n                  onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-company\">Company</Label>\n                <Input\n                  id=\"edit-company\"\n                  value={editData.company || \"\"}\n                  onChange={(e) => setEditData(prev => ({ ...prev, company: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-email\">Email</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={editData.email || \"\"}\n                  onChange={(e) => setEditData(prev => ({ ...prev, email: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-phones\">Phone Numbers (comma-separated)</Label>\n                <Input\n                  id=\"edit-phones\"\n                  value={editData.phones?.join(\", \") || \"\"}\n                  onChange={(e) => setEditData(prev => ({ \n                    ...prev, \n                    phones: e.target.value.split(\",\").map(p => p.trim()).filter(p => p)\n                  }))}\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"edit-services\">Services/Position</Label>\n                <Textarea\n                  id=\"edit-services\"\n                  value={editData.services || \"\"}\n                  onChange={(e) => setEditData(prev => ({ ...prev, services: e.target.value }))}\n                  rows={3}\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"edit-address\">Address</Label>\n                <Textarea\n                  id=\"edit-address\"\n                  value={editData.address || \"\"}\n                  onChange={(e) => setEditData(prev => ({ ...prev, address: e.target.value }))}\n                  rows={2}\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <Button variant=\"outline\" onClick={() => setEditingCard(null)}>\n                Cancel\n              </Button>\n              <Button onClick={saveEditedCard}>\n                Save Changes\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg\">\n              <Sparkles className=\"text-white h-6 w-6\" />\n            </div>\n            <div>\n              <h2 className=\"text-3xl font-bold leading-7 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent sm:text-4xl sm:truncate\">\n                AI Business Card Scanner\n              </h2>\n              <p className=\"mt-1 text-lg text-gray-600\">\n                Extract data from multiple business cards with advanced AI detection\n              </p>\n            </div>\n          </div>\n          \n          {/* AI Features Banner */}\n          <div className=\"mt-6 grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center space-x-3 bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-xl border border-blue-200\">\n              <Brain className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h3 className=\"font-semibold text-blue-900\">AI-Powered</h3>\n                <p className=\"text-sm text-blue-700\">Advanced text recognition</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-xl border border-green-200\">\n              <Camera className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <h3 className=\"font-semibold text-green-900\">Multi-Card Detection</h3>\n                <p className=\"text-sm text-green-700\">Process multiple cards at once</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-gradient-to-r from-purple-50 to-violet-50 p-4 rounded-xl border border-purple-200\">\n              <QrCode className=\"h-8 w-8 text-purple-600\" />\n              <div>\n                <h3 className=\"font-semibold text-purple-900\">QR Support</h3>\n                <p className=\"text-sm text-purple-700\">vCard & MeCard detection</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3 bg-gradient-to-r from-amber-50 to-orange-50 p-4 rounded-xl border border-amber-200\">\n              <CheckCircle2 className=\"h-8 w-8 text-amber-600\" />\n              <div>\n                <h3 className=\"font-semibold text-amber-900\">Smart Detection</h3>\n                <p className=\"text-sm text-amber-700\">Automatic duplicate check</p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Usage Status */}\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200 mt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Zap className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium text-blue-900\">\n                    {hasActiveSubscription ? 'Premium Plan Active' : 'Free Plan'}\n                  </p>\n                  <p className=\"text-sm text-blue-700\">\n                    {hasActiveSubscription \n                      ? 'Unlimited AI scans available' \n                      : `${usage.aiScansCount}/${limits.aiScans} AI scans used`\n                    }\n                  </p>\n                </div>\n              </div>\n              {!canUseAIScan && (\n                <Button \n                  size=\"sm\" \n                  onClick={() => setShowLimitModal(true)}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600\"\n                >\n                  Upgrade Now\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Upload Zone */}\n        <Card className=\"overflow-hidden border-0 shadow-2xl bg-gradient-to-br from-white to-gray-50 mb-8\">\n          <CardContent className=\"p-0\">\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-purple-600 to-pink-600 p-6 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileImage className=\"h-6 w-6\" />\n                  <h3 className=\"text-lg font-semibold\">Smart Upload Zone</h3>\n                </div>\n                <div className=\"bg-white/20 px-3 py-1 rounded-full text-sm font-medium\">\n                  {files.length > 0 ? `${files.length}/10 files` : 'Ready'}\n                </div>\n              </div>\n            </div>\n            \n            {/* Upload Area */}\n            <div \n              className=\"p-8 border-2 border-dashed border-purple-200 m-6 rounded-2xl hover:border-purple-400 transition-all duration-300 hover:bg-purple-50/50\"\n              onDragOver={(e) => e.preventDefault()}\n              onDrop={(e) => {\n                e.preventDefault();\n                if (checkUsageLimit()) {\n                  handleFileSelect(e.dataTransfer.files);\n                }\n              }}\n            >\n              <div className=\"text-center\">\n                <div className=\"mx-auto w-20 h-20 flex items-center justify-center bg-gradient-to-br from-purple-100 to-pink-100 rounded-2xl mb-6\">\n                  <CloudUpload className=\"text-purple-600 h-10 w-10\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Drop Your Business Cards Here</h3>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n                  <Button \n                    onClick={() => {\n                      if (checkUsageLimit()) {\n                        const input = document.createElement('input');\n                        input.type = 'file';\n                        input.multiple = true;\n                        input.accept = 'image/jpeg,image/png,image/gif,image/webp';\n                        input.onchange = (e) => {\n                          const files = (e.target as HTMLInputElement).files;\n                          if (files) handleFileSelect(files);\n                        };\n                        input.click();\n                      }\n                    }}\n                    disabled={processing}\n                    className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50\"\n                  >\n                    <CloudUpload className=\"h-5 w-5 mr-2\" />\n                    {processing ? 'Processing...' : 'Choose Files'}\n                  </Button>\n                  \n                  <Dialog open={showCamera} onOpenChange={setShowCamera}>\n                    <DialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => {\n                          if (checkUsageLimit()) {\n                            setShowCamera(true);\n                            startCamera();\n                          }\n                        }}\n                        disabled={processing}\n                        className=\"border-purple-300 text-purple-600 hover:bg-purple-50 px-8 py-3 rounded-xl font-semibold\"\n                      >\n                        <Camera className=\"h-5 w-5 mr-2\" />\n                        Use Camera\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[900px] max-h-[90vh]\">\n                      <DialogHeader>\n                        <DialogTitle className=\"flex items-center space-x-2\">\n                          <Camera className=\"h-5 w-5\" />\n                          <span>Capture Business Cards</span>\n                          {pendingCaptures.length > 0 && (\n                            <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">\n                              {pendingCaptures.length} captured\n                            </span>\n                          )}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        {cameraError ? (\n                          <div className=\"text-center py-12\">\n                            <CameraOff className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                            <p className=\"text-red-600 mb-4\">{cameraError}</p>\n                            <Button onClick={startCamera} variant=\"outline\">\n                              <RotateCcw className=\"h-4 w-4 mr-2\" />\n                              Try Again\n                            </Button>\n                          </div>\n                        ) : (\n                          <>\n                            <div className=\"relative bg-black rounded-lg overflow-hidden\">\n                              <video\n                                ref={videoRef}\n                                autoPlay\n                                playsInline\n                                muted\n                                className=\"w-full h-96 object-cover\"\n                              />\n                              {/* Camera overlay */}\n                              <div className=\"absolute inset-0 pointer-events-none\">\n                                <div className=\"absolute inset-4 border-2 border-white/50 rounded-lg\">\n                                  <ScanLine className=\"absolute top-2 left-2 h-6 w-6 text-white/75\" />\n                                  <div className=\"absolute top-2 left-1/2 transform -translate-x-1/2 text-white/75 text-sm font-medium\">\n                                    Position card within frame ({captureCount}/10)\n                                  </div>\n                                  {pendingCaptures.length > 0 && (\n                                    <div className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-white/75 text-xs\">\n                                      {pendingCaptures.length} card{pendingCaptures.length > 1 ? 's' : ''} ready to process\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            \n                            {/* Pending captures preview */}\n                            {pendingCaptures.length > 0 && (\n                              <div className=\"bg-gray-50 rounded-lg p-4\">\n                                <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Captured Photos ({pendingCaptures.length})</h4>\n                                <div className=\"flex space-x-2 overflow-x-auto\">\n                                  {pendingCaptures.map((capture, index) => (\n                                    <div key={capture.id} className=\"flex-shrink-0 relative\">\n                                      <div className=\"w-16 h-10 bg-gray-200 rounded border-2 border-green-300 flex items-center justify-center\">\n                                        <Camera className=\"h-4 w-4 text-green-600\" />\n                                      </div>\n                                      <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold\">\n                                        {index + 1}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                            \n                            {cameraMode === 'capture' ? (\n                              <div className=\"flex justify-center space-x-4\">\n                                <Button\n                                  onClick={switchCamera}\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                >\n                                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                                  Switch Camera\n                                </Button>\n                                <Button\n                                  onClick={capturePhoto}\n                                  className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-8\"\n                                  disabled={!cameraStream || captureCount >= 10}\n                                >\n                                  <Camera className=\"h-4 w-4 mr-2\" />\n                                  Capture ({captureCount}/10)\n                                </Button>\n                                {pendingCaptures.length > 0 && (\n                                  <>\n                                    <Button\n                                      onClick={processAllCaptures}\n                                      className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-6\"\n                                    >\n                                      <ArrowRight className=\"h-4 w-4 mr-2\" />\n                                      Process All ({pendingCaptures.length})\n                                    </Button>\n                                    <Button\n                                      onClick={clearCaptures}\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                    >\n                                      Clear\n                                    </Button>\n                                  </>\n                                )}\n                                <Button\n                                  onClick={stopCamera}\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            ) : (\n                              <div className=\"text-center py-8\">\n                                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n                                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Processing Captures</h3>\n                                <p className=\"text-gray-600\">Please wait while we extract contact information...</p>\n                              </div>\n                            )}\n                          </>\n                        )}\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n                \n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-sm text-gray-500\">Or drag and drop files</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">PNG, JPG, WebP up to 10MB each ‚Ä¢ Max 10 files</p>\n                  <p className=\"text-xs text-purple-600 mt-1 flex items-center justify-center\">\n                    <QrCode className=\"h-3 w-3 mr-1\" />\n                    QR codes automatically detected\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Selected Files */}\n        {files.length > 0 && (\n          <Card className=\"mb-8 border-0 shadow-xl bg-gradient-to-br from-white to-gray-50\">\n            <CardContent className=\"p-0\">\n              <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 p-6 text-white\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <FileText className=\"h-6 w-6\" />\n                    <h3 className=\"text-lg font-semibold\">Selected Files ({files.length})</h3>\n                  </div>\n                  <div className=\"text-sm opacity-90\">\n                    Ready for processing\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"space-y-2\">\n                  {files.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                      <div className=\"flex items-center\">\n                        <Camera className=\"h-4 w-4 text-gray-500 mr-2\" />\n                        <span className=\"text-sm font-medium\">{file.name}</span>\n                        <span className=\"text-xs text-gray-500 ml-2\">\n                          ({(file.size / 1024 / 1024).toFixed(2)} MB)\n                        </span>\n                        {file.name.includes('camera-capture') && (\n                          <span className=\"ml-2 text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                            Camera\n                          </span>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                        disabled={processing}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6\">\n                  <Button\n                    onClick={processFiles}\n                    disabled={processing || files.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white py-3 text-lg font-semibold\"\n                  >\n                    {processing ? (\n                      <>\n                        <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                        Processing {currentFile}...\n                      </>\n                    ) : (\n                      <>\n                        <Brain className=\"h-5 w-5 mr-2\" />\n                        Process {files.length} Image{files.length !== 1 ? 's' : ''} with AI\n                      </>\n                    )}\n                  </Button>\n                  \n                  {processing && (\n                    <div className=\"mt-4\">\n                      <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                        <span>Processing progress</span>\n                        <span>{Math.round(progress)}% complete</span>\n                      </div>\n                      <Progress value={progress} className=\"w-full h-3\" />\n                      <p className=\"text-sm text-gray-500 mt-2 text-center\">\n                        {currentFile && `Currently processing: ${currentFile}`}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Features Info */}\n        {/* <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-md\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"p-3 bg-blue-100 rounded-full w-16 h-16 mx-auto mb-4 group-hover:bg-blue-200 transition-colors\">\n                <Camera className=\"h-10 w-10 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Multi-Card Detection</h3>\n              <p className=\"text-sm text-gray-600\">\n                Advanced AI detects and processes multiple business cards in a single image\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-md\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"p-3 bg-green-100 rounded-full w-16 h-16 mx-auto mb-4 group-hover:bg-green-200 transition-colors\">\n                <Eye className=\"h-10 w-10 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">QR Code & vCard Support</h3>\n              <p className=\"text-sm text-gray-600\">\n                Extracts contact data from QR codes, vCards, and MeCards automatically\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-md\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"p-3 bg-purple-100 rounded-full w-16 h-16 mx-auto mb-4 group-hover:bg-purple-200 transition-colors\">\n                <Users className=\"h-10 w-10 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Smart Data Organization</h3>\n              <p className=\"text-sm text-gray-600\">\n                Automatically categorizes mobile numbers, landlines, and contact details\n              </p>\n            </CardContent>\n          </Card>\n        </div> */}\n\n        {/* Usage Limit Modal */}\n        <UsageLimitModal\n          isOpen={showLimitModal}\n          onClose={() => setShowLimitModal(false)}\n          feature=\"aiScan\"\n          currentCount={usage.aiScansCount}\n          limit={limits.aiScans}\n        />\n\n        {/* Hidden canvas for camera capture */}\n        <canvas ref={canvasRef} className=\"hidden\" />\n      </div>\n    </div>\n  );\n}","size_bytes":52498},"client/src/pages/Contacts/Contacts.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { collection, query, where, getDocs, addDoc, updateDoc, deleteDoc, doc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"../../lib/firebase\";\nimport { isDuplicateContact } from \"../../utils/duplicate\";\nimport { Card, CardContent } from \"../../components/ui/card\";\nimport { Button } from \"../../components/ui/button\";\nimport { Input } from \"../../components/ui/input\";\nimport { Label } from \"../../components/ui/label\";\nimport { Textarea } from \"../../components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../../components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"../../components/ui/dialog\";\nimport { Badge } from \"../../components/ui/badge\";\nimport { useToast } from \"../../hooks/use-toast\";\nimport { Plus, Search, Grid3X3, List, MoreVertical, Edit, Trash2, Users2, Loader2, Download, Check, FileText, Copy, Upload, FileDown, Phone, MapPin, ExternalLink } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from \"../../components/ui/dropdown-menu\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../../components/ui/table\";\nimport * as XLSX from 'xlsx';\n\n// WhatsApp Icon Component\nconst WhatsAppIcon = ({ className = \"h-4 w-4\" }: { className?: string }) => (\n  <svg className={className} viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.905 3.288z\"/>\n  </svg>\n);\n\ninterface Contact {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phones: string[];\n  email: string;\n  company: string;\n  services: string;\n  address?: string;\n  qrCodeUrl?: string; // Added QR Code URL field\n  groupIds: string[];\n  createdAt: Date;\n  ownerId: string;\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  ownerId: string;\n}\n\ninterface Template {\n  id: string;\n  name: string;\n  content: string;\n  createdAt: Date;\n  ownerId: string;\n}\n\nfunction Contacts() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [filteredContacts, setFilteredContacts] = useState<Contact[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"table\">(\"grid\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [exporting, setExporting] = useState(false);\n  const [importing, setImporting] = useState(false);\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showGroupModal, setShowGroupModal] = useState(false);\n  const [showTemplateModal, setShowTemplateModal] = useState(false);\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [selectedContactForGroup, setSelectedContactForGroup] = useState<Contact | null>(null);\n  const [selectedContactForMessage, setSelectedContactForMessage] = useState<Contact | null>(null);\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [customMessage, setCustomMessage] = useState(\"\");\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importPreview, setImportPreview] = useState<any[]>([]);\n  const [formData, setFormData] = useState<{\n    firstName: string;\n    lastName: string;\n    phones: string[];\n    email: string;\n    company: string;\n    services: string;\n    address: string;\n    qrCodeUrl: string; // Added QR Code URL field\n    groupIds: string[];\n  }>({\n    firstName: \"\",\n    lastName: \"\",\n    phones: [],\n    email: \"\",\n    company: \"\",\n    services: \"\",\n    address: \"\",\n    qrCodeUrl: \"\", // Added QR Code URL field\n    groupIds: [],\n  });\n\n  useEffect(() => {\n    const initializeContacts = async () => {\n      try {\n        setLoading(true);\n        if (user) {\n          await fetchData();\n        }\n      } catch (error) {\n        console.error(\"Error initializing contacts:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to initialize contacts\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeContacts();\n  }, [user]);\n\n  useEffect(() => {\n    let filtered = contacts;\n\n    if (searchTerm) {\n      filtered = filtered.filter(contact => \n        contact.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.phones?.some(p => p.includes(searchTerm)) ||\n        contact.company?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedGroup !== \"all\") {\n      filtered = filtered.filter(contact => \n        contact.groupIds?.includes(selectedGroup)\n      );\n    }\n\n    setFilteredContacts(filtered);\n  }, [contacts, searchTerm, selectedGroup]);\n\n  const fetchData = async () => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Fetch contacts\n      const contactsQuery = query(\n        collection(db, \"contacts\"), \n        where(\"ownerId\", \"==\", user.uid)\n      );\n      const contactsSnapshot = await getDocs(contactsQuery);\n      const contactsData = contactsSnapshot.docs.map(doc => {\n        const data = doc.data() as any;\n        const contact: Contact = {\n          id: doc.id,\n          firstName: data.firstName || \"\",\n          lastName: data.lastName || \"\",\n          phones: [],\n          email: data.email || \"\",\n          company: data.company || \"\",\n          services: data.services || \"\",\n          address: data.address || \"\",\n          qrCodeUrl: data.qrCodeUrl || \"\", // Added QR Code URL field\n          groupIds: data.groupIds || [],\n          createdAt: data.createdAt?.toDate() || new Date(),\n          ownerId: data.ownerId,\n        };\n\n        if (Array.isArray(data.phones)) {\n          contact.phones = data.phones;\n        } else {\n          const phoneNumbers = [];\n          if (data.phone) phoneNumbers.push(data.phone);\n          if (data.phone2) phoneNumbers.push(data.phone2);\n          contact.phones = phoneNumbers;\n        }\n        \n        return contact;\n      });\n\n      // Fetch groups\n      const groupsQuery = query(\n        collection(db, \"groups\"), \n        where(\"ownerId\", \"==\", user.uid)\n      );\n      const groupsSnapshot = await getDocs(groupsQuery);\n      const groupsData = groupsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as Group[];\n\n      // Fetch templates\n      const templatesQuery = query(\n        collection(db, \"templates\"), \n        where(\"ownerId\", \"==\", user.uid)\n      );\n      const templatesSnapshot = await getDocs(templatesQuery);\n      const templatesData = templatesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate() || new Date(),\n      })) as Template[];\n\n      setContacts(contactsData);\n      setGroups(groupsData);\n      setTemplates(templatesData);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Enhanced Bulk Import Function with QR Code URL support\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setImportFile(file);\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n        \n        // Transform and validate data\n        const transformedData = jsonData.map((row: any, index) => {\n          const firstName = row['First Name'] || row['firstName'] || row['Name']?.split(' ')[0] || '';\n          const lastName = row['Last Name'] || row['lastName'] || row['Name']?.split(' ').slice(1).join(' ') || '';\n          const phone = row['Phone'] || row['phone'] || row['Phone Number'] || row['Mobile'] || '';\n          const phone2 = row['Phone 2'] || row['phone2'] || row['Secondary Phone'] || '';\n          const email = row['Email'] || row['email'] || row['Email Address'] || '';\n          const company = row['Company'] || row['company'] || row['Organization'] || '';\n          const qrCodeUrl = row['QR Code URL'] || row['qrCodeUrl'] || row['QR Code'] || row['URL'] || ''; // Added QR Code URL extraction\n          \n          const phones = [phone, phone2].filter(p => p).map(p => p.toString().trim());\n\n          return {\n            index: index + 1,\n            firstName: firstName.toString().trim(),\n            lastName: lastName.toString().trim(),\n            phones: phones,\n            email: email.toString().toLowerCase().trim(),\n            company: company.toString().trim(),\n            services: row['Services'] || row['services'] || '',\n            address: row['Address'] || row['address'] || '',\n            qrCodeUrl: qrCodeUrl.toString().trim(), // Added QR Code URL field\n            isValid: !!(firstName && phones.length > 0) // Minimum required fields\n          };\n        }).filter(row => row.firstName || (row.phones && row.phones.length > 0)); // Filter out completely empty rows\n\n        setImportPreview(transformedData);\n      } catch (error) {\n        console.error(\"Error reading file:\", error);\n        toast({\n          title: \"File Error\",\n          description: \"Unable to read the selected file. Please ensure it's a valid Excel file.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    \n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleBulkImport = async () => {\n    if (!user || !importPreview.length) return;\n    \n    setImporting(true);\n    let successCount = 0;\n    let duplicateCount = 0;\n    let errorCount = 0;\n    \n    try {\n      for (const contact of importPreview.filter(c => c.isValid)) {\n        try {\n          // Check for duplicates\n          if (contact.email || contact.phones.length > 0) {\n            const isDupe = await isDuplicateContact(user.uid, contact.email, contact.phones);\n            if (isDupe) {\n              duplicateCount++;\n              continue;\n            }\n          }\n          \n          const contactData = {\n            firstName: contact.firstName,\n            lastName: contact.lastName,\n            phones: contact.phones,\n            email: contact.email,\n            company: contact.company,\n            services: contact.services || '',\n            address: contact.address || '',\n            qrCodeUrl: contact.qrCodeUrl || '', // Added QR Code URL field\n            groupIds: [],\n            ownerId: user.uid,\n            createdAt: serverTimestamp(),\n            updatedAt: serverTimestamp(),\n          };\n\n          await addDoc(collection(db, \"contacts\"), contactData);\n          successCount++;\n        } catch (error) {\n          console.error(`Error importing contact ${contact.firstName}:`, error);\n          errorCount++;\n        }\n      }\n      \n      toast({\n        title: \"Import Complete\",\n        description: `Successfully imported ${successCount} contacts. ${duplicateCount} duplicates skipped. ${errorCount} errors.`,\n      });\n      \n      setShowImportModal(false);\n      setImportFile(null);\n      setImportPreview([]);\n      await fetchData();\n      \n    } catch (error) {\n      console.error(\"Error during bulk import:\", error);\n      toast({\n        title: \"Import Error\",\n        description: \"An error occurred during import. Some contacts may not have been saved.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  // Enhanced Excel Export Function with QR Code URL\n  const handleExportToExcel = async () => {\n    try {\n      setExporting(true);\n      \n      if (filteredContacts.length === 0) {\n        toast({\n          title: \"No Data\",\n          description: \"No contacts available to export\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const excelData = filteredContacts.map(contact => {\n        const groupNames = contact.groupIds?.map(groupId => {\n          const group = groups.find(g => g.id === groupId);\n          return group?.name || '';\n        }).filter(name => name).join(', ') || 'No Groups';\n\n        return {\n          'First Name': contact.firstName || '',\n          'Last Name': contact.lastName || '',\n          'Full Name': `${contact.firstName || ''} ${contact.lastName || ''}`.trim(),\n          'Phones': contact.phones?.join(', ') || '',\n          'Email': contact.email || '',\n          'Company': contact.company || '',\n          'Services': contact.services || '',\n          'Address': contact.address || '',\n          'QR Code URL': contact.qrCodeUrl || '', // Added QR Code URL field\n          'Groups': groupNames,\n          'Created Date': contact.createdAt ? contact.createdAt.toLocaleDateString() : '',\n          'Created Time': contact.createdAt ? contact.createdAt.toLocaleTimeString() : '',\n        };\n      });\n\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(excelData);\n\n      const colWidths = [\n        { wch: 15 }, { wch: 15 }, { wch: 25 }, { wch: 15 }, { wch: 30 },\n        { wch: 20 }, { wch: 30 }, { wch: 30 }, { wch: 40 }, { wch: 20 }, { wch: 12 }, { wch: 12 },\n      ];\n      ws['!cols'] = colWidths;\n\n      XLSX.utils.book_append_sheet(wb, ws, 'Contacts');\n\n      const currentDate = new Date();\n      const dateString = currentDate.toISOString().split('T')[0];\n      const filename = `contacts_export_${dateString}.xlsx`;\n\n      XLSX.writeFile(wb, filename);\n\n      toast({\n        title: \"Success\",\n        description: `${filteredContacts.length} contacts exported successfully to ${filename}`,\n      });\n\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      toast({\n        title: \"Export Error\",\n        description: `Failed to export contacts: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  // Enhanced VCF Export Function with QR Code URL\n  const generateVCF = (contact: Contact) => {\n    const vcf = [\n      'BEGIN:VCARD',\n      'VERSION:3.0',\n      `FN:${contact.firstName} ${contact.lastName}`,\n      `N:${contact.lastName};${contact.firstName};;;`,\n      ...(contact.phones || []).map((p, i) => `TEL;TYPE=${i === 0 ? 'CELL' : 'HOME'}:${p}`),\n      contact.email ? `EMAIL:${contact.email}` : '',\n      contact.company ? `ORG:${contact.company}` : '',\n      contact.address ? `ADR;TYPE=WORK:;;${contact.address};;;;` : '',\n      contact.services ? `NOTE:Services: ${contact.services}` : '',\n      contact.qrCodeUrl ? `URL:${contact.qrCodeUrl}` : '', // Added QR Code URL to VCF\n      'END:VCARD'\n    ].filter(Boolean).join('\\n');\n\n    return vcf;\n  };\n\n  const handleExportVCF = (contact: Contact) => {\n    try {\n      const vcfContent = generateVCF(contact);\n      const blob = new Blob([vcfContent], { type: 'text/vcard' });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${contact.firstName}_${contact.lastName}.vcf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: `VCF file downloaded for ${contact.firstName} ${contact.lastName}`,\n      });\n    } catch (error) {\n      console.error(\"Error generating VCF:\", error);\n      toast({\n        title: \"Export Error\",\n        description: \"Failed to generate VCF file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.firstName.trim() || !formData.lastName.trim() || formData.phones.length === 0 || !formData.phones[0].trim() || !formData.email.trim() || !formData.company.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!user) {\n      toast({\n        title: \"Error\",\n        description: \"User not authenticated\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSaving(true);\n    \n    try {\n      if (editingContact) {\n        await updateDoc(doc(db, \"contacts\", editingContact.id), {\n          ...formData,\n          email: formData.email.toLowerCase(),\n          updatedAt: serverTimestamp(),\n        });\n        \n        toast({\n          title: \"Success\",\n          description: \"Contact updated successfully\",\n        });\n        \n        setShowEditModal(false);\n        setEditingContact(null);\n      } else {\n        if (formData.email || formData.phones.length > 0) {\n          try {\n            const isDupe = await isDuplicateContact(user.uid, formData.email, formData.phones);\n            if (isDupe) {\n              toast({\n                title: \"Duplicate Contact\",\n                description: \"A contact with this email or phone already exists\",\n                variant: \"destructive\",\n              });\n              setSaving(false);\n              return;\n            }\n          } catch (dupeError) {\n            console.error(\"Error checking duplicates:\", dupeError);\n          }\n        }\n\n        const contactData = {\n          firstName: formData.firstName.trim(),\n          lastName: formData.lastName.trim(),\n          phones: formData.phones.map(p => p.trim()).filter(p => p),\n          email: formData.email.toLowerCase().trim(),\n          company: formData.company.trim(),\n          services: formData.services.trim(),\n          address: formData.address.trim(),\n          qrCodeUrl: formData.qrCodeUrl.trim(), // Added QR Code URL field\n          groupIds: formData.groupIds || [],\n          ownerId: user.uid,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await addDoc(collection(db, \"contacts\"), contactData);\n\n        toast({\n          title: \"Success\",\n          description: \"Contact added successfully\",\n        });\n        \n        setShowAddModal(false);\n      }\n\n      setFormData({\n        firstName: \"\",\n        lastName: \"\",\n        phones: [],\n        email: \"\",\n        company: \"\",\n        services: \"\",\n        address: \"\",\n        qrCodeUrl: \"\", // Added QR Code URL field\n        groupIds: [],\n      });\n      \n      await fetchData();\n    } catch (error) {\n      console.error(\"Error saving contact:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to save contact: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleEditContact = (contact: Contact) => {\n    setEditingContact(contact);\n    setFormData({\n      firstName: contact.firstName || \"\",\n      lastName: contact.lastName || \"\",\n      phones: contact.phones || [],\n      email: contact.email || \"\",\n      company: contact.company || \"\",\n      services: contact.services || \"\",\n      address: contact.address || \"\",\n      qrCodeUrl: contact.qrCodeUrl || \"\", // Added QR Code URL field\n      groupIds: contact.groupIds || [],\n    });\n    setShowEditModal(true);\n  };\n\n  const handleDeleteContact = async (contactId: string) => {\n    if (!window.confirm(\"Are you sure you want to delete this contact?\")) {\n      return;\n    }\n\n    try {\n      await deleteDoc(doc(db, \"contacts\", contactId));\n      toast({\n        title: \"Success\",\n        description: \"Contact deleted successfully\",\n      });\n      fetchData();\n    } catch (error) {\n      console.error(\"Error deleting contact:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete contact\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAssignToGroup = (contact: Contact) => {\n    setSelectedContactForGroup(contact);\n    setShowGroupModal(true);\n  };\n\n  const handleGroupAssignment = async (groupId: string) => {\n    if (!selectedContactForGroup) return;\n    \n    try {\n      const currentGroupIds = selectedContactForGroup.groupIds || [];\n      const updatedGroupIds = currentGroupIds.includes(groupId)\n        ? currentGroupIds.filter(id => id !== groupId)\n        : [...currentGroupIds, groupId];\n      \n      await updateDoc(doc(db, \"contacts\", selectedContactForGroup.id), {\n        groupIds: updatedGroupIds,\n        updatedAt: serverTimestamp(),\n      });\n      \n      setSelectedContactForGroup(prev => {\n        if (!prev) return prev;\n        return {\n          ...prev,\n          groupIds: updatedGroupIds\n        };\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Group assignment updated\",\n      });\n      \n      await fetchData();\n    } catch (error) {\n      console.error(\"Error updating group assignment:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update group assignment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Updated handleSendMessage function with template integration\n  const handleSendMessage = (contact: Contact) => {\n    setSelectedContactForMessage(contact);\n    setSelectedTemplate(null);\n    setCustomMessage(\"\");\n    setShowTemplateModal(true);\n  };\n\n  // Function to replace placeholders in template content\n  const replacePlaceholders = (content: string, contact: Contact) => {\n    return content\n      .replace(/\\{firstName\\}/g, contact.firstName || '')\n      .replace(/\\{lastName\\}/g, contact.lastName || '')\n      .replace(/\\{fullName\\}/g, `${contact.firstName || ''} ${contact.lastName || ''}`.trim())\n      .replace(/\\{company\\}/g, contact.company || '')\n      .replace(/\\{email\\}/g, contact.email || '')\n      .replace(/\\{phone\\}/g, contact.phones?.[0] || '');\n  };\n\n  // Enhanced function to clean and format message for WhatsApp URL\n  const formatMessageForWhatsApp = (message: string) => {\n    let cleanMessage = message\n      .trim()\n      .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n')\n      .replace(/\\s+/g, ' ')\n      .replace(/\\n /g, '\\n')\n      .replace(/ \\n/g, '\\n');\n\n    if (cleanMessage.length > 1500) {\n      cleanMessage = cleanMessage.substring(0, 1500) + '...';\n    }\n\n    return cleanMessage;\n  };\n\n  // Copy message to clipboard function\n  const copyMessageToClipboard = async (message: string) => {\n    try {\n      await navigator.clipboard.writeText(message);\n      toast({\n        title: \"Copied!\",\n        description: \"Message copied to clipboard. You can paste it in WhatsApp manually.\",\n      });\n    } catch (error) {\n      console.error(\"Failed to copy message:\", error);\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy message to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Utility: Format phone number for WhatsApp\n  const formatPhoneNumber = (rawNumber: string): string => {\n    if (!rawNumber) return \"\";\n\n    let cleaned = rawNumber.replace(/[^\\d]/g, \"\");\n    cleaned = cleaned.replace(/^0+/, \"\");\n\n    if (!cleaned.startsWith(\"91\") && cleaned.length <= 10) {\n      cleaned = \"91\" + cleaned;\n    }\n\n    return cleaned;\n  };\n\n  // Enhanced WhatsApp messaging function supporting both web and mobile\n  const handleSendWhatsAppMessage = () => {\n    if (!selectedContactForMessage) return;\n\n    const phoneNumber = formatPhoneNumber(selectedContactForMessage.phones?.[0] || \"\");\n    if (!phoneNumber) {\n      toast({\n        title: \"Error\",\n        description: \"No phone number available for this contact\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let messageContent = \"\";\n\n    if (selectedTemplate) {\n      messageContent = replacePlaceholders(\n        selectedTemplate.content,\n        selectedContactForMessage\n      );\n    } else if (customMessage.trim()) {\n      messageContent = replacePlaceholders(\n        customMessage,\n        selectedContactForMessage\n      );\n    } else {\n      messageContent = `Hi ${selectedContactForMessage.firstName}, I hope you're doing well!`;\n    }\n\n    const formattedMessage = formatMessageForWhatsApp(messageContent);\n\n    try {\n      // Enhanced mobile detection\n      const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent);\n      const isTablet = /iPad/i.test(navigator.userAgent);\n      \n      let whatsappUrl: string;\n      let fallbackUrl: string;\n\n      if (isMobile && !isTablet) {\n        // Mobile device - try to open WhatsApp app first\n        whatsappUrl = `whatsapp://send?phone=${phoneNumber}&text=${encodeURIComponent(formattedMessage)}`;\n        fallbackUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(formattedMessage)}`;\n        \n        // Try app first, then fallback to web\n        const openAppTimeout = setTimeout(() => {\n          window.open(fallbackUrl, \"_blank\");\n        }, 1000);\n\n        window.location.href = whatsappUrl;\n        \n        // Clear timeout if app opens successfully\n        window.addEventListener('blur', () => {\n          clearTimeout(openAppTimeout);\n        });\n\n      } else {\n        // Desktop/Tablet - use WhatsApp Web\n        whatsappUrl = `https://web.whatsapp.com/send?phone=${phoneNumber}&text=${encodeURIComponent(formattedMessage)}`;\n        \n        if (whatsappUrl.length > 2000) {\n          // Message too long for URL\n          copyMessageToClipboard(formattedMessage);\n          window.open(`https://web.whatsapp.com/send?phone=${phoneNumber}`, \"_blank\");\n          toast({\n            title: \"Message Too Long\",\n            description: \"Message copied to clipboard. Please paste it manually in WhatsApp.\",\n          });\n        } else {\n          window.open(whatsappUrl, \"_blank\");\n          toast({\n            title: \"Success\",\n            description: `Opening WhatsApp Web to send message to ${selectedContactForMessage.firstName}`,\n          });\n        }\n      }\n\n    } catch (error) {\n      console.error(\"Error opening WhatsApp:\", error);\n      copyMessageToClipboard(formattedMessage);\n      toast({\n        title: \"Error\",\n        description: \"Failed to open WhatsApp. Message copied to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n\n    setShowTemplateModal(false);\n  };\n\n  const getGroupName = (groupId: string) => {\n    const group = groups.find(g => g.id === groupId);\n    return group?.name || \"\";\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    const first = firstName?.charAt(0) || \"\";\n    const last = lastName?.charAt(0) || \"\";\n    return `${first}${last}`.toUpperCase();\n  };\n\n  const getBadgeColor = (index: number) => {\n    const colors = [\n      \"bg-blue-100 text-blue-800\", \n      \"bg-purple-100 text-purple-800\", \n      \"bg-green-100 text-green-800\", \n      \"bg-orange-100 text-orange-800\"\n    ];\n    return colors[index % colors.length];\n  };\n\n  const handleOpenAddModal = () => {\n    setEditingContact(null);\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      phones: [],\n      email: \"\",\n      company: \"\",\n      services: \"\",\n      address: \"\",\n      qrCodeUrl: \"\", // Added QR Code URL field\n      groupIds: [],\n    });\n    setShowAddModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowAddModal(false);\n    setShowEditModal(false);\n    setEditingContact(null);\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      phones: [],\n      email: \"\",\n      company: \"\",\n      services: \"\",\n      address: \"\",\n      qrCodeUrl: \"\", // Added QR Code URL field\n      groupIds: [],\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h2>\n            <p className=\"text-gray-600\">Please log in to access your contacts.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-gray-200 h-48 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Enhanced Responsive Grid View Component\n  const GridView = () => (\n    <div className=\"mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5\">\n      {filteredContacts.map((contact) => (\n        <Card key={contact.id} className=\"hover:shadow-lg transition-all duration-200 relative flex flex-col\">\n          <CardContent className=\"p-4 flex-1 flex flex-col\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-start space-x-3 flex-1 min-w-0\">\n                <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-primary font-medium text-sm\">\n                    {getInitials(contact.firstName, contact.lastName)}\n                  </span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"text-base font-semibold text-gray-900 truncate leading-tight\">\n                    {contact.firstName} {contact.lastName}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 truncate mt-0.5\">{contact.company}</p>\n                </div>\n              </div>\n              \n              <div className=\"ml-2 flex-shrink-0\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0 hover:bg-gray-100\">\n                      <MoreVertical className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuItem onClick={() => window.open(`tel:${contact.phones?.[0]}`)}>\n                      <Phone className=\"h-4 w-4 mr-2\" />\n                      Call\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleAssignToGroup(contact)}>\n                      <Users2 className=\"h-4 w-4 mr-2\" />\n                      Assign Groups\n                    </DropdownMenuItem>\n                    {contact.qrCodeUrl && (\n                      <DropdownMenuItem onClick={() => window.open(contact.qrCodeUrl, '_blank')}>\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        Open QR Link\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem onClick={() => handleExportVCF(contact)}>\n                      <FileDown className=\"h-4 w-4 mr-2\" />\n                      Export VCF\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={() => handleDeleteContact(contact.id)}\n                      className=\"text-red-600 focus:text-red-600\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n            \n            {/* Contact Details */}\n            <div className=\"space-y-1.5 mb-3 flex-1\">\n              {contact.phones?.slice(0, 2).map((phone, i) => (\n                <p key={i} className=\"text-sm text-gray-600 flex items-center\">\n                  <Phone className=\"h-3 w-3 mr-1.5 text-gray-400 flex-shrink-0\" />\n                  <span className=\"truncate\">{phone}</span>\n                </p>\n              ))}\n              {contact.phones && contact.phones.length > 2 && (\n                <p className=\"text-xs text-gray-500\">+{contact.phones.length - 2} more numbers</p>\n              )}\n              \n              {contact.email && (\n                <p className=\"text-sm text-gray-600 truncate\">{contact.email}</p>\n              )}\n              \n              {contact.address && (\n                <p className=\"text-sm text-gray-600 flex items-start\">\n                  <MapPin className=\"h-3 w-3 mr-1.5 text-gray-400 flex-shrink-0 mt-0.5\" />\n                  <span className=\"text-xs line-clamp-2\">{contact.address}</span>\n                </p>\n              )}\n              \n              {contact.qrCodeUrl && (\n                <div className=\"flex items-center\">\n                  <ExternalLink className=\"h-3 w-3 mr-1.5 text-blue-500 flex-shrink-0\" />\n                  <button \n                    onClick={() => window.open(contact.qrCodeUrl, '_blank')}\n                    className=\"text-xs text-blue-600 hover:text-blue-800 underline truncate\"\n                  >\n                    View QR Link\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {contact.services && (\n              <div className=\"mb-3\">\n                <p className=\"text-xs text-gray-600 line-clamp-2 bg-gray-50 p-2 rounded text-left\">\n                  {contact.services}\n                </p>\n              </div>\n            )}\n            \n            {/* Groups */}\n            <div className=\"mb-3\">\n              <div className=\"flex flex-wrap gap-1\">\n                {contact.groupIds?.slice(0, 2).map((groupId, index) => (\n                  <Badge \n                    key={groupId} \n                    variant=\"secondary\" \n                    className={`text-xs px-2 py-0.5 ${getBadgeColor(index)}`}\n                  >\n                    {getGroupName(groupId)}\n                  </Badge>\n                ))}\n                {contact.groupIds && contact.groupIds.length > 2 && (\n                  <Badge variant=\"secondary\" className=\"text-xs px-2 py-0.5 bg-gray-100 text-gray-800\">\n                    +{contact.groupIds.length - 2}\n                  </Badge>\n                )}\n                {(!contact.groupIds || contact.groupIds.length === 0) && (\n                  <span className=\"text-xs text-gray-400\">No groups</span>\n                )}\n              </div>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleSendMessage(contact)}\n                className=\"flex-1 mr-1 h-8 text-green-600 hover:text-green-700 hover:bg-green-50\"\n              >\n                <WhatsAppIcon className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-xs\">WhatsApp</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleEditContact(contact)}\n                className=\"flex-1 ml-1 h-8 text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n              >\n                <Edit className=\"h-4 w-4 mr-1\" />\n                <span className=\"text-xs\">Edit</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n\n  // Enhanced Table View Component with Serial Number\n  const TableView = () => (\n    <div className=\"mt-6\">\n      <Card>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-16\">S.No</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Phone</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Company</TableHead>\n                <TableHead>Address</TableHead>\n                <TableHead>QR Code</TableHead>\n                <TableHead>Groups</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredContacts.map((contact, index) => (\n                <TableRow key={contact.id}>\n                  <TableCell className=\"font-medium text-gray-500\">\n                    {index + 1}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                        <span className=\"text-primary text-sm font-medium\">\n                          {getInitials(contact.firstName, contact.lastName)}\n                        </span>\n                      </div>\n                      <span className=\"font-medium min-w-0\">\n                        {contact.firstName} {contact.lastName}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      {contact.phones?.map((phone, i) => (\n                        <div key={i} className=\"text-sm\">\n                          {phone}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs\">\n                    <div className=\"truncate\" title={contact.email}>\n                      {contact.email}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs\">\n                    <div className=\"truncate\" title={contact.company}>\n                      {contact.company}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs\">\n                    {contact.address && (\n                      <div className=\"truncate\" title={contact.address}>\n                        {contact.address}\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {contact.qrCodeUrl ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => window.open(contact.qrCodeUrl, '_blank')}\n                        className=\"text-blue-600 hover:text-blue-700\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                    ) : (\n                      <span className=\"text-gray-400 text-sm\">-</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {contact.groupIds && contact.groupIds.length > 0 ? (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {contact.groupIds.slice(0, 2).map((groupId, index) => (\n                          <Badge \n                            key={groupId} \n                            variant=\"secondary\" \n                            className={`text-xs ${getBadgeColor(index)}`}\n                          >\n                            {getGroupName(groupId)}\n                          </Badge>\n                        ))}\n                        {contact.groupIds.length > 2 && (\n                          <Badge variant=\"secondary\" className=\"text-xs bg-gray-100 text-gray-800\">\n                            +{contact.groupIds.length - 2}\n                          </Badge>\n                        )}\n                      </div>\n                    ) : (\n                      <span className=\"text-gray-400 text-sm\">No groups</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSendMessage(contact)}\n                        className=\"h-8 w-8 p-0\"\n                        title=\"Send WhatsApp Message\"\n                      >\n                        <WhatsAppIcon className=\"h-4 w-4 text-green-600\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditContact(contact)}\n                        className=\"h-8 w-8 p-0\"\n                        title=\"Edit Contact\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem\n                            onClick={() => window.open(`tel:${contact.phones?.[0]}`)}\n                          >\n                            <Phone className=\"h-4 w-4 mr-2\" />\n                            Call\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => handleAssignToGroup(contact)}\n                          >\n                            <Users2 className=\"h-4 w-4 mr-2\" />\n                            Assign Groups\n                          </DropdownMenuItem>\n                          {contact.qrCodeUrl && (\n                            <DropdownMenuItem onClick={() => window.open(contact.qrCodeUrl, '_blank')}>\n                              <ExternalLink className=\"h-4 w-4 mr-2\" />\n                              Open QR Link\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuItem onClick={() => handleExportVCF(contact)}>\n                            <FileDown className=\"h-4 w-4 mr-2\" />\n                            Export VCF\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => handleDeleteContact(contact.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Contacts ({contacts.length})\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Manage your business contacts and relationships\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowImportModal(true)}\n              className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Import Excel\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleExportToExcel}\n              disabled={exporting || filteredContacts.length === 0}\n              className=\"text-green-600 border-green-600 hover:bg-green-50\"\n            >\n              {exporting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Exporting...\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Excel ({filteredContacts.length})\n                </>\n              )}\n            </Button>\n\n            <Dialog open={showAddModal || showEditModal} onOpenChange={(open) => {\n              if (!open) {\n                handleCloseModal();\n              }\n            }}>\n              <DialogTrigger asChild>\n                <Button onClick={handleOpenAddModal}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Contact\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>{editingContact ? \"Edit Contact\" : \"Add New Contact\"}</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name *</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                        required\n                        disabled={saving}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name *</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                        required\n                        disabled={saving}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Phones</Label>\n                    {formData.phones.map((phone, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Input\n                          type=\"tel\"\n                          value={phone}\n                          onChange={(e) => {\n                            const newPhones = [...formData.phones];\n                            newPhones[index] = e.target.value;\n                            setFormData(prev => ({ ...prev, phones: newPhones }));\n                          }}\n                          required={index === 0}\n                          disabled={saving}\n                        />\n                        {index > 0 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const newPhones = formData.phones.filter((_, i) => i !== index);\n                              setFormData(prev => ({ ...prev, phones: newPhones }));\n                            }}\n                            disabled={saving}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setFormData(prev => ({ ...prev, phones: [...prev.phones, ''] }))}\n                      disabled={saving}\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Phone\n                    </Button>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      disabled={saving}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"company\">Company *</Label>\n                    <Input\n                      id=\"company\"\n                      value={formData.company}\n                      onChange={(e) => setFormData(prev => ({ ...prev, company: e.target.value }))}\n                      required\n                      disabled={saving}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"services\">Services</Label>\n                    <Textarea\n                      id=\"services\"\n                      value={formData.services}\n                      onChange={(e) => setFormData(prev => ({ ...prev, services: e.target.value }))}\n                      rows={3}\n                      disabled={saving}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"address\">Address (Optional)</Label>\n                    <Textarea\n                      id=\"address\"\n                      value={formData.address}\n                      onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                      rows={2}\n                      disabled={saving}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"qrCodeUrl\">QR Code URL (Optional)</Label>\n                    <Input\n                      id=\"qrCodeUrl\"\n                      type=\"url\"\n                      value={formData.qrCodeUrl}\n                      onChange={(e) => setFormData(prev => ({ ...prev, qrCodeUrl: e.target.value }))}\n                      placeholder=\"https://example.com/qr-code\"\n                      disabled={saving}\n                    />\n                  </div>\n                  {groups.length > 0 && (\n                    <div>\n                      <Label htmlFor=\"groups\">Assign to Groups (Optional)</Label>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {groups.map(group => (\n                          <label key={group.id} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.groupIds.includes(group.id)}\n                              disabled={saving}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  setFormData(prev => ({ ...prev, groupIds: [...prev.groupIds, group.id] }));\n                                } else {\n                                  setFormData(prev => ({ ...prev, groupIds: prev.groupIds.filter(id => id !== group.id) }));\n                                }\n                              }}\n                            />\n                            <span className=\"text-sm\">{group.name}</span>\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleCloseModal} disabled={saving}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={saving}>\n                      {saving ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          {editingContact ? \"Updating...\" : \"Adding...\"}\n                        </>\n                      ) : (\n                        editingContact ? \"Update Contact\" : \"Add Contact\"\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Filter and Search Bar */}\n        <div className=\"mt-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"sm:flex sm:items-center sm:justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                    <Input\n                      type=\"text\"\n                      className=\"pl-10\"\n                      placeholder=\"Search contacts by name, email, phone, or company...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                  </div>\n                </div>\n                <div className=\"mt-4 sm:mt-0 sm:ml-4 flex items-center space-x-4\">\n                  {/* View Toggle */}\n                  <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                    <Button\n                      variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"grid\")}\n                      className={`h-8 w-8 p-0 ${\n                        viewMode === \"grid\" \n                          ? \"bg-blue-600 hover:bg-blue-700 text-white shadow-sm\" \n                          : \"hover:bg-gray-200 text-gray-600\"\n                      }`}\n                    >\n                      <Grid3X3 className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === \"table\" ? \"default\" : \"ghost\"}\n                      size=\"sm\"\n                      onClick={() => setViewMode(\"table\")}\n                      className={`h-8 w-8 p-0 ${\n                        viewMode === \"table\" \n                          ? \"bg-blue-600 hover:bg-blue-700 text-white shadow-sm\" \n                          : \"hover:bg-gray-200 text-gray-600\"\n                      }`}\n                    >\n                      <List className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  {/* Filter */}\n                  <Select value={selectedGroup} onValueChange={setSelectedGroup}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Groups</SelectItem>\n                      {groups.map(group => (\n                        <SelectItem key={group.id} value={group.id}>\n                          {group.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contacts Display */}\n        {filteredContacts.length > 0 ? (\n          viewMode === \"grid\" ? <GridView /> : <TableView />\n        ) : (\n          <div className=\"mt-6 text-center py-12\">\n            <div className=\"text-gray-500\">\n              {searchTerm || selectedGroup !== \"all\" \n                ? \"No contacts found matching your criteria\"\n                : \"No contacts yet. Add your first contact to get started.\"\n              }\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Enhanced Bulk Import Modal with QR Code URL support */}\n      <Dialog open={showImportModal} onOpenChange={setShowImportModal}>\n        <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Bulk Import Contacts</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 mb-2\">Import Instructions:</h4>\n              <ul className=\"text-sm text-blue-700 space-y-1\">\n                <li>‚Ä¢ Upload an Excel file (.xlsx) with contact information</li>\n                <li>‚Ä¢ Required columns: <strong>First Name</strong> and <strong>Phone</strong></li>\n                <li>‚Ä¢ Optional columns: Last Name, Email, Company, Services, Address, <strong>QR Code URL</strong></li>\n                <li>‚Ä¢ Alternative column names are supported (e.g., 'Name', 'Mobile', 'Organization', 'URL')</li>\n                <li>‚Ä¢ Duplicates will be automatically skipped</li>\n              </ul>\n            </div>\n\n            <div>\n              <Label htmlFor=\"importFile\">Select Excel File</Label>\n              <Input\n                id=\"importFile\"\n                name=\"importFile\"\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileSelect}\n                className=\"mt-2\"\n              />\n            </div>\n\n            {importPreview.length > 0 && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Preview ({importPreview.length} rows)</h4>\n                  <div className=\"text-sm text-gray-600\">\n                    Valid: {importPreview.filter(row => row.isValid).length} | \n                    Invalid: {importPreview.filter(row => !row.isValid).length}\n                  </div>\n                </div>\n\n                <div className=\"max-h-60 overflow-y-auto border rounded-lg\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Status</TableHead>\n                        <TableHead>First Name</TableHead>\n                        <TableHead>Last Name</TableHead>\n                        <TableHead>Phone</TableHead>\n                        <TableHead>Phone 2</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Company</TableHead>\n                        <TableHead>QR Code URL</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {importPreview.slice(0, 10).map((row, index) => (\n                        <TableRow key={index} className={!row.isValid ? \"bg-red-50\" : \"\"}>\n                          <TableCell>\n                            {row.isValid ? (\n                              <Check className=\"h-4 w-4 text-green-600\" />\n                            ) : (\n                              <span className=\"text-xs text-red-600\">Invalid</span>\n                            )}\n                          </TableCell>\n                          <TableCell>{row.firstName}</TableCell>\n                          <TableCell>{row.lastName}</TableCell>\n                          <TableCell>{row.phones[0] || ''}</TableCell>\n                          <TableCell>{row.phones[1] || ''}</TableCell>\n                          <TableCell>{row.email}</TableCell>\n                          <TableCell>{row.company}</TableCell>\n                          <TableCell>\n                            {row.qrCodeUrl && (\n                              <span className=\"text-xs text-blue-600 truncate\" title={row.qrCodeUrl}>\n                                {row.qrCodeUrl.length > 30 ? row.qrCodeUrl.substring(0, 30) + '...' : row.qrCodeUrl}\n                              </span>\n                            )}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {importPreview.length > 10 && (\n                  <p className=\"text-sm text-gray-500\">\n                    Showing first 10 rows. Total: {importPreview.length} rows\n                  </p>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowImportModal(false);\n                  setImportFile(null);\n                  setImportPreview([]);\n                }}\n                disabled={importing}\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleBulkImport}\n                disabled={importing || importPreview.length === 0 || !importPreview.some(row => row.isValid)}\n              >\n                {importing ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Importing...\n                  </>\n                ) : (\n                  `Import ${importPreview.filter(row => row.isValid).length} Contacts`\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Group Assignment Modal */}\n      <Dialog open={showGroupModal} onOpenChange={setShowGroupModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Contact to Groups</DialogTitle>\n          </DialogHeader>\n          {selectedContactForGroup && (\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600\">\n                Assigning <strong>{selectedContactForGroup.firstName} {selectedContactForGroup.lastName}</strong> to groups:\n              </p>\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {groups.map(group => {\n                  const isChecked = selectedContactForGroup.groupIds?.includes(group.id) || false;\n                  return (\n                    <div key={group.id} className=\"flex items-center space-x-3\">\n                      <div className=\"relative\">\n                        <input\n                          type=\"checkbox\"\n                          id={`group-${group.id}`}\n                          checked={isChecked}\n                          onChange={() => handleGroupAssignment(group.id)}\n                          className=\"sr-only\"\n                        />\n                        <div\n                          onClick={() => handleGroupAssignment(group.id)}\n                          className={`w-5 h-5 border-2 rounded cursor-pointer flex items-center justify-center transition-all ${\n                            isChecked \n                              ? \"bg-blue-600 border-blue-600 text-white\" \n                              : \"border-gray-300 hover:border-gray-400\"\n                          }`}\n                        >\n                          {isChecked && <Check className=\"h-3 w-3\" />}\n                        </div>\n                      </div>\n                      <label \n                        htmlFor={`group-${group.id}`} \n                        className=\"text-sm cursor-pointer flex-1 select-none\"\n                        onClick={() => handleGroupAssignment(group.id)}\n                      >\n                        {group.name}\n                      </label>\n                    </div>\n                  );\n                })}\n              </div>\n              {groups.length === 0 && (\n                <p className=\"text-sm text-gray-500\">\n                  No groups available. Create groups first to assign contacts.\n                </p>\n              )}\n              <div className=\"flex justify-end space-x-4\">\n                <Button variant=\"outline\" onClick={() => setShowGroupModal(false)}>\n                  Done\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Enhanced Template Selection Modal for WhatsApp Message */}\n      <Dialog open={showTemplateModal} onOpenChange={setShowTemplateModal}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Send WhatsApp Message</DialogTitle>\n          </DialogHeader>\n          {selectedContactForMessage && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <span className=\"text-primary font-medium\">\n                    {getInitials(selectedContactForMessage.firstName, selectedContactForMessage.lastName)}\n                  </span>\n                </div>\n                <div>\n                  <p className=\"font-medium\">{selectedContactForMessage.firstName} {selectedContactForMessage.lastName}</p>\n                  <p className=\"text-sm text-gray-500\">{selectedContactForMessage.phones?.join(', ')}</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Choose Message Option:</h3>\n                \n                {/* Template Selection */}\n                {templates.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <Label className=\"text-base font-medium\">Use a Template:</Label>\n                    <div className=\"grid grid-cols-1 gap-3 max-h-60 overflow-y-auto\">\n                      {templates.map(template => (\n                        <div\n                          key={template.id}\n                          className={`p-3 border rounded-lg cursor-pointer transition-all ${\n                            selectedTemplate?.id === template.id\n                              ? \"border-blue-500 bg-blue-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                          onClick={() => {\n                            setSelectedTemplate(template);\n                            setCustomMessage(\"\");\n                          }}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <FileText className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">{template.name}</p>\n                              <p className=\"text-xs text-gray-600 mt-1 line-clamp-2\">\n                                {replacePlaceholders(template.content, selectedContactForMessage).substring(0, 100)}...\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    {selectedTemplate && (\n                      <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Label className=\"text-sm font-medium text-blue-800\">Preview:</Label>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const previewText = replacePlaceholders(selectedTemplate.content, selectedContactForMessage);\n                              copyMessageToClipboard(previewText);\n                            }}\n                            className=\"h-6 px-2 text-blue-600 hover:text-blue-700\"\n                          >\n                            <Copy className=\"h-3 w-3 mr-1\" />\n                            Copy\n                          </Button>\n                        </div>\n                        <p className=\"text-sm text-blue-700 whitespace-pre-wrap max-h-32 overflow-y-auto\">\n                          {replacePlaceholders(selectedTemplate.content, selectedContactForMessage)}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Custom Message */}\n                <div className=\"space-y-3\">\n                  <Label className=\"text-base font-medium\">\n                    {templates.length > 0 ? \"Or Write Custom Message:\" : \"Write Custom Message:\"}\n                  </Label>\n                  <Textarea\n                    value={customMessage}\n                    onChange={(e) => {\n                      setCustomMessage(e.target.value);\n                      setSelectedTemplate(null);\n                    }}\n                    placeholder=\"Write your custom message here... \n\nYou can use placeholders:\n{firstName} - Contact's first name\n{lastName} - Contact's last name  \n{fullName} - Contact's full name\n{company} - Contact's company\n{email} - Contact's email\n{phone} - Contact's phone\"\n                    rows={6}\n                    className=\"resize-none\"\n                  />\n                  \n                  {customMessage.trim() && (\n                    <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Label className=\"text-sm font-medium text-green-800\">Preview:</Label>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const previewText = replacePlaceholders(customMessage, selectedContactForMessage);\n                            copyMessageToClipboard(previewText);\n                          }}\n                          className=\"h-6 px-2 text-green-600 hover:text-green-700\"\n                        >\n                          <Copy className=\"h-3 w-3 mr-1\" />\n                          Copy\n                        </Button>\n                      </div>\n                      <p className=\"text-sm text-green-700 whitespace-pre-wrap max-h-32 overflow-y-auto\">\n                        {replacePlaceholders(customMessage, selectedContactForMessage)}\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Placeholder Help */}\n                <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                  <p className=\"text-xs text-gray-600\">\n                    <strong>Available placeholders:</strong> {\"{firstName}\"}, {\"{lastName}\"}, {\"{fullName}\"}, {\"{company}\"}, {\"{email}\"}, {\"{phone}\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Note: For mobile devices, the app will attempt to open WhatsApp directly. For desktop/laptops, WhatsApp Web will be used.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <Button variant=\"outline\" onClick={() => setShowTemplateModal(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSendWhatsAppMessage}\n                  disabled={!selectedTemplate && !customMessage.trim()}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  <WhatsAppIcon className=\"h-4 w-4 mr-2\" />\n                  Send via WhatsApp\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default Contacts;","size_bytes":73242},"client/src/pages/Dashboard/Dashboard.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { \n  collection, query, where, getDocs, orderBy, limit, getCountFromServer \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, Layers, FileText, Camera, UserPlus, FilePlus, CloudUpload, Eye, CreditCard, Crown, Shield } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface Stats {\n  contactsCount: number;\n  groupsCount: number;\n  templatesCount: number;\n  scannedCardsCount: number;\n  digitalCardsCount: number;\n}\n\ninterface SubscriptionStatus {\n  hasSubscription: boolean;\n  planName?: string;\n  endDate?: Date;\n  isActive?: boolean;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'scan' | 'bulk_scan' | 'contact_add';\n  description: string;\n  timestamp: Date;\n  details?: string;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [stats, setStats] = useState<Stats>({\n    contactsCount: 0,\n    groupsCount: 0,\n    templatesCount: 0,\n    scannedCardsCount: 0,\n    digitalCardsCount: 0,\n  });\n  const [subscriptionStatus, setSubscriptionStatus] = useState<SubscriptionStatus>({\n    hasSubscription: false\n  });\n  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!user) return;\n\n    const fetchStats = async () => {\n      try {\n        // Fetch counts for all collections\n        const collections = [\"contacts\", \"groups\", \"templates\", \"digitalCards\"];\n        const counts = await Promise.all(\n          collections.map(async (collectionName) => {\n            const collRef = collection(db, collectionName);\n            const q = query(collRef, where(\"ownerId\", \"==\", user.uid));\n            const snapshot = await getCountFromServer(q);\n            return snapshot.data().count;\n          })\n        );\n\n        // Get scanned cards count from contacts where source is business card scan\n        const scannedCardsQuery = query(\n          collection(db, \"contacts\"),\n          where(\"ownerId\", \"==\", user.uid),\n          where(\"source\", \"in\", [\"business_card_scan\", \"bulk_scan\"])\n        );\n        const scannedCardsSnapshot = await getCountFromServer(scannedCardsQuery);\n        const scannedCardsCount = scannedCardsSnapshot.data().count;\n\n        setStats({\n          contactsCount: counts[0],\n          groupsCount: counts[1],\n          templatesCount: counts[2],\n          digitalCardsCount: counts[3],\n          scannedCardsCount: scannedCardsCount,\n        });\n\n        // Fetch subscription status\n        try {\n          const subscriptionResponse = await fetch(`/api/subscription/${user.uid}`);\n          if (subscriptionResponse.ok) {\n            const subscription = await subscriptionResponse.json();\n            if (subscription) {\n              setSubscriptionStatus({\n                hasSubscription: true,\n                planName: subscription.planId === 'basic_yearly' ? 'Basic Plan' : 'Premium Plan',\n                endDate: new Date(subscription.endDate),\n                isActive: subscription.isActive\n              });\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching subscription:\", error);\n        }\n\n        // Fetch recent activities from contacts with source information\n        const recentContactsQuery = query(\n          collection(db, \"contacts\"),\n          where(\"ownerId\", \"==\", user.uid),\n          orderBy(\"createdAt\", \"desc\"),\n          limit(10)\n        );\n        const recentContactsSnapshot = await getDocs(recentContactsQuery);\n\n        const activities: RecentActivity[] = [];\n\n        recentContactsSnapshot.docs.forEach((doc) => {\n          const data = doc.data();\n          const timestamp = data.createdAt?.toDate() || new Date();\n          const source = data.source || 'manual';\n          \n          if (source === 'business_card_scan') {\n            activities.push({\n              id: doc.id,\n              type: 'scan',\n              description: `Scanned business card for ${data.firstName} ${data.lastName}`.trim(),\n              timestamp,\n              details: data.company ? `Company: ${data.company}` : undefined\n            });\n          } else if (source === 'bulk_scan') {\n            activities.push({\n              id: doc.id,\n              type: 'bulk_scan',\n              description: `Bulk scanned card for ${data.firstName} ${data.lastName}`.trim(),\n              timestamp,\n              details: data.company ? `Company: ${data.company}` : undefined\n            });\n          } else if (source === 'manual' || !source) {\n            activities.push({\n              id: doc.id,\n              type: 'contact_add',\n              description: `Added contact ${data.firstName} ${data.lastName}`.trim(),\n              timestamp,\n              details: data.company ? `Company: ${data.company}` : undefined\n            });\n          }\n        });\n\n        // Sort by timestamp and take the 5 most recent\n        activities.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        setRecentActivities(activities.slice(0, 5));\n\n      } catch (error) {\n        console.error(\"Error fetching dashboard data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStats();\n  }, [user]);\n\n  const statsCards = [\n    { name: \"Total Contacts\", count: stats.contactsCount, icon: Users, color: \"from-blue-500 to-blue-600\" },\n    { name: \"Groups\", count: stats.groupsCount, icon: Layers, color: \"from-green-500 to-green-600\" },\n    { name: \"Digital Cards\", count: stats.digitalCardsCount, icon: CreditCard, color: \"from-purple-500 to-purple-600\" },\n    { name: \"AI Processed Cards\", count: stats.scannedCardsCount, icon: Camera, color: \"from-indigo-500 to-indigo-600\" },\n  ];\n\n  const quickActions = [\n    { \n      name: \"Add Contact\", \n      description: \"Create a new contact entry\", \n      icon: UserPlus, \n      color: \"from-blue-50 to-blue-100 text-blue-600 border-blue-200\", \n      action: () => setLocation(\"/contacts\") \n    },\n    { \n      name: \"Create Template\", \n      description: \"Design a new message template\", \n      icon: FilePlus, \n      color: \"from-yellow-50 to-yellow-100 text-yellow-600 border-yellow-200\", \n      action: () => setLocation(\"/templates\") \n    },\n    { \n      name: \"Bulk Upload\", \n      description: \"Upload multiple business cards\", \n      icon: CloudUpload, \n      color: \"from-green-50 to-green-100 text-green-600 border-green-200\", \n      action: () => setLocation(\"/bulk-uploads\") \n    },\n    { \n      name: \"Digital Cards\", \n      description: \"Create and share smart cards.\", \n      icon: CreditCard, \n      color: \"from-purple-50 to-purple-100 text-purple-600 border-purple-200\", \n      action: () => setLocation(\"/digital-card\") \n    },\n  ];\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'scan':\n        return <Camera className=\"text-purple-600 h-6 w-6\" />;\n      case 'bulk_scan':\n        return <CloudUpload className=\"text-green-600 h-6 w-6\" />;\n      case 'contact_add':\n        return <UserPlus className=\"text-blue-600 h-6 w-6\" />;\n      default:\n        return <Users className=\"text-gray-600 h-6 w-6\" />;\n    }\n  };\n\n  const getActivityBgColor = (type: string) => {\n    switch (type) {\n      case 'scan':\n        return 'from-purple-100 to-purple-200';\n      case 'bulk_scan':\n        return 'from-green-100 to-green-200';\n      case 'contact_add':\n        return 'from-blue-100 to-blue-200';\n      default:\n        return 'from-gray-100 to-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"py-6 animate-pulse\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"h-8 bg-gradient-to-r from-gray-200 to-gray-300 rounded-lg w-48 mb-8\"></div>\n          <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div \n                key={i} \n                className=\"bg-gradient-to-br from-gray-200 to-gray-300 h-24 rounded-xl animate-pulse\"\n                style={{ animationDelay: `${i * 200}ms` }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6 animate-fadeIn\">\n      <style jsx>{`\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(20px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        @keyframes slideInUp {\n          from { opacity: 0; transform: translateY(30px) scale(0.95); }\n          to { opacity: 1; transform: translateY(0) scale(1); }\n        }\n        \n        @keyframes slideInLeft {\n          from { opacity: 0; transform: translateX(-30px); }\n          to { opacity: 1; transform: translateX(0); }\n        }\n        \n        @keyframes bounce {\n          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n          40% { transform: translateY(-10px); }\n          60% { transform: translateY(-5px); }\n        }\n        \n        @keyframes shimmer {\n          0% { transform: translateX(-100%); }\n          100% { transform: translateX(100%); }\n        }\n        \n        @keyframes spin {\n          from { transform: rotate(0deg); }\n          to { transform: rotate(360deg); }\n        }\n        \n        @keyframes pulse {\n          0%, 100% { opacity: 1; transform: scale(1); }\n          50% { opacity: 0.8; transform: scale(1.05); }\n        }\n        \n        .animate-fadeIn { animation: fadeIn 0.8s ease-out; }\n        .animate-slideInUp { animation: slideInUp 0.6s ease-out; }\n        .animate-slideInLeft { animation: slideInLeft 0.5s ease-out; }\n        .animate-bounce-gentle { animation: bounce 2s infinite; }\n        .animate-shimmer { animation: shimmer 2s linear infinite; }\n        .animate-spin-slow { animation: spin 8s linear infinite; }\n        .animate-pulse-gentle { animation: pulse 3s ease-in-out infinite; }\n        \n        .card-hover {\n          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n        }\n        \n        .card-hover:hover {\n          transform: translateY(-8px) scale(1.02);\n          box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n        }\n        \n        .action-hover {\n          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n        }\n        \n        .action-hover:hover {\n          transform: translateY(-4px) scale(1.03);\n          box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.2);\n        }\n        \n        .icon-spin:hover {\n          animation: spin 0.6s ease-in-out;\n        }\n        \n        .shimmer-effect {\n          position: relative;\n          overflow: hidden;\n        }\n        \n        .shimmer-effect::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: -100%;\n          width: 100%;\n          height: 100%;\n          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n          animation: shimmer 3s ease-in-out infinite;\n        }\n      `}</style>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <h1 \n          className=\"text-4xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 bg-clip-text text-transparent animate-slideInUp\"\n          style={{ animationDelay: '200ms', animationFillMode: 'both' }}\n        >\n          Dashboard\n        </h1>\n      </div>\n\n      {/* Subscription Status Card */}\n      {subscriptionStatus.hasSubscription ? (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8 mt-8\">\n          <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                    <Shield className=\"text-white h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-green-800\">Active Subscription</h3>\n                    <p className=\"text-sm text-green-600\">\n                      {subscriptionStatus.planName} ‚Ä¢ Valid until {subscriptionStatus.endDate?.toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-green-300 text-green-700 hover:bg-green-100\"\n                  onClick={() => setLocation(\"/pricing\")}\n                >\n                  <Crown className=\"h-4 w-4 mr-2\" />\n                  Manage\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8 mt-8\">\n          <Card className=\"bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200 shadow-lg\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-amber-500 rounded-xl flex items-center justify-center\">\n                    <Crown className=\"text-white h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-amber-800\">Free Plan</h3>\n                    <p className=\"text-sm text-amber-600\">\n                      Upgrade to unlock unlimited features and AI processing\n                    </p>\n                  </div>\n                </div>\n                <Button \n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                  onClick={() => setLocation(\"/pricing\")}\n                >\n                  <Crown className=\"h-4 w-4 mr-2\" />\n                  Upgrade Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8 mt-8\">\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {statsCards.map((card, i) => (\n            <div\n              key={card.name}\n              className=\"animate-slideInUp card-hover\"\n              style={{ \n                animationDelay: `${300 + i * 150}ms`, \n                animationFillMode: 'both' \n              }}\n            >\n              <Card className=\"relative overflow-hidden border-0 shadow-xl backdrop-blur-sm shimmer-effect\">\n                <CardContent className=\"p-6 relative z-10\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-14 h-14 bg-gradient-to-br ${card.color} rounded-2xl flex items-center justify-center shadow-lg icon-spin`}>\n                        <card.icon className=\"text-white h-7 w-7\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 mb-1\">{card.name}</p>\n                        <p \n                          className=\"text-3xl font-bold text-gray-900 animate-pulse-gentle\"\n                          style={{ \n                            animationDelay: `${800 + i * 100}ms`,\n                            animationFillMode: 'both'\n                          }}\n                        >\n                          {card.count}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8 mt-12\">\n        <h3 \n          className=\"text-xl font-semibold text-gray-900 mb-6 flex items-center animate-slideInUp\"\n          style={{ animationDelay: '1000ms', animationFillMode: 'both' }}\n        >\n          <span className=\"mr-3 text-2xl animate-bounce-gentle\">‚ö°</span>\n          Quick Actions\n        </h3>\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {quickActions.map((action, i) => (\n            <div\n              key={action.name}\n              className=\"animate-slideInUp action-hover\"\n              style={{ \n                animationDelay: `${1200 + i * 100}ms`, \n                animationFillMode: 'both' \n              }}\n            >\n              <Button\n                variant=\"outline\"\n                className={`h-auto p-6 flex flex-col items-start space-y-4 transition-all duration-300 border-2 bg-gradient-to-br ${action.color}`}\n                onClick={action.action}\n              >\n                <div className=\"rounded-2xl inline-flex p-4 shadow-md icon-spin\">\n                  <action.icon className=\"h-6 w-6\" />\n                </div>\n                <div className=\"text-left\">\n                  <h3 className=\"text-lg font-semibold mb-1\">{action.name}</h3>\n                  <p className=\"text-sm text-gray-600\">{action.description}</p>\n                </div>\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Recent Activities */}\n      {/* <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8 mt-12\">\n        <h3 \n          className=\"text-xl font-semibold text-gray-900 mb-6 flex items-center animate-slideInUp\"\n          style={{ animationDelay: '1600ms', animationFillMode: 'both' }}\n        >\n          <span className=\"mr-3 text-2xl animate-spin-slow\">üïí</span>\n          Recent Activities\n        </h3>\n        <div \n          className=\"animate-slideInUp\"\n          style={{ animationDelay: '1800ms', animationFillMode: 'both' }}\n        >\n          <Card className=\"shadow-xl border-0 overflow-hidden\">\n            <CardContent className=\"p-0\">\n              {recentActivities.length > 0 ? (\n                <ul className=\"divide-y divide-gray-100\">\n                  {recentActivities.map((activity, i) => (\n                    <li\n                      key={activity.id}\n                      className=\"animate-slideInLeft hover:bg-blue-50 transition-colors duration-200\"\n                      style={{ \n                        animationDelay: `${2000 + i * 100}ms`, \n                        animationFillMode: 'both' \n                      }}\n                    >\n                      <div className=\"px-6 py-5 flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <div className={`h-12 w-12 rounded-2xl bg-gradient-to-br ${getActivityBgColor(activity.type)} flex items-center justify-center shadow-md icon-spin`}>\n                            {getActivityIcon(activity.type)}\n                          </div>\n                          <div className=\"ml-4\">\n                            <p className=\"text-sm font-semibold text-gray-900\">{activity.description}</p>\n                            {activity.details && (\n                              <p className=\"text-xs text-gray-500 mt-0.5\">{activity.details}</p>\n                            )}\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {activity.timestamp.toLocaleDateString()} at {activity.timestamp.toLocaleTimeString([], { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </p>\n                          </div>\n                        </div>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-blue-600 hover:bg-blue-100 font-medium transition-colors duration-200\"\n                          onClick={() => setLocation(\"/contacts\")}\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View\n                        </Button>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <div className=\"px-6 py-12 text-center text-gray-500 animate-pulse-gentle\">\n                  <Camera className=\"mx-auto h-12 w-12 text-gray-300 mb-4\" />\n                  <p className=\"text-lg font-medium mb-2\">No recent activities</p>\n                  <p className=\"text-sm\">Start scanning business cards or adding contacts to see activities here</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div> */}\n    </div>\n  );\n}","size_bytes":20876},"client/src/pages/DigitalCard/DigitalCard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, query, where, getDocs, addDoc, updateDoc, doc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { uploadToStorage } from \"@/utils/upload\";\nimport { buildVCard } from \"@/utils/vcard\";\nimport { generateQrFromText } from \"@/utils/qr\";\nimport { useUsageLimits } from \"@/hooks/useUsageLimits\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport UsageLimitModal from \"@/components/UsageLimitModal\";\nimport { \n  Save, Download, Link as LinkIcon, QrCode, Camera, Mail, Phone, \n  Globe, MapPin, Briefcase, Award, Users, Palette, Sparkles,\n  Building2, Star, Heart, Zap, Crown, Coffee, Laptop, Paintbrush,\n  Rocket, Diamond, Square, Circle, Hexagon\n} from \"lucide-react\";\n\ninterface DigitalCard {\n  id?: string;\n  ownerId: string;\n  publicId: string;\n  avatarUrl?: string;\n  companyLogoUrl?: string;\n  firstName: string;\n  lastName: string;\n  title: string;\n  company: string;\n  email: string;\n  phone: string;\n  website: string;\n  address: string;\n  services: string;\n  testimonials: string;\n  isPublic: boolean;\n  template: string;\n  primaryColor: string;\n  secondaryColor: string;\n  qrStyle: string;\n  updatedAt: Date;\n}\n\nconst TEMPLATES = [\n  {\n    id: 'modern',\n    name: 'Modern Gradient',\n    preview: 'üåà',\n    // description: 'Clean design with vibrant gradients',\n    icon: Sparkles\n  },\n  {\n    id: 'professional',\n    name: 'Professional',\n    preview: 'üíº',\n    // description: 'Classic business card style',\n    icon: Briefcase\n  },\n  {\n    id: 'creative',\n    name: 'Creative',\n    preview: 'üé®',\n    // description: 'Bold and artistic design',\n    icon: Paintbrush\n  },\n  {\n    id: 'minimal',\n    name: 'Minimal',\n    preview: '‚ö™',\n    // description: 'Clean and simple layout',\n    icon: Users\n  },\n  {\n    id: 'luxury',\n    name: 'Luxury',\n    // preview: 'üëë',\n    // description: 'Premium golden design',\n    icon: Crown\n  },\n  {\n    id: 'tech',\n    name: 'Tech',\n    preview: 'üíª',\n    // description: 'Modern tech-focused design',\n    icon: Laptop\n  },\n  {\n    id: 'elegant',\n    name: 'Elegant',\n    preview: 'üíé',\n    // description: 'Sophisticated and refined',\n    icon: Diamond\n  },\n  {\n    id: 'startup',\n    name: 'Startup',\n    preview: 'üöÄ',\n    // description: 'Dynamic startup vibe',\n    icon: Rocket\n  },\n  {\n    id: 'coffee',\n    name: 'Coffee Shop',\n    preview: '‚òï',\n    // description: 'Warm and inviting design',\n    icon: Coffee\n  },\n  {\n    id: 'neon',\n    name: 'Neon',\n    preview: '‚ö°',\n    // description: 'Electric neon style',\n    icon: Zap\n  }\n];\n\nconst COLOR_SCHEMES = [\n  { primary: '#3B82F6', secondary: '#1E40AF', name: 'Ocean Blue' },\n  { primary: '#10B981', secondary: '#047857', name: 'Emerald Green' },\n  { primary: '#8B5CF6', secondary: '#5B21B6', name: 'Royal Purple' },\n  { primary: '#F59E0B', secondary: '#D97706', name: 'Golden Orange' },\n  { primary: '#EF4444', secondary: '#DC2626', name: 'Ruby Red' },\n  { primary: '#EC4899', secondary: '#BE185D', name: 'Pink Rose' },\n  { primary: '#06B6D4', secondary: '#0891B2', name: 'Sky Cyan' },\n  { primary: '#84CC16', secondary: '#65A30D', name: 'Lime Green' },\n  { primary: '#6366F1', secondary: '#4338CA', name: 'Indigo Blue' },\n  { primary: '#F97316', secondary: '#EA580C', name: 'Sunset Orange' }\n];\n\nconst QR_STYLES = [\n  { id: 'square', name: 'Square', icon: Square, description: 'Classic square dots' },\n  { id: 'rounded', name: 'Rounded', icon: Circle, description: 'Smooth rounded corners' },\n  { id: 'dots', name: 'Dots', icon: Circle, description: 'Clean circular dots' },\n  { id: 'hearts', name: 'Hearts', icon: Heart, description: 'Romantic heart shapes' },\n  { id: 'stars', name: 'Stars', icon: Star, description: 'Elegant star pattern' },\n  { id: 'hexagon', name: 'Hexagon', icon: Hexagon, description: 'Modern hexagonal design' },\n];\n\nexport default function AdvancedDigitalCard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { usage, limits, canAddDigitalCard, refreshUsage } = useUsageLimits();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [uploadingLogo, setUploadingLogo] = useState(false);\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>(\"\");\n  const [showLimitModal, setShowLimitModal] = useState(false);\n  const [digitalCard, setDigitalCard] = useState<DigitalCard>({\n    ownerId: user?.uid || \"\",\n    publicId: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    title: \"\",\n    company: \"\",\n    email: \"\",\n    phone: \"\",\n    website: \"\",\n    address: \"\",\n    services: \"\",\n    testimonials: \"\",\n    isPublic: true,\n    template: 'modern',\n    primaryColor: '#3B82F6',\n    secondaryColor: '#1E40AF',\n    qrStyle: 'square',\n    updatedAt: new Date(),\n  });\n\n  useEffect(() => {\n    if (!user) return;\n    fetchDigitalCard();\n  }, [user]);\n\n  useEffect(() => {\n    if (digitalCard.firstName || digitalCard.lastName) {\n      generateQRCode();\n    }\n  }, [digitalCard]);\n\n  const fetchDigitalCard = async () => {\n    try {\n      const cardsQuery = query(collection(db, \"digitalCards\"), where(\"ownerId\", \"==\", user!.uid));\n      const cardsSnapshot = await getDocs(cardsQuery);\n      \n      if (!cardsSnapshot.empty) {\n        const cardData = cardsSnapshot.docs[0].data();\n        setDigitalCard({\n          id: cardsSnapshot.docs[0].id,\n          ...cardData,\n          updatedAt: cardData.updatedAt?.toDate() || new Date(),\n        } as DigitalCard);\n      } else {\n        const publicId = `${user!.uid.slice(0, 8)}-${Date.now().toString(36)}`;\n        setDigitalCard(prev => ({ ...prev, publicId }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching digital card:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch digital card\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateQRCode = async () => {\n    try {\n      const vCardData = buildVCard({\n        firstName: digitalCard.firstName,\n        lastName: digitalCard.lastName,\n        title: digitalCard.title,\n        company: digitalCard.company,\n        email: digitalCard.email,\n        phone: digitalCard.phone,\n        website: digitalCard.website,\n        address: digitalCard.address,\n      });\n      \n      const qrUrl = await generateQrFromText(vCardData);\n      setQrCodeUrl(qrUrl);\n    } catch (error) {\n      console.error(\"Error generating QR code:\", error);\n    }\n  };\n\n  const handleAvatarUpload = async (file: File) => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    try {\n      const timestamp = Date.now();\n      const avatarUrl = await uploadToStorage(file, `users/${user!.uid}/avatar-${timestamp}.${file.name.split('.').pop()}`);\n      setDigitalCard(prev => ({ ...prev, avatarUrl }));\n      \n      toast({\n        title: \"Success\",\n        description: \"Profile picture updated successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading avatar:\", error);\n      toast({\n        title: \"Upload Error\",\n        description: error.message || \"Failed to upload profile picture\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleCompanyLogoUpload = async (file: File) => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadingLogo(true);\n    try {\n      const timestamp = Date.now();\n      const logoUrl = await uploadToStorage(file, `users/${user!.uid}/logo-${timestamp}.${file.name.split('.').pop()}`);\n      setDigitalCard(prev => ({ ...prev, companyLogoUrl: logoUrl }));\n      \n      toast({\n        title: \"Success\",\n        description: \"Company logo updated successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading logo:\", error);\n      toast({\n        title: \"Upload Error\",\n        description: error.message || \"Failed to upload company logo\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingLogo(false);\n    }\n  };\n\n  const handleSaveProfile = async () => {\n    // Check usage limits for new digital cards\n    if (!digitalCard.id && !canAddDigitalCard) {\n      setShowLimitModal(true);\n      return;\n    }\n\n    setSaving(true);\n    \n    try {\n      const cardData = {\n        ...digitalCard,\n        ownerId: user!.uid,\n        updatedAt: serverTimestamp(),\n      };\n\n      if (digitalCard.id) {\n        await updateDoc(doc(db, \"digitalCards\", digitalCard.id), cardData);\n      } else {\n        const docRef = await addDoc(collection(db, \"digitalCards\"), cardData);\n        setDigitalCard(prev => ({ ...prev, id: docRef.id }));\n        \n        // Refresh usage after creating new digital card\n        await refreshUsage();\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Digital card saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving digital card:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save digital card\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDownloadVCard = () => {\n    const vCardData = buildVCard({\n      firstName: digitalCard.firstName,\n      lastName: digitalCard.lastName,\n      title: digitalCard.title,\n      company: digitalCard.company,\n      email: digitalCard.email,\n      phone: digitalCard.phone,\n      website: digitalCard.website,\n      address: digitalCard.address,\n    });\n\n    const blob = new Blob([vCardData], { type: 'text/vcard' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${digitalCard.firstName}_${digitalCard.lastName}.vcf`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Success\",\n      description: \"vCard downloaded successfully\",\n    });\n  };\n\n  const handleDownloadQR = () => {\n    if (!qrCodeUrl) return;\n\n    const a = document.createElement('a');\n    a.href = qrCodeUrl;\n    a.download = `${digitalCard.firstName}_${digitalCard.lastName}_QR.png`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    toast({\n      title: \"Success\",\n      description: \"QR code downloaded successfully\",\n    });\n  };\n\n  const handleCopyShareLink = () => {\n    const baseUrl = import.meta.env.VITE_APP_PUBLIC_BASE_URL || window.location.origin;\n    const shareUrl = `${baseUrl}/share/${digitalCard.publicId}`;\n    \n    navigator.clipboard.writeText(shareUrl).then(() => {\n      toast({\n        title: \"Success\",\n        description: \"Share link copied to clipboard\",\n      });\n    });\n  };\n\n  const handleFieldChange = (field: keyof DigitalCard, value: string) => {\n    setDigitalCard(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleColorSchemeChange = (primary: string, secondary: string) => {\n    setDigitalCard(prev => ({\n      ...prev,\n      primaryColor: primary,\n      secondaryColor: secondary\n    }));\n  };\n\n  const renderCardPreview = () => {\n    const { template, primaryColor, secondaryColor } = digitalCard;\n    \n    const baseClasses = \"w-full max-w-sm mx-auto rounded-2xl shadow-2xl overflow-hidden transform transition-all duration-300 hover:scale-105\";\n    \n    switch (template) {\n      case 'modern':\n        return (\n          <div className={`${baseClasses} bg-gradient-to-br text-white`} \n               style={{ background: `linear-gradient(135deg, ${primaryColor}, ${secondaryColor}, #ec4899)` }}>\n            <div className=\"relative p-8\">\n              <div className=\"absolute top-4 right-4\">\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-lg bg-white/20 p-2\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <div className=\"relative inline-block\">\n                  <Avatar className=\"mx-auto h-24 w-24 mb-4 ring-4 ring-white/30\">\n                    <AvatarImage src={digitalCard.avatarUrl} />\n                    <AvatarFallback className=\"bg-white/20 text-white text-2xl font-bold\">\n                      {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"absolute -bottom-2 -right-2 bg-yellow-400 rounded-full p-2\">\n                    <Sparkles className=\"h-4 w-4 text-yellow-800\" />\n                  </div>\n                </div>\n                <h2 className=\"text-2xl font-bold mb-1\">{digitalCard.firstName} {digitalCard.lastName}</h2>\n                <p className=\"text-blue-100 font-medium mb-1\">{digitalCard.title}</p>\n                <p className=\"text-blue-200 text-sm\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-white/10 rounded-lg p-3 backdrop-blur\">\n                    <Mail className=\"h-4 w-4 mr-3 text-blue-200\" />\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-white/10 rounded-lg p-3 backdrop-blur\">\n                    <Phone className=\"h-4 w-4 mr-3 text-blue-200\" />\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n                {digitalCard.website && (\n                  <div className=\"flex items-center text-sm bg-white/10 rounded-lg p-3 backdrop-blur\">\n                    <Globe className=\"h-4 w-4 mr-3 text-blue-200\" />\n                    <span className=\"truncate\">{digitalCard.website}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-white rounded-xl\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-20 h-20\" />\n                  </div>\n                  <p className=\"mt-2 text-xs text-blue-200\">Scan to connect</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'professional':\n        return (\n          <div className={`${baseClasses} bg-white border-2`} style={{ borderColor: primaryColor }}>\n            <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Avatar className=\"h-16 w-16 ring-2\" style={{ '--tw-ring-color': primaryColor } as any}>\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback style={{ backgroundColor: primaryColor, color: 'white' }} className=\"text-lg font-bold\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-16 h-16 object-contain\" />\n                )}\n              </div>\n              \n              <h2 className=\"text-xl font-bold text-gray-800 mb-1\">{digitalCard.firstName} {digitalCard.lastName}</h2>\n              <p style={{ color: primaryColor }} className=\"font-semibold mb-1\">{digitalCard.title}</p>\n              <p className=\"text-gray-600 text-sm\">{digitalCard.company}</p>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 gap-3\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-8 h-8 rounded-full mr-3 flex items-center justify-center\" style={{ backgroundColor: primaryColor }}>\n                      <Mail className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-8 h-8 rounded-full mr-3 flex items-center justify-center\" style={{ backgroundColor: primaryColor }}>\n                      <Phone className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n                {digitalCard.website && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-8 h-8 rounded-full mr-3 flex items-center justify-center\" style={{ backgroundColor: primaryColor }}>\n                      <Globe className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <span className=\"truncate\">{digitalCard.website}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"mt-4 text-center pt-4 border-t border-gray-200\">\n                  <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16 mx-auto\" />\n                  <p className=\"mt-2 text-xs text-gray-500\">Scan to save contact</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'creative':\n        return (\n          <div className={`${baseClasses} text-white relative overflow-hidden`}\n               style={{ background: `linear-gradient(135deg, ${primaryColor}, ${secondaryColor})` }}>\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16\"></div>\n            <div className=\"absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full translate-y-12 -translate-x-12\"></div>\n            \n            <div className=\"relative p-8 z-10\">\n              <div className=\"flex items-center justify-between mb-6\">\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-xl bg-white/20 p-2\" />\n                )}\n                <div className=\"flex space-x-1\">\n                  <div className=\"w-2 h-2 bg-yellow-300 rounded-full\"></div>\n                  <div className=\"w-2 h-2 bg-green-300 rounded-full\"></div>\n                  <div className=\"w-2 h-2 bg-blue-300 rounded-full\"></div>\n                </div>\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <div className=\"relative inline-block\">\n                  <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-4 ring-white/40\">\n                    <AvatarImage src={digitalCard.avatarUrl} />\n                    <AvatarFallback className=\"bg-white/20 text-white text-xl font-bold\">\n                      {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"absolute -top-2 -right-2 bg-yellow-400 rounded-full p-1\">\n                    <Star className=\"h-3 w-3 text-yellow-800\" />\n                  </div>\n                </div>\n                <h2 className=\"text-2xl font-black mb-2 bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent\">\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <p className=\"text-orange-100 font-bold text-lg\">{digitalCard.title}</p>\n                <p className=\"text-pink-200\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-black/20 rounded-xl p-3 backdrop-blur\">\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full mr-3 flex items-center justify-center\">\n                      <Mail className=\"h-3 w-3 text-white\" />\n                    </div>\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-black/20 rounded-xl p-3 backdrop-blur\">\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full mr-3 flex items-center justify-center\">\n                      <Phone className=\"h-3 w-3 text-white\" />\n                    </div>\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-white/90 rounded-2xl backdrop-blur\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'minimal':\n        return (\n          <div className={`${baseClasses} bg-white shadow-xl border border-gray-100`}>\n            <div className=\"p-8\">\n              <div className=\"flex items-start justify-between mb-8\">\n                <div>\n                  <h2 className=\"text-2xl font-light text-gray-800 mb-1\">{digitalCard.firstName}</h2>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{digitalCard.lastName}</h2>\n                  <div className=\"w-16 h-0.5\" style={{ backgroundColor: primaryColor }}></div>\n                </div>\n                {digitalCard.avatarUrl && (\n                  <Avatar className=\"h-16 w-16\">\n                    <AvatarImage src={digitalCard.avatarUrl} />\n                    <AvatarFallback style={{ backgroundColor: primaryColor, color: 'white' }} className=\"text-lg\">\n                      {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n              </div>\n\n              <div className=\"mb-6\">\n                <p className=\"text-gray-600 font-medium mb-1\">{digitalCard.title}</p>\n                <div className=\"flex items-center\">\n                  {digitalCard.companyLogoUrl && (\n                    <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-6 h-6 mr-2 object-contain\" />\n                  )}\n                  <p className=\"text-gray-500\">{digitalCard.company}</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-1 h-1 rounded-full mr-3\" style={{ backgroundColor: primaryColor }}></div>\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-1 h-1 rounded-full mr-3\" style={{ backgroundColor: primaryColor }}></div>\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n                {digitalCard.website && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <div className=\"w-1 h-1 rounded-full mr-3\" style={{ backgroundColor: primaryColor }}></div>\n                    <span className=\"truncate\">{digitalCard.website}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-12 h-12 mx-auto opacity-60\" />\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'luxury':\n        return (\n          <div className={`${baseClasses} bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white relative`}>\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-400/10 via-transparent to-yellow-600/10\"></div>\n            \n            <div className=\"relative p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-lg flex items-center justify-center\">\n                  <Crown className=\"h-5 w-5 text-black\" />\n                </div>\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-lg bg-yellow-400/20 p-2\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-8\">\n                <Avatar className=\"mx-auto h-24 w-24 mb-4 ring-4 ring-yellow-400/50\">\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-yellow-400 to-yellow-600 text-black text-2xl font-bold\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-3xl font-bold mb-2 bg-gradient-to-r from-yellow-300 via-yellow-400 to-yellow-500 bg-clip-text text-transparent\">\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <div className=\"w-16 h-px bg-gradient-to-r from-transparent via-yellow-400 to-transparent mx-auto mb-2\"></div>\n                <p className=\"text-yellow-200 font-medium text-lg\">{digitalCard.title}</p>\n                <p className=\"text-gray-300\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-white/5 rounded-lg p-3 border border-yellow-400/20\">\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full mr-3 flex items-center justify-center\">\n                      <Mail className=\"h-3 w-3 text-black\" />\n                    </div>\n                    <span className=\"text-gray-200\">{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-white/5 rounded-lg p-3 border border-yellow-400/20\">\n                    <div className=\"w-6 h-6 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full mr-3 flex items-center justify-center\">\n                      <Phone className=\"h-3 w-3 text-black\" />\n                    </div>\n                    <span className=\"text-gray-200\">{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-xl\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                  <p className=\"mt-2 text-xs text-yellow-200\">Exclusive Access</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'tech':\n        return (\n          <div className={`${baseClasses} bg-gradient-to-br from-gray-900 to-gray-700 text-white relative overflow-hidden`}>\n            <div className=\"absolute inset-0 opacity-10\">\n              <div className=\"absolute top-4 left-4 w-20 h-20 border border-cyan-400 rounded-lg rotate-45\"></div>\n              <div className=\"absolute bottom-8 right-8 w-16 h-16 border border-purple-400 rounded-full\"></div>\n            </div>\n            \n            <div className=\"relative p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                </div>\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-lg bg-white/10 p-2\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-2 ring-cyan-400\">\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback style={{ backgroundColor: primaryColor, color: 'white' }} className=\"text-xl font-mono\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-mono font-bold mb-2 text-cyan-400\">\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <p className=\"text-purple-300 font-medium\">{digitalCard.title}</p>\n                <p className=\"text-gray-400 text-sm font-mono\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-gray-800 rounded-lg p-3 border border-gray-600\">\n                    <Mail className=\"h-4 w-4 mr-3 text-cyan-400\" />\n                    <span className=\"font-mono\">{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-gray-800 rounded-lg p-3 border border-gray-600\">\n                    <Phone className=\"h-4 w-4 mr-3 text-purple-400\" />\n                    <span className=\"font-mono\">{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-gray-800 rounded-xl border border-gray-600\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'elegant':\n        return (\n          <div className={`${baseClasses} bg-gradient-to-br from-purple-50 to-pink-50 border border-purple-200`}>\n            <div className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-2\" style={{ '--tw-ring-color': primaryColor } as any}>\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback style={{ backgroundColor: primaryColor, color: 'white' }} className=\"text-xl font-serif\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-serif mb-2\" style={{ color: primaryColor }}>\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <div className=\"w-24 h-px mx-auto mb-3\" style={{ backgroundColor: primaryColor }}></div>\n                <p className=\"text-purple-700 font-medium italic\">{digitalCard.title}</p>\n                <p className=\"text-purple-600 text-sm\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-4\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center justify-center text-sm text-purple-700\">\n                    <Mail className=\"h-4 w-4 mr-3\" style={{ color: primaryColor }} />\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center justify-center text-sm text-purple-700\">\n                    <Phone className=\"h-4 w-4 mr-3\" style={{ color: primaryColor }} />\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"mt-6 text-center\">\n                  <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-14 h-14 mx-auto opacity-70\" />\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'startup':\n        return (\n          <div className={`${baseClasses} text-white relative overflow-hidden`}\n               style={{ background: `linear-gradient(135deg, ${primaryColor}, ${secondaryColor})` }}>\n            <div className=\"absolute top-0 right-0 w-40 h-40 bg-white/5 rounded-full -translate-y-20 translate-x-20\"></div>\n            <div className=\"absolute bottom-0 left-0 w-32 h-32 bg-white/5 rounded-full translate-y-16 -translate-x-16\"></div>\n            \n            <div className=\"relative p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Rocket className=\"h-6 w-6 text-yellow-300\" />\n                  <span className=\"text-yellow-300 font-bold text-sm\">STARTUP</span>\n                </div>\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-xl bg-white/10 p-2\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-4 ring-white/30\">\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback className=\"bg-white/20 text-white text-xl font-bold\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-bold mb-2\">\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <p className=\"text-yellow-200 font-semibold text-lg\">{digitalCard.title}</p>\n                <p className=\"text-white/80\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-white/10 rounded-lg p-3 backdrop-blur\">\n                    <Mail className=\"h-4 w-4 mr-3 text-yellow-300\" />\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-white/10 rounded-lg p-3 backdrop-blur\">\n                    <Phone className=\"h-4 w-4 mr-3 text-yellow-300\" />\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-white/90 rounded-2xl\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'coffee':\n        return (\n          <div className={`${baseClasses} bg-gradient-to-br from-amber-100 to-orange-100 border border-amber-200`}>\n            <div className=\"p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <Coffee className=\"h-8 w-8 text-amber-700\" />\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-lg object-contain\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-4 ring-amber-300\">\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback className=\"bg-amber-600 text-white text-xl font-bold\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-bold text-amber-800 mb-2\">\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <p className=\"text-amber-700 font-medium text-lg\">{digitalCard.title}</p>\n                <p className=\"text-amber-600\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-white/60 rounded-lg p-3\">\n                    <Mail className=\"h-4 w-4 mr-3 text-amber-700\" />\n                    <span className=\"text-amber-800\">{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-white/60 rounded-lg p-3\">\n                    <Phone className=\"h-4 w-4 mr-3 text-amber-700\" />\n                    <span className=\"text-amber-800\">{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-white rounded-xl shadow-sm\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'neon':\n        return (\n          <div className={`${baseClasses} bg-black text-white relative overflow-hidden`}>\n            <div className=\"absolute inset-0\">\n              <div className=\"absolute top-4 left-4 w-16 h-16 border-2 border-cyan-400 rounded-lg animate-pulse\"></div>\n              <div className=\"absolute top-8 right-8 w-12 h-12 border-2 border-pink-400 rounded-full animate-pulse\"></div>\n              <div className=\"absolute bottom-8 left-8 w-14 h-14 border-2 border-yellow-400 rounded-lg rotate-45 animate-pulse\"></div>\n            </div>\n            \n            <div className=\"relative p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Zap className=\"h-6 w-6 text-cyan-400 animate-pulse\" />\n                  <span className=\"text-cyan-400 font-bold text-sm tracking-wider\">NEON</span>\n                </div>\n                {digitalCard.companyLogoUrl && (\n                  <img src={digitalCard.companyLogoUrl} alt=\"Company\" className=\"w-12 h-12 rounded-lg bg-white/5 p-2\" />\n                )}\n              </div>\n              \n              <div className=\"text-center mb-6\">\n                <Avatar className=\"mx-auto h-20 w-20 mb-4 ring-2 ring-cyan-400\">\n                  <AvatarImage src={digitalCard.avatarUrl} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-cyan-500 to-pink-500 text-white text-xl font-bold\">\n                    {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-bold mb-2 text-cyan-400\" style={{ textShadow: '0 0 10px currentColor' }}>\n                  {digitalCard.firstName} {digitalCard.lastName}\n                </h2>\n                <p className=\"text-pink-400 font-bold text-lg\" style={{ textShadow: '0 0 8px currentColor' }}>\n                  {digitalCard.title}\n                </p>\n                <p className=\"text-yellow-300\">{digitalCard.company}</p>\n              </div>\n\n              <div className=\"space-y-3 mb-6\">\n                {digitalCard.email && (\n                  <div className=\"flex items-center text-sm bg-gray-900/50 rounded-lg p-3 border border-cyan-400/30\">\n                    <Mail className=\"h-4 w-4 mr-3 text-cyan-400\" />\n                    <span>{digitalCard.email}</span>\n                  </div>\n                )}\n                {digitalCard.phone && (\n                  <div className=\"flex items-center text-sm bg-gray-900/50 rounded-lg p-3 border border-pink-400/30\">\n                    <Phone className=\"h-4 w-4 mr-3 text-pink-400\" />\n                    <span>{digitalCard.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {qrCodeUrl && (\n                <div className=\"text-center\">\n                  <div className=\"inline-block p-3 bg-white rounded-xl\">\n                    <img src={qrCodeUrl} alt=\"QR Code\" className=\"w-16 h-16\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      default:\n        return renderCardPreview();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-64 mb-8\"></div>\n            <div className=\"lg:grid lg:grid-cols-12 lg:gap-8\">\n              <div className=\"lg:col-span-7 bg-gray-200 h-96 rounded-lg\"></div>\n              <div className=\"lg:col-span-5 bg-gray-200 h-96 rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6 bg-gradient-to-br from-blue-50 via-white to-purple-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-3xl font-bold leading-7 text-gray-900 sm:text-4xl sm:truncate bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Advanced Digital Card Studio\n            </h2>\n            <p className=\"mt-2 text-lg text-gray-600\">Create stunning, professional digital business cards with advanced templates</p>\n          </div>\n        </div>\n\n        <div className=\"lg:grid lg:grid-cols-12 lg:gap-8\">\n          {/* Form Section - Scrollable */}\n          <div className=\"lg:col-span-7\">\n            <div className=\"space-y-6 max-h-[calc(100vh-120px)] overflow-y-auto pr-4 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n              {/* Template Selection */}\n              <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-6 flex items-center\">\n                    <Palette className=\"h-5 w-5 mr-2 text-purple-600\" />\n                    Choose Your Template\n                  </h3>\n                  <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                    {TEMPLATES.map((template) => {\n                      const IconComponent = template.icon;\n                      return (\n                        <div\n                          key={template.id}\n                          onClick={() => handleFieldChange('template', template.id)}\n                          className={`cursor-pointer p-4 rounded-xl border-2 transition-all duration-200 hover:shadow-lg hover:scale-105 ${\n                            digitalCard.template === template.id\n                              ? 'border-purple-500 bg-purple-50 shadow-md ring-2 ring-purple-200'\n                              : 'border-gray-200 hover:border-purple-300'\n                          }`}\n                        >\n                          <div className=\"text-center\">\n                            <div className=\"text-3xl mb-2\">{template.preview}</div>\n                            <IconComponent className={`h-5 w-5 mx-auto mb-2 ${\n                              digitalCard.template === template.id ? 'text-purple-600' : 'text-gray-400'\n                            }`} />\n                            <h4 className={`font-medium text-sm mb-1 ${\n                              digitalCard.template === template.id ? 'text-purple-800' : 'text-gray-900'\n                            }`}>\n                              {template.name}\n                            </h4>\n                            <p className=\"text-xs text-gray-500\">{template.description}</p>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Color Scheme Selection */}\n              <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                    <Sparkles className=\"h-5 w-5 mr-2 text-blue-600\" />\n                    Color Scheme\n                  </h3>\n                  <div className=\"grid grid-cols-5 gap-3\">\n                    {COLOR_SCHEMES.map((scheme) => (\n                      <div\n                        key={scheme.name}\n                        className={`cursor-pointer rounded-lg p-3 transition-all duration-200 hover:scale-105 ${\n                          digitalCard.primaryColor === scheme.primary\n                            ? 'ring-4 ring-gray-800 shadow-xl'\n                            : 'hover:shadow-lg'\n                        }`}\n                        onClick={() => handleColorSchemeChange(scheme.primary, scheme.secondary)}\n                      >\n                        <div\n                          className=\"w-full h-12 rounded-md mb-2 shadow-md\"\n                          style={{ backgroundColor: scheme.primary }}\n                        />\n                        <p className=\"text-xs font-medium text-gray-700 text-center\">{scheme.name}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Profile Information */}\n              <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-green-600\" />\n                    Profile Information\n                  </h3>\n                  \n                  {/* Profile Picture & Company Logo Upload */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    {/* Profile Picture */}\n                    <div>\n                      <Label className=\"block text-sm font-medium text-gray-700 mb-3\">Profile Picture</Label>\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"h-16 w-16 ring-2 ring-gray-200\">\n                          <AvatarImage src={digitalCard.avatarUrl} />\n                          <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-500 text-white text-lg font-bold\">\n                            {digitalCard.firstName.charAt(0)}{digitalCard.lastName.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <Button\n                            variant=\"outline\"\n                            disabled={uploading}\n                            onClick={() => {\n                              const input = document.createElement('input');\n                              input.type = 'file';\n                              input.accept = 'image/jpeg,image/png,image/gif,image/webp';\n                              input.onchange = (e) => {\n                                const files = (e.target as HTMLInputElement).files;\n                                if (files && files[0]) handleAvatarUpload(files[0]);\n                              };\n                              input.click();\n                            }}\n                            className=\"w-full\"\n                          >\n                            <Camera className=\"h-4 w-4 mr-2\" />\n                            {uploading ? \"Uploading...\" : \"Upload Photo\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Company Logo */}\n                    <div>\n                      <Label className=\"block text-sm font-medium text-gray-700 mb-3\">Company Logo</Label>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"h-16 w-16 rounded-lg bg-gray-100 border-2 border-dashed border-gray-300 flex items-center justify-center\">\n                          {digitalCard.companyLogoUrl ? (\n                            <img src={digitalCard.companyLogoUrl} alt=\"Company Logo\" className=\"h-12 w-12 object-contain\" />\n                          ) : (\n                            <Building2 className=\"h-8 w-8 text-gray-400\" />\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <Button\n                            variant=\"outline\"\n                            disabled={uploadingLogo}\n                            onClick={() => {\n                              const input = document.createElement('input');\n                              input.type = 'file';\n                              input.accept = 'image/jpeg,image/png,image/gif,image/webp,image/svg+xml';\n                              input.onchange = (e) => {\n                                const files = (e.target as HTMLInputElement).files;\n                                if (files && files[0]) handleCompanyLogoUpload(files[0]);\n                              };\n                              input.click();\n                            }}\n                            className=\"w-full\"\n                          >\n                            <Building2 className=\"h-4 w-4 mr-2\" />\n                            {uploadingLogo ? \"Uploading...\" : \"Upload Logo\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Form Fields */}\n                  <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Users className=\"h-4 w-4 mr-1\" />\n                        First Name\n                      </Label>\n                      <Input\n                        id=\"firstName\"\n                        value={digitalCard.firstName}\n                        onChange={(e) => handleFieldChange('firstName', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Enter your first name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Users className=\"h-4 w-4 mr-1\" />\n                        Last Name\n                      </Label>\n                      <Input\n                        id=\"lastName\"\n                        value={digitalCard.lastName}\n                        onChange={(e) => handleFieldChange('lastName', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Enter your last name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"title\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Briefcase className=\"h-4 w-4 mr-1\" />\n                        Job Title\n                      </Label>\n                      <Input\n                        id=\"title\"\n                        value={digitalCard.title}\n                        onChange={(e) => handleFieldChange('title', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Your professional title\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"company\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Building2 className=\"h-4 w-4 mr-1\" />\n                        Company\n                      </Label>\n                      <Input\n                        id=\"company\"\n                        value={digitalCard.company}\n                        onChange={(e) => handleFieldChange('company', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Your company name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"email\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Mail className=\"h-4 w-4 mr-1\" />\n                        Email\n                      </Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={digitalCard.email}\n                        onChange={(e) => handleFieldChange('email', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"your@email.com\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Phone className=\"h-4 w-4 mr-1\" />\n                        Phone\n                      </Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={digitalCard.phone}\n                        onChange={(e) => handleFieldChange('phone', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"+1 (555) 123-4567\"\n                      />\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <Label htmlFor=\"website\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Globe className=\"h-4 w-4 mr-1\" />\n                        Website\n                      </Label>\n                      <Input\n                        id=\"website\"\n                        type=\"url\"\n                        value={digitalCard.website}\n                        onChange={(e) => handleFieldChange('website', e.target.value)}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"https://yourwebsite.com\"\n                      />\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <Label htmlFor=\"address\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <MapPin className=\"h-4 w-4 mr-1\" />\n                        Address\n                      </Label>\n                      <Textarea\n                        id=\"address\"\n                        value={digitalCard.address}\n                        onChange={(e) => handleFieldChange('address', e.target.value)}\n                        rows={3}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Your business address...\"\n                      />\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <Label htmlFor=\"services\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Award className=\"h-4 w-4 mr-1\" />\n                        Services\n                      </Label>\n                      <Textarea\n                        id=\"services\"\n                        value={digitalCard.services}\n                        onChange={(e) => handleFieldChange('services', e.target.value)}\n                        rows={3}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Describe your services or expertise...\"\n                      />\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <Label htmlFor=\"testimonials\" className=\"flex items-center text-sm font-medium text-gray-700 mb-2\">\n                        <Heart className=\"h-4 w-4 mr-1\" />\n                        Client Testimonials\n                      </Label>\n                      <Textarea\n                        id=\"testimonials\"\n                        value={digitalCard.testimonials}\n                        onChange={(e) => handleFieldChange('testimonials', e.target.value)}\n                        rows={3}\n                        className=\"border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n                        placeholder=\"Share what clients say about your work...\"\n                      />\n                    </div>\n\n                    {/* QR Code Style Selector */}\n                    <div className=\"sm:col-span-2\">\n                      <Label className=\"flex items-center text-sm font-medium text-gray-700 mb-3\">\n                        <QrCode className=\"h-4 w-4 mr-1\" />\n                        QR Code Style\n                      </Label>\n                      <div className=\"grid grid-cols-3 gap-3\">\n                        {QR_STYLES.map((style) => (\n                          <div\n                            key={style.id}\n                            className={`cursor-pointer rounded-lg p-3 border-2 transition-all duration-200 hover:scale-105 ${\n                              digitalCard.qrStyle === style.id\n                                ? 'border-purple-500 bg-purple-50 shadow-md'\n                                : 'border-gray-200 hover:border-gray-300'\n                            }`}\n                            onClick={() => setDigitalCard(prev => ({ ...prev, qrStyle: style.id }))}\n                          >\n                            <div className=\"flex flex-col items-center text-center\">\n                              <style.icon className=\"h-6 w-6 mb-2 text-purple-600\" />\n                              <p className=\"text-xs font-medium text-gray-700\">{style.name}</p>\n                              <p className=\"text-xs text-gray-500 mt-1\">{style.description}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"mt-8 flex flex-col sm:flex-row sm:justify-between gap-4\">\n                    <div className=\"flex space-x-3\">\n                      <Button \n                        onClick={handleSaveProfile} \n                        disabled={saving}\n                        className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                      >\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        {saving ? \"Saving...\" : \"Save Profile\"}\n                      </Button>\n                      <Button variant=\"outline\" onClick={handleDownloadVCard} className=\"border-purple-300 text-purple-700 hover:bg-purple-50\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Download vCard\n                      </Button>\n                    </div>\n                    <div className=\"flex space-x-3\">\n                      <Button variant=\"outline\" onClick={handleDownloadQR} className=\"border-green-300 text-green-700 hover:bg-green-50\">\n                        <QrCode className=\"h-4 w-4 mr-2\" />\n                        Download QR\n                      </Button>\n                      <Button variant=\"outline\" onClick={handleCopyShareLink} className=\"border-blue-300 text-blue-700 hover:bg-blue-50\">\n                        <LinkIcon className=\"h-4 w-4 mr-2\" />\n                        Copy Link\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Live Preview Section - Fixed and Properly Sized */}\n          <div className=\"mt-8 lg:mt-0 lg:col-span-5\">\n            <div className=\"lg:sticky lg:top-6\">\n              <Card className=\"shadow-2xl border-0 bg-white/90 backdrop-blur\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                      <Zap className=\"h-5 w-5 mr-2 text-yellow-600\" />\n                      Live Preview\n                    </h3>\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      <span>Live</span>\n                    </div>\n                  </div>\n                  \n                  {/* Preview Container with proper sizing */}\n                  <div className=\"flex items-center justify-center min-h-[500px] max-h-[600px] overflow-auto bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-4\">\n                    <div className=\"w-full max-w-xs\">\n                      {renderCardPreview()}\n                    </div>\n                  </div>\n\n                  {/* Template Info */}\n                  <div className=\"mt-6 p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {TEMPLATES.find(t => t.id === digitalCard.template)?.name} Template\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {TEMPLATES.find(t => t.id === digitalCard.template)?.description}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-2xl\">\n                          {TEMPLATES.find(t => t.id === digitalCard.template)?.preview}\n                        </div>\n                        {(() => {\n                          const template = TEMPLATES.find(t => t.id === digitalCard.template);\n                          const IconComponent = template?.icon;\n                          return IconComponent ? <IconComponent className=\"h-5 w-5 text-purple-600\" /> : null;\n                        })()}\n                      </div>\n                    </div>\n                    \n                    {/* Color Display */}\n                    <div className=\"flex items-center space-x-2 mt-3\">\n                      <span className=\"text-xs text-gray-500\">Colors:</span>\n                      <div \n                        className=\"w-4 h-4 rounded-full border border-gray-300\"\n                        style={{ backgroundColor: digitalCard.primaryColor }}\n                      />\n                      <div \n                        className=\"w-4 h-4 rounded-full border border-gray-300\"\n                        style={{ backgroundColor: digitalCard.secondaryColor }}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Usage Limit Modal */}\n      <UsageLimitModal\n        isOpen={showLimitModal}\n        onClose={() => setShowLimitModal(false)}\n        feature=\"digitalCard\"\n        currentCount={usage.digitalCardsCount}\n        limit={limits.digitalCards}\n      />\n    </div>\n  );\n}","size_bytes":65768},"client/src/pages/Groups/Groups.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, query, where, getDocs, addDoc, deleteDoc, doc, serverTimestamp, updateDoc } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Users, Trash2, Tag, X, Download, FileSpreadsheet } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\n\ninterface Group {\n  id: string;\n  name: string;\n  createdAt: Date;\n  ownerId: string;\n  contactCount?: number;\n  tags?: string[];\n}\n\ninterface Contact {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  position?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  country?: string;\n  notes?: string;\n  tags?: string[];\n  groupIds?: string[];\n  groupId?: string;\n  groups?: any[];\n  group?: string;\n  categoryId?: string;\n  categories?: any[];\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport default function Groups() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showTagsModal, setShowTagsModal] = useState(false);\n  const [showContactsModal, setShowContactsModal] = useState(false);\n  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);\n  const [groupContacts, setGroupContacts] = useState<Contact[]>([]);\n  const [allContacts, setAllContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [exporting, setExporting] = useState(false);\n  const [groupName, setGroupName] = useState(\"\");\n  const [newTag, setNewTag] = useState(\"\");\n\n  useEffect(() => {\n    if (!user) return;\n    fetchGroups();\n  }, [user]);\n\n  const fetchGroups = async () => {\n    try {\n      const groupsQuery = query(collection(db, \"groups\"), where(\"ownerId\", \"==\", user!.uid));\n      const groupsSnapshot = await getDocs(groupsQuery);\n      \n      // Get contact counts for each group\n      const contactsQuery = query(collection(db, \"contacts\"), where(\"ownerId\", \"==\", user!.uid));\n      const contactsSnapshot = await getDocs(contactsQuery);\n      const contacts = contactsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n      // Store all contacts for later use\n      setAllContacts(contacts);\n\n      const groupsWithCounts = groupsSnapshot.docs.map(doc => {\n        const groupData = doc.data();\n        \n        // Calculate contact count - check multiple possible field names and structures\n        const contactCount = contacts.filter(contact => {\n          const possibleGroupFields = [\n            contact.groupIds,\n            contact.groupId, \n            contact.groups,\n            contact.group,\n            contact.categoryId,\n            contact.categories\n          ];\n\n          for (const field of possibleGroupFields) {\n            if (!field) continue;\n            \n            if (Array.isArray(field)) {\n              if (field.includes(doc.id)) return true;\n              if (field.some(g => g?.id === doc.id)) return true;\n            } else if (typeof field === 'string') {\n              if (field === doc.id) return true;\n            }\n          }\n          return false;\n        }).length;\n\n        return {\n          id: doc.id,\n          ...groupData,\n          createdAt: groupData.createdAt?.toDate() || new Date(),\n          contactCount,\n        } as Group;\n      });\n\n      setGroups(groupsWithCounts);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch groups\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchGroupContacts = async (groupId: string) => {\n    try {\n      const contacts = allContacts.filter(contact => {\n        const possibleGroupFields = [\n          contact.groupIds,\n          contact.groupId, \n          contact.groups,\n          contact.group,\n          contact.categoryId,\n          contact.categories\n        ];\n\n        for (const field of possibleGroupFields) {\n          if (!field) continue;\n          \n          if (Array.isArray(field)) {\n            if (field.includes(groupId)) return true;\n            if (field.some(g => g?.id === groupId)) return true;\n          } else if (typeof field === 'string') {\n            if (field === groupId) return true;\n          }\n        }\n        return false;\n      });\n\n      setGroupContacts(contacts);\n    } catch (error) {\n      console.error(\"Error fetching group contacts:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch group contacts\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportGroupToExcel = async (group: Group) => {\n    setExporting(true);\n    try {\n      // Get contacts for this group\n      const contacts = allContacts.filter(contact => {\n        const possibleGroupFields = [\n          contact.groupIds,\n          contact.groupId, \n          contact.groups,\n          contact.group,\n          contact.categoryId,\n          contact.categories\n        ];\n\n        for (const field of possibleGroupFields) {\n          if (!field) continue;\n          \n          if (Array.isArray(field)) {\n            if (field.includes(group.id)) return true;\n            if (field.some(g => g?.id === group.id)) return true;\n          } else if (typeof field === 'string') {\n            if (field === group.id) return true;\n          }\n        }\n        return false;\n      });\n\n      // Create a new workbook\n      const workbook = XLSX.utils.book_new();\n\n      // Group Information Sheet\n      const groupInfo = [\n        ['Group Information'],\n        [''],\n        ['Group Name', group.name],\n        ['Total Contacts', contacts.length],\n        ['Created Date', group.createdAt.toLocaleDateString()],\n        ['Tags', group.tags?.join(', ') || 'No tags'],\n        ['Export Date', new Date().toLocaleDateString()],\n        ['Export Time', new Date().toLocaleTimeString()],\n      ];\n\n      const groupInfoSheet = XLSX.utils.aoa_to_sheet(groupInfo);\n      \n      // Style the header\n      if (!groupInfoSheet['!merges']) groupInfoSheet['!merges'] = [];\n      groupInfoSheet['!merges'].push({s: {r: 0, c: 0}, e: {r: 0, c: 1}});\n      \n      // Set column widths\n      groupInfoSheet['!cols'] = [\n        { width: 20 },\n        { width: 30 }\n      ];\n\n      XLSX.utils.book_append_sheet(workbook, groupInfoSheet, 'Group Info');\n\n      // Contacts Sheet\n      if (contacts.length > 0) {\n        const contactsData = contacts.map(contact => ({\n          'First Name': contact.firstName || '',\n          'Last Name': contact.lastName || '',\n          'Full Name': `${contact.firstName || ''} ${contact.lastName || ''}`.trim(),\n          'Email': contact.email || '',\n          'Phone': contact.phone || '',\n          'Company': contact.company || '',\n          'Position': contact.position || '',\n          'Address': contact.address || '',\n          'City': contact.city || '',\n          'State': contact.state || '',\n          'Zip Code': contact.zipCode || '',\n          'Country': contact.country || '',\n          'Notes': contact.notes || '',\n          'Contact Tags': contact.tags?.join(', ') || '',\n          'Created Date': contact.createdAt ? new Date(contact.createdAt).toLocaleDateString() : '',\n          'Updated Date': contact.updatedAt ? new Date(contact.updatedAt).toLocaleDateString() : '',\n        }));\n\n        const contactsSheet = XLSX.utils.json_to_sheet(contactsData);\n        \n        // Set column widths for contacts sheet\n        contactsSheet['!cols'] = [\n          { width: 15 }, // First Name\n          { width: 15 }, // Last Name\n          { width: 25 }, // Full Name\n          { width: 25 }, // Email\n          { width: 15 }, // Phone\n          { width: 20 }, // Company\n          { width: 20 }, // Position\n          { width: 30 }, // Address\n          { width: 15 }, // City\n          { width: 10 }, // State\n          { width: 10 }, // Zip Code\n          { width: 15 }, // Country\n          { width: 30 }, // Notes\n          { width: 20 }, // Contact Tags\n          { width: 12 }, // Created Date\n          { width: 12 }, // Updated Date\n        ];\n\n        XLSX.utils.book_append_sheet(workbook, contactsSheet, 'Contacts');\n      } else {\n        // Empty contacts sheet with headers\n        const emptyContactsData = [[\n          'First Name', 'Last Name', 'Full Name', 'Email', 'Phone', 'Company', \n          'Position', 'Address', 'City', 'State', 'Zip Code', 'Country', \n          'Notes', 'Contact Tags', 'Created Date', 'Updated Date'\n        ], ['No contacts found in this group']];\n        \n        const emptySheet = XLSX.utils.aoa_to_sheet(emptyContactsData);\n        XLSX.utils.book_append_sheet(workbook, emptySheet, 'Contacts');\n      }\n\n      // Summary Sheet\n      const summaryData = [\n        ['Contact Group Export Summary'],\n        [''],\n        ['Group Name', group.name],\n        ['Export Summary', ''],\n        ['Total Contacts', contacts.length],\n        ['Contacts with Email', contacts.filter(c => c.email).length],\n        ['Contacts with Phone', contacts.filter(c => c.phone).length],\n        ['Contacts with Company', contacts.filter(c => c.company).length],\n        ['Contacts with Address', contacts.filter(c => c.address).length],\n        [''],\n        ['Company Breakdown', ''],\n      ];\n\n      // Add company breakdown\n      const companies = contacts.reduce((acc, contact) => {\n        if (contact.company) {\n          acc[contact.company] = (acc[contact.company] || 0) + 1;\n        }\n        return acc;\n      }, {} as Record<string, number>);\n\n      Object.entries(companies).forEach(([company, count]) => {\n        summaryData.push([company, count.toString()]);\n      });\n\n      const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\n      \n      // Style the summary sheet\n      if (!summarySheet['!merges']) summarySheet['!merges'] = [];\n      summarySheet['!merges'].push({s: {r: 0, c: 0}, e: {r: 0, c: 1}});\n      \n      summarySheet['!cols'] = [\n        { width: 25 },\n        { width: 15 }\n      ];\n\n      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');\n\n      // Generate filename with timestamp\n      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');\n      const filename = `${group.name.replace(/[^a-zA-Z0-9]/g, '_')}_Contacts_${timestamp}.xlsx`;\n\n      // Save the file\n      XLSX.writeFile(workbook, filename);\n\n      toast({\n        title: \"Export Successful\",\n        description: `Group \"${group.name}\" exported successfully with ${contacts.length} contacts`,\n      });\n\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export group data to Excel\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const exportAllGroupsToExcel = async () => {\n    setExporting(true);\n    try {\n      const workbook = XLSX.utils.book_new();\n\n      // Overview Sheet\n      const overviewData = [\n        ['All Contact Groups Export'],\n        [''],\n        ['Export Date', new Date().toLocaleDateString()],\n        ['Export Time', new Date().toLocaleTimeString()],\n        ['Total Groups', groups.length.toString()],\n        ['Total Contacts', allContacts.length.toString()],\n        [''],\n        ['Groups Overview'],\n        ['Group Name', 'Contact Count', 'Tags', 'Created Date'],\n      ];\n\n      groups.forEach(group => {\n        overviewData.push([\n          group.name,\n          group.contactCount?.toString() || '0',\n          group.tags?.join(', ') || '',\n          group.createdAt.toLocaleDateString()\n        ]);\n      });\n\n      const overviewSheet = XLSX.utils.aoa_to_sheet(overviewData);\n      overviewSheet['!cols'] = [\n        { width: 25 }, // Group Name\n        { width: 15 }, // Contact Count\n        { width: 30 }, // Tags\n        { width: 15 }, // Created Date\n      ];\n\n      XLSX.utils.book_append_sheet(workbook, overviewSheet, 'Overview');\n\n      // Create a sheet for each group\n      for (const group of groups) {\n        const contacts = allContacts.filter(contact => {\n          const possibleGroupFields = [\n            contact.groupIds,\n            contact.groupId, \n            contact.groups,\n            contact.group,\n            contact.categoryId,\n            contact.categories\n          ];\n\n          for (const field of possibleGroupFields) {\n            if (!field) continue;\n            \n            if (Array.isArray(field)) {\n              if (field.includes(group.id)) return true;\n              if (field.some(g => g?.id === group.id)) return true;\n            } else if (typeof field === 'string') {\n              if (field === group.id) return true;\n            }\n          }\n          return false;\n        });\n\n        if (contacts.length > 0) {\n          const contactsData = contacts.map(contact => ({\n            'First Name': contact.firstName || '',\n            'Last Name': contact.lastName || '',\n            'Email': contact.email || '',\n            'Phone': contact.phone || '',\n            'Company': contact.company || '',\n            'Position': contact.position || '',\n            'Address': contact.address || '',\n            'City': contact.city || '',\n            'State': contact.state || '',\n            'Country': contact.country || '',\n            'Notes': contact.notes || '',\n          }));\n\n          const contactsSheet = XLSX.utils.json_to_sheet(contactsData);\n          contactsSheet['!cols'] = [\n            { width: 15 }, { width: 15 }, { width: 25 }, { width: 15 },\n            { width: 20 }, { width: 20 }, { width: 30 }, { width: 15 },\n            { width: 10 }, { width: 15 }, { width: 30 }\n          ];\n\n          // Sanitize sheet name\n          const sheetName = group.name.replace(/[^\\w\\s]/g, '').substring(0, 30);\n          XLSX.utils.book_append_sheet(workbook, contactsSheet, sheetName);\n        }\n      }\n\n      // Generate filename\n      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');\n      const filename = `All_Contact_Groups_${timestamp}.xlsx`;\n\n      XLSX.writeFile(workbook, filename);\n\n      toast({\n        title: \"Export Successful\",\n        description: `All groups exported successfully with ${allContacts.length} total contacts`,\n      });\n\n    } catch (error) {\n      console.error(\"Error exporting all groups:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export all groups data to Excel\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const removeContactFromGroup = async (contactId: string, groupId: string) => {\n    try {\n      const contact = allContacts.find(c => c.id === contactId);\n      if (!contact) return;\n\n      const updates: any = {};\n      \n      // Update groupIds array if it exists\n      if (contact.groupIds && Array.isArray(contact.groupIds)) {\n        updates.groupIds = contact.groupIds.filter((id: string) => id !== groupId);\n      }\n      // Clear single groupId if it matches\n      if (contact.groupId === groupId) {\n        updates.groupId = null;\n      }\n      // Handle other possible field variations\n      if (contact.groups && Array.isArray(contact.groups)) {\n        updates.groups = contact.groups.filter((g: any) => g?.id !== groupId);\n      }\n      if (contact.group === groupId) {\n        updates.group = null;\n      }\n\n      await updateDoc(doc(db, \"contacts\", contactId), updates);\n\n      toast({\n        title: \"Success\",\n        description: \"Contact removed from group successfully\",\n      });\n\n      // Refresh data\n      fetchGroups();\n      fetchGroupContacts(groupId);\n    } catch (error) {\n      console.error(\"Error removing contact from group:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove contact from group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addContactToGroup = async (contactId: string, groupId: string) => {\n    try {\n      const contact = allContacts.find(c => c.id === contactId);\n      if (!contact) return;\n\n      const updates: any = {};\n      \n      // Add to groupIds array (most common pattern)\n      const currentGroupIds = contact.groupIds || [];\n      if (!currentGroupIds.includes(groupId)) {\n        updates.groupIds = [...currentGroupIds, groupId];\n      }\n\n      await updateDoc(doc(db, \"contacts\", contactId), updates);\n\n      toast({\n        title: \"Success\",\n        description: \"Contact added to group successfully\",\n      });\n\n      // Refresh data\n      fetchGroups();\n      fetchGroupContacts(groupId);\n    } catch (error) {\n      console.error(\"Error adding contact to group:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add contact to group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openContactsModal = (group: Group) => {\n    setSelectedGroup(group);\n    fetchGroupContacts(group.id);\n    setShowContactsModal(true);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await addDoc(collection(db, \"groups\"), {\n        name: groupName,\n        ownerId: user!.uid,\n        createdAt: serverTimestamp(),\n        tags: [],\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Group created successfully\",\n      });\n\n      setShowAddModal(false);\n      setGroupName(\"\");\n      fetchGroups();\n    } catch (error) {\n      console.error(\"Error creating group:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAddTag = async () => {\n    if (!newTag.trim() || !selectedGroup) return;\n\n    try {\n      const currentTags = selectedGroup.tags || [];\n      if (currentTags.includes(newTag.trim())) {\n        toast({\n          title: \"Tag already exists\",\n          description: \"This tag is already added to the group\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const updatedTags = [...currentTags, newTag.trim()];\n      await updateDoc(doc(db, \"groups\", selectedGroup.id), { tags: updatedTags });\n\n      setSelectedGroup({ ...selectedGroup, tags: updatedTags });\n      setNewTag(\"\");\n      fetchGroups();\n\n      toast({\n        title: \"Success\",\n        description: \"Tag added successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error adding tag:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add tag\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveTag = async (tagToRemove: string) => {\n    if (!selectedGroup) return;\n\n    try {\n      const currentTags = selectedGroup.tags || [];\n      const updatedTags = currentTags.filter(tag => tag !== tagToRemove);\n      await updateDoc(doc(db, \"groups\", selectedGroup.id), { tags: updatedTags });\n\n      setSelectedGroup({ ...selectedGroup, tags: updatedTags });\n      fetchGroups();\n\n      toast({\n        title: \"Success\",\n        description: \"Tag removed successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error removing tag:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove tag\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openTagsModal = (group: Group) => {\n    setSelectedGroup(group);\n    setShowTagsModal(true);\n  };\n\n  const handleDeleteGroup = async (groupId: string) => {\n    try {\n      // Remove group from all contacts that reference it\n      const contactsQuery = query(collection(db, \"contacts\"), where(\"ownerId\", \"==\", user!.uid));\n      const contactsSnapshot = await getDocs(contactsQuery);\n      \n      const updatePromises = contactsSnapshot.docs\n        .filter(doc => {\n          const data = doc.data();\n          // Check all possible field variations\n          const possibleGroupFields = [\n            data.groupIds,\n            data.groupId, \n            data.groups,\n            data.group,\n            data.categoryId,\n            data.categories\n          ];\n\n          for (const field of possibleGroupFields) {\n            if (!field) continue;\n            \n            if (Array.isArray(field)) {\n              if (field.includes(groupId)) return true;\n              if (field.some(g => g?.id === groupId)) return true;\n            } else if (typeof field === 'string') {\n              if (field === groupId) return true;\n            }\n          }\n          return false;\n        })\n        .map(contactDoc => {\n          const data = contactDoc.data();\n          const updates: any = {};\n          \n          // Update groupIds array if it exists\n          if (data.groupIds && Array.isArray(data.groupIds)) {\n            updates.groupIds = data.groupIds.filter((id: string) => id !== groupId);\n          }\n          // Clear single groupId if it matches\n          if (data.groupId === groupId) {\n            updates.groupId = null;\n          }\n          // Handle other possible field variations\n          if (data.groups && Array.isArray(data.groups)) {\n            updates.groups = data.groups.filter((g: any) => g?.id !== groupId);\n          }\n          if (data.group === groupId) {\n            updates.group = null;\n          }\n          \n          return updateDoc(doc(db, \"contacts\", contactDoc.id), updates);\n        });\n\n      await Promise.all(updatePromises);\n\n      // Delete the group\n      await deleteDoc(doc(db, \"groups\", groupId));\n\n      toast({\n        title: \"Success\",\n        description: \"Group deleted successfully\",\n      });\n\n      fetchGroups();\n    } catch (error) {\n      console.error(\"Error deleting group:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete group\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-gray-200 h-32 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">Groups</h2>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            {groups.length > 0 && (\n              <Button\n                variant=\"outline\"\n                onClick={exportAllGroupsToExcel}\n                disabled={exporting}\n                className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-200\"\n              >\n                {exporting ? (\n                  <div className=\"animate-spin h-4 w-4 mr-2 border-2 border-green-600 border-t-transparent rounded-full\" />\n                ) : (\n                  <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n                )}\n                Export All Groups\n              </Button>\n            )}\n            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Group\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Group</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"groupName\">Group Name</Label>\n                    <Input\n                      id=\"groupName\"\n                      value={groupName}\n                      onChange={(e) => setGroupName(e.target.value)}\n                      placeholder=\"Enter group name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\">Create Group</Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          {groups.map((group) => (\n            <Card key={group.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Users className=\"text-primary h-6 w-6\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">{group.name}</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        {group.contactCount || 0} contact{(group.contactCount || 0) !== 1 ? 's' : ''}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => exportGroupToExcel(group)}\n                      disabled={exporting}\n                      className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                      title=\"Export to Excel\"\n                    >\n                      {exporting ? (\n                        <div className=\"animate-spin h-4 w-4 border-2 border-green-600 border-t-transparent rounded-full\" />\n                      ) : (\n                        <Download className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteGroup(group.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Tags */}\n                {group.tags && group.tags.length > 0 && (\n                  <div className=\"mb-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      {group.tags.map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-xs text-gray-500\">\n                    Created {group.createdAt.toLocaleDateString()}\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openContactsModal(group)}\n                      className=\"text-green-600 hover:text-green-700\"\n                    >\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      View Contacts\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openTagsModal(group)}\n                      className=\"text-blue-600 hover:text-blue-700\"\n                    >\n                      <Tag className=\"h-4 w-4 mr-1\" />\n                      Tags\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Tags Management Modal */}\n        <Dialog open={showTagsModal} onOpenChange={setShowTagsModal}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Manage Tags - {selectedGroup?.name}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {/* Add New Tag */}\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Enter tag name...\"\n                  value={newTag}\n                  onChange={(e) => setNewTag(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      handleAddTag();\n                    }\n                  }}\n                />\n                <Button onClick={handleAddTag} disabled={!newTag.trim()}>\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              {/* Current Tags */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Current Tags</Label>\n                {selectedGroup?.tags && selectedGroup.tags.length > 0 ? (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedGroup.tags.map((tag, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                        {tag}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-4 w-4 p-0 hover:bg-red-100\"\n                          onClick={() => handleRemoveTag(tag)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </Badge>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500\">No tags added yet</p>\n                )}\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Contacts Management Modal */}\n        <Dialog open={showContactsModal} onOpenChange={setShowContactsModal}>\n          <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <span>Manage Contacts - {selectedGroup?.name}</span>\n                {selectedGroup && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => exportGroupToExcel(selectedGroup)}\n                    disabled={exporting}\n                    className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-200\"\n                  >\n                    {exporting ? (\n                      <div className=\"animate-spin h-4 w-4 mr-2 border-2 border-green-600 border-t-transparent rounded-full\" />\n                    ) : (\n                      <Download className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Export Excel\n                  </Button>\n                )}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              {/* Current Contacts in Group */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Contacts in this group ({groupContacts.length})\n                </Label>\n                {groupContacts.length > 0 ? (\n                  <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-lg p-2\">\n                    {groupContacts.map((contact) => (\n                      <div key={contact.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">\n                            {contact.firstName} {contact.lastName}\n                          </p>\n                          {contact.email && (\n                            <p className=\"text-xs text-gray-500\">{contact.email}</p>\n                          )}\n                          {contact.phone && (\n                            <p className=\"text-xs text-gray-500\">{contact.phone}</p>\n                          )}\n                          {contact.company && (\n                            <p className=\"text-xs text-blue-600\">{contact.company}</p>\n                          )}\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeContactFromGroup(contact.id, selectedGroup!.id)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500 py-4 text-center border rounded-lg\">\n                    No contacts in this group yet\n                  </p>\n                )}\n              </div>\n\n              {/* Add Contacts to Group */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Add Contacts to Group\n                </Label>\n                {allContacts.filter(contact => \n                  !groupContacts.some(gc => gc.id === contact.id)\n                ).length > 0 ? (\n                  <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded-lg p-2\">\n                    {allContacts\n                      .filter(contact => !groupContacts.some(gc => gc.id === contact.id))\n                      .map((contact) => (\n                        <div key={contact.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-sm\">\n                              {contact.firstName} {contact.lastName}\n                            </p>\n                            {contact.email && (\n                              <p className=\"text-xs text-gray-500\">{contact.email}</p>\n                            )}\n                            {contact.phone && (\n                              <p className=\"text-xs text-gray-500\">{contact.phone}</p>\n                            )}\n                            {contact.company && (\n                              <p className=\"text-xs text-blue-600\">{contact.company}</p>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => addContactToGroup(contact.id, selectedGroup!.id)}\n                            className=\"text-green-600 hover:text-green-700\"\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500 py-4 text-center border rounded-lg\">\n                    All contacts are already in this group\n                  </p>\n                )}\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {groups.length === 0 && (\n          <div className=\"mt-6 text-center py-12\">\n            <div className=\"text-gray-500\">\n              No groups yet. Create your first group to organize your contacts.\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":36823},"client/src/pages/NFCCard/NFCCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\"; // üëà Make sure you have this\nimport { Smartphone, Zap, Share2, Clock } from \"lucide-react\";\n\nexport default function NFCCard() {\n  const [email, setEmail] = useState(\"\");\n  const [waitlistCount, setWaitlistCount] = useState(42); // üëà demo count\n  const [interestedCount, setInterestedCount] = useState(100); // üëà demo count\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleJoinWaitlist = () => {\n    if (!email) return;\n    // TODO: send email to backend / API\n    console.log(\"New Waitlist Email:\", email);\n    setWaitlistCount(waitlistCount + 1);\n    setIsSubmitted(true);\n    setEmail(\"\");\n  };\n\n  const handleInterested = () => {\n    // TODO: save interested click to backend\n    setInterestedCount(interestedCount + 1);\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"text-center\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-primary/10 mb-6\">\n              <Smartphone className=\"h-12 w-12 text-primary\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">NFC Digital Cards</h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Transform your networking with smart NFC-enabled digital business cards. \n              Share your contact information instantly with just a tap.\n            </p>\n          </div>\n\n          {/* Coming Soon Badge */}\n          <div className=\"inline-flex items-center px-6 py-3 rounded-full text-lg font-medium bg-gradient-to-r from-primary/10 to-purple-100 text-primary border border-primary/20 mb-8\">\n            <Clock className=\"h-5 w-5 mr-2\" />\n            Coming Soon\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n            <Card className=\"border-2 border-dashed border-gray-200\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 mb-4\">\n                  <Zap className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Instant Sharing</h3>\n                <p className=\"text-gray-600\">\n                  Simply tap your NFC card on any smartphone to instantly share your digital business card.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-dashed border-gray-200\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-4\">\n                  <Share2 className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Always Updated</h3>\n                <p className=\"text-gray-600\">\n                  Your NFC card automatically reflects any changes made to your digital profile in real-time.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-dashed border-gray-200\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-purple-100 mb-4\">\n                  <Smartphone className=\"h-8 w-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Universal Compatibility</h3>\n                <p className=\"text-gray-600\">\n                  Works with all NFC-enabled smartphones without requiring any special apps to be installed.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Call to Action */}\n          <Card className=\"bg-gradient-to-r from-primary/5 to-purple-50 border border-primary/20\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Be the first to know!</h2>\n              <p className=\"text-gray-600 mb-6 max-w-lg mx-auto\">\n                Get notified when NFC digital cards become available. Join our waitlist to secure early access \n                and special launch pricing.\n              </p>\n\n              {/* Email Input Form */}\n              {!isSubmitted ? (\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-6\">\n                  <Input \n                    type=\"email\" \n                    placeholder=\"Enter your email\" \n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"max-w-sm\"\n                  />\n                  <Button size=\"lg\" onClick={handleJoinWaitlist}>\n                    Join Waitlist\n                  </Button>\n                </div>\n              ) : (\n                <p className=\"text-green-600 font-medium mb-6\">‚úÖ You‚Äôre on the waitlist!</p>\n              )}\n\n              {/* Waitlist Counter */}\n              <p className=\"text-sm text-gray-500 mb-4\">\n                {waitlistCount}+ people have already joined\n              </p>\n\n              {/* Interested Button */}\n              <div className=\"flex justify-center\">\n                <Button variant=\"outline\" onClick={handleInterested}>\n                  I‚Äôm Interested ({interestedCount})\n                </Button>\n              </div>\n\n              <p className=\"text-sm text-gray-500 mt-4\">\n                Expected launch: Q2 2024\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5970},"client/src/pages/Pricing/Pricing.tsx":{"content":"import PricingSection from \"@/components/PricingSection\";\n\nexport default function Pricing() {\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"text-center mb-8\">\n          {/* <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Choose Your Plan\n          </h1> */}\n          {/* <p className=\"text-lg text-gray-600\">\n            Unlock powerful AI-driven business card management features\n          </p> */}\n        </div>\n        <PricingSection />\n      </div>\n    </div>\n  );\n}","size_bytes":572},"client/src/pages/PublicShare/PublicShare.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { buildVCard } from \"@/utils/vcard\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Download, Mail, Phone, Globe, MapPin } from \"lucide-react\";\n\ninterface PublicDigitalCard {\n  publicId: string;\n  avatarUrl?: string;\n  firstName: string;\n  lastName: string;\n  title: string;\n  company: string;\n  email: string;\n  phone: string;\n  website: string;\n  address: string;\n  services: string;\n  isPublic: boolean;\n}\n\nexport default function PublicShare() {\n  const [match, params] = useRoute(\"/share/:publicId\");\n  const [card, setCard] = useState<PublicDigitalCard | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [notFound, setNotFound] = useState(false);\n\n  useEffect(() => {\n    if (!params?.publicId) return;\n    fetchPublicCard(params.publicId);\n  }, [params?.publicId]);\n\n  const fetchPublicCard = async (publicId: string) => {\n    try {\n      const cardsQuery = query(\n        collection(db, \"digitalCards\"), \n        where(\"publicId\", \"==\", publicId),\n        where(\"isPublic\", \"==\", true)\n      );\n      const cardsSnapshot = await getDocs(cardsQuery);\n      \n      if (!cardsSnapshot.empty) {\n        const cardData = cardsSnapshot.docs[0].data() as PublicDigitalCard;\n        setCard(cardData);\n      } else {\n        setNotFound(true);\n      }\n    } catch (error) {\n      console.error(\"Error fetching public card:\", error);\n      setNotFound(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownloadVCard = () => {\n    if (!card) return;\n\n    const vCardData = buildVCard({\n      firstName: card.firstName,\n      lastName: card.lastName,\n      title: card.title,\n      company: card.company,\n      email: card.email,\n      phone: card.phone,\n      website: card.website,\n      address: card.address,\n    });\n\n    const blob = new Blob([vCardData], { type: 'text/vcard' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${card.firstName}_${card.lastName}.vcf`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (notFound || !card) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"mb-4\">\n              <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100\">\n                <span className=\"text-red-600 text-2xl\">‚ö†Ô∏è</span>\n              </div>\n            </div>\n            <h1 className=\"text-xl font-bold text-gray-900 mb-2\">Card Not Found</h1>\n            <p className=\"text-gray-600 mb-4\">\n              The digital business card you're looking for doesn't exist or is no longer available.\n            </p>\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-md mx-auto px-4\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-0\">\n            {/* Header with gradient background */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-100 p-6 rounded-t-lg\">\n              <div className=\"text-center\">\n                <Avatar className=\"mx-auto h-24 w-24 mb-4 ring-4 ring-white shadow-lg\">\n                  <AvatarImage src={card.avatarUrl} />\n                  <AvatarFallback className=\"bg-primary text-white text-2xl\">\n                    {card.firstName.charAt(0)}{card.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n                <h1 className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {card.firstName} {card.lastName}\n                </h1>\n                <p className=\"text-primary font-semibold mb-1\">{card.title}</p>\n                <p className=\"text-gray-600\">{card.company}</p>\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"p-6 space-y-4\">\n              {card.email && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <Mail className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <a \n                      href={`mailto:${card.email}`}\n                      className=\"text-gray-900 hover:text-primary transition-colors\"\n                    >\n                      {card.email}\n                    </a>\n                  </div>\n                </div>\n              )}\n\n              {card.phone && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <Phone className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <a \n                      href={`tel:${card.phone}`}\n                      className=\"text-gray-900 hover:text-primary transition-colors\"\n                    >\n                      {card.phone}\n                    </a>\n                  </div>\n                </div>\n              )}\n\n              {card.website && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <Globe className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <a \n                      href={card.website.startsWith('http') ? card.website : `https://${card.website}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-gray-900 hover:text-primary transition-colors\"\n                    >\n                      {card.website}\n                    </a>\n                  </div>\n                </div>\n              )}\n\n              {card.address && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <MapPin className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-900 whitespace-pre-line\">{card.address}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Services */}\n              {card.services && (\n                <div className=\"pt-4 border-t border-gray-200\">\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Services</h3>\n                  <p className=\"text-gray-600 text-sm whitespace-pre-line\">{card.services}</p>\n                </div>\n              )}\n\n              {/* Save Contact Button */}\n              <div className=\"pt-4\">\n                <Button \n                  onClick={handleDownloadVCard}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Save Contact (.vcf)\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Branding */}\n        <div className=\"text-center mt-6\">\n          <p className=\"text-sm text-gray-500\">\n            Powered by <span className=\"font-semibold text-primary\">CardManager</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8103},"client/src/pages/ScannedCards/ScannedCards.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { callGeminiAPI } from \"@/utils/ocr\";\nimport type { ParsedContact } from \"@/utils/parse\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Camera, Upload, MessageCircle, ArrowLeft, Edit, Save, UserPlus, Send, Loader2 } from \"lucide-react\";\n\ninterface ExtractedData {\n  data: ParsedContact;\n  timestamp: Date;\n}\n\ninterface Template {\n  id: string;\n  name: string;\n  content: string;\n}\n\nexport default function ScannedCards() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [showTemplateModal, setShowTemplateModal] = useState(false);\n  const [extractedData, setExtractedData] = useState<ExtractedData | null>(null);\n  const [editData, setEditData] = useState<ParsedContact>({});\n  const [isEditing, setIsEditing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [savingContact, setSavingContact] = useState(false);\n\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        setLoading(true);\n        if (user) {\n          await fetchTemplates();\n        }\n      } catch (error) {\n        console.error(\"Error initializing component:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to initialize component\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeComponent();\n  }, [user]);\n\n  const fetchTemplates = async () => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const templatesQuery = query(\n        collection(db, \"templates\"), \n        where(\"ownerId\", \"==\", user.uid)\n      );\n      const templatesSnapshot = await getDocs(templatesQuery);\n      const templatesData = templatesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as Template[];\n\n      setTemplates(templatesData);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch templates\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFileUpload = async (file: File) => {\n    if (!file) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"File size should be less than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setProcessing(true);\n    \n    try {\n      // Call Gemini API for data extraction\n      const data = await callGeminiAPI(file);\n\n      // Set extracted data for full-page view\n      setExtractedData({\n        data,\n        timestamp: new Date()\n      });\n\n      setEditData(data);\n      setShowUploadModal(false);\n      \n      toast({\n        title: \"Success\",\n        description: \"Business card processed successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Error processing card:\", error);\n      let errorMessage = \"Failed to process business card\";\n      \n      if (error.message?.includes('API key') || error.message?.includes('401')) {\n        errorMessage = 'API key issue. Please check your Gemini API configuration.';\n      } else if (error.message?.includes('Network') || error.message?.includes('fetch')) {\n        errorMessage = 'Network error. Please check your internet connection.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const handleSendTemplate = (template: Template) => {\n    const contactData = isEditing ? editData : extractedData?.data;\n    \n    if (!contactData) {\n      toast({\n        title: \"Error\", \n        description: \"No contact data available\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Replace template variables with actual contact data\n      let message = template.content;\n      message = message.replace(/\\{\\{name\\}\\}/g, contactData.name || 'there');\n      message = message.replace(/\\{\\{company\\}\\}/g, contactData.company || '');\n      message = message.replace(/\\{\\{email\\}\\}/g, contactData.email || '');\n      message = message.replace(/\\{\\{phone\\}\\}/g, contactData.phone || '');\n\n      // Create WhatsApp URL\n      const phoneNumber = contactData.phone?.replace(/\\D/g, '') || '';\n      const encodedMessage = encodeURIComponent(message);\n      const whatsappUrl = phoneNumber \n        ? `https://wa.me/${phoneNumber}?text=${encodedMessage}`\n        : `https://wa.me/?text=${encodedMessage}`;\n\n      // Open WhatsApp\n      window.open(whatsappUrl, '_blank');\n      \n      setShowTemplateModal(false);\n      \n      toast({\n        title: \"Success\",\n        description: \"Redirected to WhatsApp\",\n      });\n    } catch (error) {\n      console.error(\"Error sending template:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSaveToContacts = async () => {\n    const contactData = isEditing ? editData : extractedData?.data;\n    \n    if (!contactData || !user) {\n      toast({\n        title: \"Error\",\n        description: \"No contact data available or user not authenticated\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSavingContact(true);\n    \n    try {\n      // Save contact to Firestore\n      await addDoc(collection(db, \"contacts\"), {\n        ...contactData,\n        ownerId: user.uid,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        source: \"business_card_scan\"\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Contact saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving contact:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save contact\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSavingContact(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    if (extractedData) {\n      setExtractedData({\n        ...extractedData,\n        data: editData\n      });\n    }\n    setIsEditing(false);\n    \n    toast({\n      title: \"Success\",\n      description: \"Changes saved successfully\",\n    });\n  };\n\n  const handleBackToScan = () => {\n    setExtractedData(null);\n    setEditData({});\n    setIsEditing(false);\n  };\n\n  const handleWhatsAppMessage = () => {\n    const contactData = isEditing ? editData : extractedData?.data;\n    if (!contactData?.phone) {\n      toast({\n        title: \"Error\",\n        description: \"No phone number available\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      const phoneNumber = contactData.phone.replace(/\\D/g, '');\n      const whatsappUrl = `https://wa.me/${phoneNumber}`;\n      window.open(whatsappUrl, '_blank');\n      \n      toast({\n        title: \"Success\",\n        description: \"Opened WhatsApp chat\",\n      });\n    } catch (error) {\n      console.error(\"Error opening WhatsApp:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to open WhatsApp\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const FileUploadDialog = () => (\n    <Dialog open={showUploadModal} onOpenChange={setShowUploadModal}>\n      <DialogTrigger asChild>\n        <Button>\n          <Camera className=\"h-4 w-4 mr-2\" />\n          Scan New Card\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Upload Business Card</DialogTitle>\n          <DialogDescription>\n            Upload an image of a business card to extract contact information automatically.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div\n            className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n            onDragOver={(e) => e.preventDefault()}\n            onDrop={(e) => {\n              e.preventDefault();\n              const files = e.dataTransfer.files;\n              if (files.length > 0) handleFileUpload(files[0]);\n            }}\n            onClick={() => {\n              if (processing) return;\n              const input = document.createElement('input');\n              input.type = 'file';\n              input.accept = 'image/*';\n              input.onchange = (e) => {\n                const files = (e.target as HTMLInputElement).files;\n                if (files && files[0]) handleFileUpload(files[0]);\n              };\n              input.click();\n            }}\n          >\n            {processing ? (\n              <Loader2 className=\"mx-auto h-12 w-12 text-gray-400 animate-spin\" />\n            ) : (\n              <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n            )}\n            <p className=\"mt-2 text-sm text-gray-600\">\n              {processing \n                ? \"Processing your business card...\" \n                : \"Drag and drop your business card image, or click to browse\"\n              }\n            </p>\n            <Button \n              variant=\"outline\" \n              className=\"mt-4\"\n              disabled={processing}\n            >\n              {processing ? \"Processing...\" : \"Select File\"}\n            </Button>\n            <p className=\"mt-2 text-xs text-gray-500\">PNG, JPG up to 5MB</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  // Handle authentication check\n  if (!user) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h2>\n            <p className=\"text-gray-600\">Please log in to access the business card scanner.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Full-page view for extracted data\n  if (extractedData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-6\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8 pb-20\">\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Button\n                variant=\"ghost\"\n                onClick={handleBackToScan}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Scan\n              </Button>\n              <h2 className=\"text-2xl font-bold text-gray-900\">Extracted Contact Information</h2>\n            </div>\n            <div className=\"flex space-x-2\">\n              {!isEditing ? (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleSaveChanges}\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <Card className=\"w-full mb-6\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-sm text-gray-500 mb-6\">\n                Processed on {extractedData.timestamp.toLocaleDateString()} at {extractedData.timestamp.toLocaleTimeString()}\n              </div>\n              \n              {isEditing ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={editData.name || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input\n                      id=\"company\"\n                      value={editData.company || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, company: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={editData.email || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={editData.phone || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, phone: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"services\">Services/Position</Label>\n                    <Textarea\n                      id=\"services\"\n                      value={editData.services || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, services: e.target.value }))}\n                      rows={3}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Textarea\n                      id=\"address\"\n                      value={editData.address || \"\"}\n                      onChange={(e) => setEditData(prev => ({ ...prev, address: e.target.value }))}\n                      rows={2}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Full Name</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.name || \"Not provided\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Company</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.company || \"Not provided\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Email Address</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.email || \"Not provided\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-500\">Phone Number</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.phone || \"Not provided\"}</p>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label className=\"text-sm font-medium text-gray-500\">Services/Position</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.services || \"Not provided\"}</p>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <Label className=\"text-sm font-medium text-gray-500\">Address</Label>\n                    <p className=\"mt-1 text-lg\">{extractedData.data.address || \"Not provided\"}</p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Fixed Bottom Action Buttons */}\n          <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg z-50\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                {/* Send Template Button */}\n                <Dialog open={showTemplateModal} onOpenChange={setShowTemplateModal}>\n                  <DialogTrigger asChild>\n                    <Button \n                      className=\"flex-1 sm:flex-none sm:min-w-[150px]\"\n                      variant=\"outline\"\n                    >\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      Send Template\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Select Template to Send</DialogTitle>\n                      <DialogDescription>\n                        Choose a message template to send via WhatsApp to this contact.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                      {templates.length > 0 ? (\n                        templates.map(template => (\n                          <div key={template.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <h4 className=\"font-medium\">{template.name}</h4>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{template.content}</p>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"w-full\"\n                              onClick={() => handleSendTemplate(template)}\n                            >\n                              Send This Template\n                            </Button>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          No templates available. Create templates first.\n                        </div>\n                      )}\n                    </div>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Save to Contacts Button */}\n                <Button\n                  className=\"flex-1 sm:flex-none sm:min-w-[150px]\"\n                  onClick={handleSaveToContacts}\n                  disabled={savingContact}\n                >\n                  {savingContact ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {savingContact ? \"Saving...\" : \"Save to Contacts\"}\n                </Button>\n\n                {/* Send WhatsApp Message Button */}\n                <Button\n                  className=\"flex-1 sm:flex-none sm:min-w-[150px] bg-green-600 hover:bg-green-700\"\n                  onClick={handleWhatsAppMessage}\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  WhatsApp\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Main scan interface\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Business Card Scanner\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Upload and extract contact information from business cards\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <FileUploadDialog />\n          </div>\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <div className=\"text-gray-500\">\n            <Camera className=\"mx-auto h-24 w-24 text-gray-300 mb-4\" />\n            <p className=\"text-lg\">Ready to scan your first business card?</p>\n            <p className=\"text-sm mt-2\">Click \"Scan New Card\" to get started with contact extraction.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21795},"client/src/pages/Settings/Settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { doc, getDoc, setDoc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Save, Send, AlertTriangle } from \"lucide-react\";\n\ninterface Settings {\n  displayName: string;\n  businessName: string;\n  defaultWhatsAppNumber: string;\n  timezone: string;\n  language: string;\n  updatedAt: Date;\n}\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [settings, setSettings] = useState<Settings>({\n    displayName: \"\",\n    businessName: \"\",\n    defaultWhatsAppNumber: \"\",\n    timezone: \"PST\",\n    language: \"English\",\n    updatedAt: new Date(),\n  });\n  const [apiCredentials, setApiCredentials] = useState({\n    whatsappToken: \"\",\n    phoneNumberId: \"\",\n  });\n\n  useEffect(() => {\n    if (!user) return;\n    fetchSettings();\n  }, [user]);\n\n  const fetchSettings = async () => {\n    try {\n      const settingsDoc = await getDoc(doc(db, \"settings\", user!.uid));\n      \n      if (settingsDoc.exists()) {\n        const settingsData = settingsDoc.data();\n        setSettings({\n          ...settingsData,\n          updatedAt: settingsData.updatedAt?.toDate() || new Date(),\n        } as Settings);\n      } else {\n        // Initialize with user data\n        setSettings(prev => ({\n          ...prev,\n          displayName: user!.displayName || \"\",\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveSettings = async () => {\n    setSaving(true);\n    \n    try {\n      await setDoc(doc(db, \"settings\", user!.uid), {\n        ...settings,\n        ownerId: user!.uid,\n        updatedAt: serverTimestamp(),\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Settings saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleTestTemplate = () => {\n    // Placeholder function - in real implementation, this would test WhatsApp Business API\n    toast({\n      title: \"Test Template\",\n      description: \"WhatsApp template test sent (placeholder functionality)\",\n    });\n  };\n\n  const handleFieldChange = (field: keyof Settings, value: string) => {\n    setSettings(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-200 h-64 rounded-lg\"></div>\n              <div className=\"bg-gray-200 h-48 rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">Settings</h2>\n            <p className=\"mt-1 text-sm text-gray-500\">Manage your account and application preferences</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"mt-6 space-y-6\">\n          {/* Profile Settings */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-6\">Profile Information</h3>\n              \n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"displayName\">Display Name</Label>\n                  <Input\n                    id=\"displayName\"\n                    value={settings.displayName}\n                    onChange={(e) => handleFieldChange('displayName', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"businessName\">Business Name</Label>\n                  <Input\n                    id=\"businessName\"\n                    value={settings.businessName}\n                    onChange={(e) => handleFieldChange('businessName', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"defaultWhatsApp\">Default WhatsApp Number</Label>\n                  <Input\n                    id=\"defaultWhatsApp\"\n                    type=\"tel\"\n                    value={settings.defaultWhatsAppNumber}\n                    onChange={(e) => handleFieldChange('defaultWhatsAppNumber', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <p className=\"mt-1 text-sm text-gray-500\">Used for \"Send Profile\" feature</p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"timezone\">Timezone</Label>\n                  <Select value={settings.timezone} onValueChange={(value) => handleFieldChange('timezone', value)}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"PST\">Pacific Standard Time (PST)</SelectItem>\n                      <SelectItem value=\"EST\">Eastern Standard Time (EST)</SelectItem>\n                      <SelectItem value=\"CST\">Central Standard Time (CST)</SelectItem>\n                      <SelectItem value=\"MST\">Mountain Standard Time (MST)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"sm:col-span-2\">\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select value={settings.language} onValueChange={(value) => handleFieldChange('language', value)}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"English\">English</SelectItem>\n                      <SelectItem value=\"Spanish\">Spanish</SelectItem>\n                      <SelectItem value=\"French\">French</SelectItem>\n                      <SelectItem value=\"German\">German</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* WhatsApp Business Integration */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-6\">WhatsApp Business Integration</h3>\n              \n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-6\">\n                <div className=\"flex\">\n                  <div className=\"flex-shrink-0\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-400\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <h3 className=\"text-sm font-medium text-yellow-800\">API Credentials</h3>\n                    <div className=\"mt-2 text-sm text-yellow-700\">\n                      <p>These fields are for UI validation only. Never store API credentials in the database.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6\">\n                <div>\n                  <Label htmlFor=\"whatsappToken\">WhatsApp Business API Token</Label>\n                  <Input\n                    id=\"whatsappToken\"\n                    type=\"password\"\n                    value={apiCredentials.whatsappToken}\n                    onChange={(e) => setApiCredentials(prev => ({ ...prev, whatsappToken: e.target.value }))}\n                    placeholder=\"Enter your API token\"\n                    className=\"mt-1\"\n                  />\n                  <p className=\"mt-1 text-sm text-gray-500\">Required for sending messages via WhatsApp Business API</p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phoneNumberId\">Phone Number ID</Label>\n                  <Input\n                    id=\"phoneNumberId\"\n                    value={apiCredentials.phoneNumberId}\n                    onChange={(e) => setApiCredentials(prev => ({ ...prev, phoneNumberId: e.target.value }))}\n                    placeholder=\"Enter Phone Number ID\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <Button variant=\"outline\" onClick={handleTestTemplate}>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Send Test Template\n                  </Button>\n                  <p className=\"mt-1 text-sm text-gray-500\">Test your WhatsApp Business API configuration</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button onClick={handleSaveSettings} disabled={saving}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {saving ? \"Saving...\" : \"Save Settings\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10217},"client/src/pages/Templates/Templates.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { collection, query, where, getDocs, addDoc, deleteDoc, doc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, FileText, Trash2, MessageSquare } from \"lucide-react\";\n\ninterface Template {\n  id: string;\n  name: string;\n  content: string;\n  createdAt: Date;\n  ownerId: string;\n}\n\nexport default function Templates() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    content: \"\",\n  });\n\n  useEffect(() => {\n    if (!user) return;\n    fetchTemplates();\n  }, [user]);\n\n  const fetchTemplates = async () => {\n    try {\n      const templatesQuery = query(collection(db, \"templates\"), where(\"ownerId\", \"==\", user!.uid));\n      const templatesSnapshot = await getDocs(templatesQuery);\n      \n      const templatesData = templatesSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate() || new Date(),\n      })) as Template[];\n\n      setTemplates(templatesData);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch templates\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await addDoc(collection(db, \"templates\"), {\n        ...formData,\n        ownerId: user!.uid,\n        createdAt: serverTimestamp(),\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Template created successfully\",\n      });\n\n      setShowAddModal(false);\n      setFormData({ name: \"\", content: \"\" });\n      fetchTemplates();\n    } catch (error) {\n      console.error(\"Error creating template:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteTemplate = async (templateId: string) => {\n    try {\n      await deleteDoc(doc(db, \"templates\", templateId));\n\n      toast({\n        title: \"Success\",\n        description: \"Template deleted successfully\",\n      });\n\n      fetchTemplates();\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete template\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUseTemplate = (template: Template) => {\n    // Placeholder function - in real implementation, this would integrate with WhatsApp Business API\n    toast({\n      title: \"Template Selected\",\n      description: `Template \"${template.name}\" ready to use (placeholder functionality)`,\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-gray-200 h-48 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">Templates</h2>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Template</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Template Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter template name\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"content\">Template Content</Label>\n                    <Textarea\n                      id=\"content\"\n                      value={formData.content}\n                      onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                      placeholder=\"Enter your message template...\"\n                      rows={6}\n                      required\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\">Create Template</Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        <div className=\"mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          {templates.map((template) => (\n            <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"text-yellow-600 h-5 w-5\" />\n                      </div>\n                    </div>\n                    <div className=\"ml-4 flex-1\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">{template.name}</h3>\n                      <p className=\"text-sm text-gray-500 mt-1 line-clamp-3\">\n                        {template.content}\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteTemplate(template.id)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-xs text-gray-500\">\n                      Created {template.createdAt.toLocaleDateString()}\n                    </p>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleUseTemplate(template)}\n                      className=\"text-primary\"\n                    >\n                      <MessageSquare className=\"h-4 w-4 mr-1\" />\n                      Use Template\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {templates.length === 0 && (\n          <div className=\"mt-6 text-center py-12\">\n            <div className=\"text-gray-500\">\n              No templates yet. Create your first message template to get started.\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8737}},"version":1}